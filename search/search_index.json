{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sonolus.py","text":"<p>Sonolus.py is a Python library for creating Sonolus engines.</p>"},{"location":"#installation","title":"Installation","text":"<p>Sonolus.py is available on PyPI and can be installed using a package manager like pip.</p> pipuv <pre><code>pip install sonolus.py\n</code></pre> <pre><code>uv add sonolus.py\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Coming soon!</p>"},{"location":"#documentation","title":"Documentation","text":"<p>See Concepts for an overview of usage details.</p> <p>See Reference for detailed information on classes and functions.</p>"},{"location":"concepts/","title":"Concepts","text":"<p>This section provides an overview of the concepts and features of Sonolus.py.</p>"},{"location":"concepts/builtins/","title":"Builtins","text":"<p>Sonolus.py comes with support for a number of built-in functions.</p> <ul> <li><code>abs(x)</code></li> <li><code>bool(object)</code> (for a num argument)</li> <li><code>callable(object)</code></li> <li><code>enumerate(iterable, start=0)</code></li> <li><code>filter(function, iterable)</code></li> <li><code>float(x)</code> (for a num argument)</li> <li><code>int(x)</code> (for a num argument)</li> <li><code>isinstance(object, classinfo)</code></li> <li><code>issubclass(class, classinfo)</code></li> <li><code>len(s)</code></li> <li><code>map(function, iterable)</code> (note: may differ from standard Python behavior, see    <code>map</code>)</li> <li><code>max(iterable, *, key=None)</code>, <code>max(arg1, arg2, *args, key=None)</code></li> <li><code>min(iterable, *, key=None)</code>, <code>min(arg1, arg2, *args, key=None)</code></li> <li><code>range(stop)</code>, <code>range(start, stop[, step])</code></li> <li><code>reversed(seq)</code></li> <li><code>round(number[, ndigits])</code></li> <li><code>zip(*iterables)</code></li> </ul>"},{"location":"concepts/builtins/#standard-library-modules","title":"Standard library modules","text":"<p>Sonolus.py also comes with support for some standard library modules.</p>"},{"location":"concepts/builtins/#math","title":"math","text":"<ul> <li><code>sin(x)</code></li> <li><code>cos(x)</code></li> <li><code>tan(x)</code></li> <li><code>asin(x)</code></li> <li><code>acos(x)</code></li> <li><code>atan(x)</code></li> <li><code>atan2(y, x)</code></li> <li><code>sinh(x)</code></li> <li><code>cosh(x)</code></li> <li><code>tanh(x)</code></li> <li><code>floor(x)</code></li> <li><code>ceil(x)</code></li> <li><code>trunc(x)</code></li> <li><code>log(x[, base])</code></li> </ul>"},{"location":"concepts/builtins/#random","title":"random","text":"<ul> <li><code>randrange(stop)</code>, <code>random.randrange(start, stop[, step])</code></li> <li><code>randint(a, b)</code></li> <li><code>choice(seq)</code></li> <li><code>shuffle(seq)</code></li> <li><code>random()</code> (does not include 1)</li> <li><code>uniform(a, b)</code> (may include <code>b</code> where Python normally doesn't)</li> </ul> <p>Creating <code>Random</code> instances is not supported.</p>"},{"location":"concepts/cli/","title":"Command Line","text":"<p>The Sonolus.py CLI provides commands to run and build Sonolus scripts.</p>"},{"location":"concepts/cli/#starting-a-development-server","title":"Starting a development server","text":"<p>To start a development server, run the following command in the root directory of your project:</p> <pre><code>sonolus-py dev\n</code></pre>"},{"location":"concepts/cli/#building-the-project","title":"Building the project","text":"<p>To build the project, run the following command in the root directory of your project:</p> <pre><code>sonolus-py build\n</code></pre>"},{"location":"concepts/cli/#outputting-the-level-schema","title":"Outputting the level schema","text":"<p>To output the level schema of the project, run the following command in the root directory of your project:</p> <pre><code>sonolus-py schema\n</code></pre>"},{"location":"concepts/cli/#programmatic-usage","title":"Programmatic usage","text":"<p>The same functionality can be accessed programmatically as methods of a project.</p> <p>See Project for more information.</p>"},{"location":"concepts/constructs/","title":"Constructs","text":"<p>Most standard Python constructs are supported in Sonolus.py.</p>"},{"location":"concepts/constructs/#key-differences","title":"Key Differences","text":"<ul> <li>Non-num variables must have a single live definition.<ul> <li>If there are multiple definitions <code>var = ...</code> for a variable, the compiler must be able to determine that a single   one is active whenever the variable is used.</li> </ul> </li> <li>Conditional branches may be eliminated if they are determined to be unreachable</li> <li>Functions with non-num return types may not return multiple distinct objects<ul> <li>Most functions returning a non-num value should have a single return at the end</li> </ul> </li> <li>Destructuring assignment does not support the <code>*</code> operator.</li> <li>Sequence <code>match</code> patterns do not support the <code>*</code> operator.</li> <li>Mapping <code>match</code> patterns are unsupported.</li> <li>Imports may not be done within functions</li> <li>The <code>global</code> and <code>nonlocal</code> keywords are unsupported.</li> </ul>"},{"location":"concepts/constructs/#overview","title":"Overview","text":"<p>The following constructs are supported in Sonolus.py:  </p> <ul> <li>Expressions:<ul> <li>Literals:<ul> <li>Numbers (excluding complex numbers): <code>0</code>, <code>1</code>, <code>1.0</code>, <code>1e3</code>, <code>0x1</code>, <code>0b1</code>, <code>0o1</code></li> <li>Booleans: <code>True</code>, <code>False</code></li> <li>Strings: <code>'Hello, World!'</code>, <code>\"Hello, World!\"</code></li> <li>Tuples: <code>(1, 2, 3)</code></li> </ul> </li> <li>Operators (if supported by the operands):<ul> <li>Unary: <code>+</code>, <code>-</code>, <code>not</code>, <code>~</code></li> <li>Binary: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> <li>Comparison: <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>is</code>, <code>is not</code>, <code>in</code>, <code>not in</code></li> <li>Logical: <code>and</code>, <code>or</code> (for <code>Num</code> arguments only)</li> <li>Ternary: <code>a if &lt;condition&gt; else b</code> (for <code>Num</code> conditions only)</li> <li>Attribute: <code>a.b</code></li> <li>Indexing: <code>a[b]</code></li> <li>Call: <code>f(a, b, c)</code></li> </ul> </li> <li>Variables: <code>a</code>, <code>b</code>, <code>c</code></li> <li>Lambda: <code>lambda a, b: a + b</code></li> <li>Assignment Expression: <code>(a := b)</code></li> </ul> </li> <li>Statements:<ul> <li>Simple Statements:<ul> <li>Assignments:<ul> <li>Simple assignment: <code>a = b</code></li> <li>Augmented assignment: <code>a += b</code></li> <li>Attribute assignment: <code>a.b = c</code></li> <li>Index assignment: <code>a[b] = c</code></li> <li>Destructuring assignment: <code>a, b = b, a</code></li> <li>Multiple assignment: <code>a = b = c = 1</code></li> <li>Annotated assignment: <code>a: int = 1</code></li> </ul> </li> <li>Assert: <code>assert &lt;condition&gt;, &lt;message&gt;</code></li> <li>Pass: <code>pass</code></li> <li>Break: <code>break</code></li> <li>Continue: <code>continue</code></li> <li>Return: <code>return &lt;value&gt;</code></li> <li>Import: <code>import &lt;module&gt;</code>, <code>from &lt;module&gt; import &lt;name&gt;</code> (only outside of functions)</li> </ul> </li> <li>Compound Statements:<ul> <li>If: <code>if &lt;condition&gt;:</code>, <code>elif &lt;condition&gt;:</code>, <code>else:</code></li> <li>While: <code>while &lt;condition&gt;:</code>, <code>else:</code></li> <li>For: <code>for &lt;target&gt; in &lt;iterable&gt;:</code>, <code>else:</code></li> <li>Match: <code>match &lt;value&gt;:</code>, <code>case &lt;pattern&gt;:</code></li> <li>Function Definition: <code>def &lt;name&gt;(&lt;parameters&gt;):</code></li> <li>Class Definition: <code>class &lt;name&gt;:</code> (only outside of functions)</li> </ul> </li> </ul> </li> </ul>"},{"location":"concepts/constructs/#compile-time-evaluation","title":"Compile Time Evaluation","text":"<p>Some expressions can be evaluated at compile time:</p> <ul> <li>Numeric literals: <code>1</code>, <code>2.5</code>, <code>True</code>, <code>False</code>, ...</li> <li>None: <code>None</code></li> <li>Basic arithmetic: for compile time constant operands: <code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code>, ...</li> <li>Is/Is Not None: for any left-hand operand, <code>a is None</code>, <code>a is not None</code></li> <li>Type checks: for any value, <code>isinstance(a, t)</code>, <code>issubclass(a, t)</code></li> <li>Boolean operations:<ul> <li>Negation: <code>not a</code></li> <li>And<ul> <li>Both operands are compile time constants: <code>a and b</code></li> <li>One operand is known to be False: <code>False and a</code>, <code>a and False</code></li> </ul> </li> <li>Or<ul> <li>Both operands are compile time constants: <code>a or b</code></li> <li>One operand is known to be True: <code>True or a</code>, <code>a or True</code></li> </ul> </li> </ul> </li> <li>Comparison: for compile time constant operands: <code>a == b</code>, <code>a != b</code>, <code>a &gt; b</code>, <code>a &lt; b</code>, <code>a &gt;= b</code>, <code>a &lt;= b</code>, ...</li> <li>Variables assigned to compile time constants: <code>a = 1</code>, <code>b = a + 1</code>, ...</li> </ul> <p>Some values like array sizes must be compile-time constants.</p> <p>The compiler will eliminate branches known to be unreachable at compile time:</p> <pre><code>def f(a):\n    if isinstance(a, Num):\n        debug_log(a)\n    else:\n        debug_log(a.x + a.y)\n\n# This works because `isinstance` is evaluated at compile time and only the first (if) branch is reachable.\n# The second (else) branch is eliminated, so we don't get an error that a does not have 'x' and 'y' attributes.\nf(123)\n</code></pre>"},{"location":"concepts/constructs/#variables","title":"Variables","text":"<p>Variables can be assigned and used like in vanilla Python.</p> <pre><code>a = 1\nb = 2\nc = a + b\n</code></pre> <p>Unlike vanilla Python, non-num variables must have a single unambiguous definition when used. Nums have no such restriction.</p> <p>The following are allowed:</p> <pre><code>v = Vec2(1, 2)  # (1)\nv = Vec2(3, 4)  # (2)\ndebug_log(v.x + v.y)  # 'v' is valid because (2) is the only active definition\n</code></pre> <pre><code>v = 1  # (1)\nv = Vec2(3, 4)  # (2)\ndebug_log(v.x + v.y)  # 'v' is valid because (2) is the only active definition\n</code></pre> <pre><code>v = Vec2(1, 2)  # (1)\nwhile condition():\n    v = Vec2(3, 4)  # (2)\n    debug_log(v.x + v.y)  # 'v' is valid because (2) is the only active definition\n</code></pre> <pre><code>v = Vec2(1, 2)  # (1)\nif random() &lt; 0.5:\n    v @= Vec2(3, 4)  # Updates 'v' in-place without redefining it\ndebug_log(v.x + v.y)  # 'v' is valid because (1) is the only active definition\n</code></pre> <p>The following are not allowed:</p> <pre><code>v = Vec2(1, 2)  # (1)\nif random() &lt; 0.5:\n    v = Vec2(3, 4)  # (2)\ndebug_log(v.x + v.y)  # 'v' is invalid because both (1) and (2) are active\n</code></pre> <pre><code>v = Vec2(1, 2)  # (1)\nwhile condition():\n    debug_log(v.x + v.y)  # 'v' is invalid because (1) and (2) are active\n    v = Vec2(3, 4)  # (2) redefines 'v' for future iterations\n</code></pre>"},{"location":"concepts/constructs/#expressions","title":"Expressions","text":""},{"location":"concepts/constructs/#literals","title":"Literals","text":"<p><code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code>, and <code>tuple</code> literals are supported:</p> <pre><code>a = 1\nb = 1.0\nc = True\nd = 'Hello, World!'\ne = (1, 2, 3)\n</code></pre>"},{"location":"concepts/constructs/#operators","title":"Operators","text":"<p>All standard operators are supported for types implementing them. <code>@=</code> is reserved as the copy-from operator.</p> <pre><code>a = 1 + 2\nb = 3 - 4\nc = 5 * 6\nd = 7 / 8\ne = Vec2(1, 2)\nf = e.x + e.y\ng = Array(1, 2, 3)\nh = g[0] + g[1] + g[2]\n(i := 1)\n</code></pre> <p>The ternary operator is supported for, but the condition must be a <code>Num</code>. If the operands are not nums, the condition must be a compile-time constant or this will be considered an error:</p> <pre><code># Ok\na = 1 if random() &lt; 0.5 else 2\nb = Vec2(1, 2) if b is None else b\n\n# Not ok\nc = Vec2(1, 2) if random() &lt; 0.5 else Vec2(3, 4)  # Multiple definitions\n</code></pre> <p>If the condition is a compile-time constant, then the ternary operator will be evaluated at compile time:</p> <pre><code>e = Vec2(0, 0) if e is None else e  # Ok, evaluated at compile time\n</code></pre>"},{"location":"concepts/constructs/#statements","title":"Statements","text":""},{"location":"concepts/constructs/#assignment","title":"Assignment","text":"<p>Most assignment types are supported. Destructuring assignment is supported only for tuples, and the <code>*</code> operator is not supported.</p> <pre><code># Ok\na = 1\nb += 2\nc.x = 3\nd[0] = 4\n(e, f), g = (1, 2), 3\n\n# Not ok\nh, *i = 1, 2, 3  # Not supported\n</code></pre> <pre><code>if a &gt; 0:\n    pass\n</code></pre>"},{"location":"concepts/constructs/#conditional-statements","title":"Conditional Statements","text":"<p>The standard conditional statements are supported.</p>"},{"location":"concepts/constructs/#if-elif-else","title":"if / elif / else","text":"<pre><code>if a &gt; 0:\n    ...\nelif a &lt; 0:\n    ...\nelse:\n    ...\n</code></pre> <p>When the condition is a compile-time constant, the compiler will remove the unreachable branches:</p> Code<pre><code>v = None\nif v is None:\n    v = Vec2(1, 2)\ndebug_log(v.x + v.y)\n</code></pre> Equivalent<pre><code>v = None\n# The 'if' branch is always taken\nv = Vec2(1, 2)\ndebug_log(v.x + v.y)\n</code></pre> <p>This is useful for handling optional arguments and supporting multiple argument types:</p> <pre><code>def f(a: Vec2 | None = None):\n    if a is None:\n        a = Vec2(1, 2)\n    debug_log(a.x + a.y)\n</code></pre> <pre><code>def f(a: Vec2 | int):\n    if isinstance(a, Vec2):\n        debug_log(a.x + a.y)\n    else:\n        debug_log(a)\n</code></pre>"},{"location":"concepts/constructs/#match-case","title":"match / case","text":"<p>The <code>match</code> statement is supported for matching values against patterns. All patterns, including subpatterns, except mapping patterns and sequences with the <code>*</code> operator are supported.  Records have a <code>__match_args__</code> attribute defined automatically, so they can be used with positional subpatterns.</p> <pre><code>match x:\n    case 1:\n        ...\n    case 2 | 3:\n        ...\n    case Vec2() as v:\n        ...\n    case (a, b):\n        ...\n    case Num(a):\n        ...\n    case _:\n        ...\n</code></pre> <p>As with <code>if</code> statements, the compiler will remove unreachable branches when the value is a compile-time constant:</p> Code<pre><code>v = 1\nmatch v:\n    case Vec2(a, b):\n        debug_log(a + b)\n    case Num():\n        debug_log(v)\n    case _:\n        debug_log(-1)\n</code></pre> Equivalent<pre><code>v = 1\n# 'case Num()' is always taken\ndebug_log(v)\n</code></pre>"},{"location":"concepts/constructs/#loops","title":"Loops","text":""},{"location":"concepts/constructs/#while-else","title":"while / else","text":"<p>While loops are fully supported, including the <code>else</code> clause and the <code>break</code> and <code>continue</code> statements.</p> <pre><code>while a &gt; 0:\n    if ...:\n        break\n    if ...:\n        continue\n    ...\nelse:\n    ...\n</code></pre>"},{"location":"concepts/constructs/#for-else","title":"for / else","text":"<p>For loops are supported, including the <code>else</code> clause and the <code>break</code> and <code>continue</code> statements. Custom iterators must subclass SonolusIterator.</p> <pre><code>for i in range(10):\n    if ...:\n        break\n    if ...:\n        continue\n    ...\nelse:\n    ...\n</code></pre> <p>Tuples can be iterated over and result in an unrolled loop. This can be useful for iterating of objects of different, types, but care should be taken since it results in more code being generated compared to a normal loop:</p> Code<pre><code>for i in (1, 2, 3):\n    debug_log(i)\n</code></pre> Equivalent<pre><code>debug_log(1)\ndebug_log(2)\ndebug_log(3)\n</code></pre>"},{"location":"concepts/constructs/#functions","title":"Functions","text":"<p>Functions and lambdas are supported, including within other functions:</p> <pre><code>def f(a, b):\n    return a + b\n\n\ndef g(a):\n    return lambda b: f(a, b)\n</code></pre> <p>Function returns follow the same rules as variable access. If a function returns a non-num value, it most only return that value. If the function always returns a num, it may have any number of returns. Similarly, if a function always returns None (<code>return None</code> or just <code>return</code>), it may have any number of returns.</p> <p>The following are allowed:</p> <pre><code>def f():\n    return Vec2(1, 2)\n</code></pre> <pre><code>def g(x):\n    # Only one return is reachable since isinstance is evaluated at compile time\n    if isinstance(x, Vec2):\n        return Vec2(x.y, x.x)\n    else:\n        return x\n</code></pre> <pre><code>def h(x):\n    # Both returns return the exact same value\n    x = Vec2(1, 2)\n    if random() &lt; 0.5:\n        debug_log(123)\n        return x\n    else:\n        return x\n</code></pre> <pre><code>def i(x):\n    # All return values are nums\n    if random() &lt; 0.5:\n        return 1\n    return 2\n</code></pre> <p>The following are not allowed:</p> <pre><code>def j():\n    # Either return is reachable and return different values\n    if random() &lt; 0.5:\n        return Vec2(1, 2)\n    return Vec2(3, 4)\n</code></pre> <pre><code>def k():\n    # Both the return and an implicit 'return None' are reachable\n    if random() &lt; 0.5:\n        return Vec2(1, 2)\n</code></pre> <p>Outside of functions returning <code>None</code> or a num, most functions should have a single <code>return</code> statement at the end.</p>"},{"location":"concepts/constructs/#classes","title":"Classes","text":"<p>Classes are supported at the module level. User defined classes should subclass <code>Record</code> or have a supported Sonolus.py decorator such as <code>@level_memory</code>.</p> <p>Methods may have the <code>@staticmethod</code>, <code>@classmethod</code>, or <code>@property</code> decorators.</p> <pre><code>class MyRecord(Record):\n    x: int\n    y: int\n\n    def regular_method(self):\n        ...\n\n    @staticmethod\n    def static_method():\n        ...\n\n    @classmethod\n    def class_method(cls):\n        ...\n\n    @property\n    def property(self):\n        ...\n</code></pre>"},{"location":"concepts/constructs/#imports","title":"Imports","text":"<p>Imports are supported at the module level, but not within functions.</p>"},{"location":"concepts/constructs/#assert","title":"assert","text":"<p>Assertions are supported. Assertion failures cannot be handled and will terminate the current callback when running in the Sonolus app. In debug mode, the game will also pause to indicate the error.</p> <pre><code>assert a &gt; 0, 'a must be positive'\n</code></pre>"},{"location":"concepts/constructs/#pass","title":"pass","text":"<p>The <code>pass</code> statement is supported.</p>"},{"location":"concepts/project/","title":"Project","text":"<p>Project details are defined in a file called <code>project.py</code> in the top-level package of the project:</p> <pre><code>from sonolus.script.engine import Engine, EngineData\nfrom sonolus.script.project import Project\n\nfrom my_engine.common.options import Options\nfrom my_engine.common.ui import ui_config\nfrom my_engine.level import my_level\nfrom my_engine.play.mode import play_mode\nfrom my_engine.preview.mode import preview_mode\nfrom my_engine.tutorial.mode import tutorial_mode\nfrom my_engine.watch.mode import watch_mode\n\nengine = Engine(\n    name=\"my_engine\",\n    title=\"Demo Engine\",\n    skin=\"pixel\",\n    particle=\"pixel\",\n    background=\"vanilla\",\n    data=EngineData(\n        ui=ui_config,\n        options=Options,\n        play=play_mode,\n        watch=watch_mode,\n        preview=preview_mode,\n        tutorial=tutorial_mode,\n    ),\n)\n\nproject = Project(\n    engine=engine,\n    levels=[my_level],\n)\n</code></pre> <p>A typical project structure might look like this:</p> <pre><code>my_engine/\n    __init__.py\n    project.py\n    common/\n        ...\n    play/\n        ...\n    preview/\n        ...\n    tutorial/\n        ...\nresources/\n    ...\n</code></pre>"},{"location":"concepts/project/#modes","title":"Modes","text":"<p>Modes are defined using the <code>PlayMode</code>, <code>WatchMode</code>, <code>PreviewMode</code>, and <code>TutorialMode</code> classes.</p>"},{"location":"concepts/project/#play-mode","title":"Play Mode","text":"<pre><code>from sonolus.script.engine import PlayMode\n\nfrom my_engine.common.buckets import Buckets\nfrom my_engine.common.effect import Effects\nfrom my_engine.play.init import Init\nfrom my_engine.play.note import Note\nfrom my_engine.common.particle import Particles\nfrom my_engine.common.skin import Skin\nfrom my_engine.play.stage import Stage\n\n\nplay_mode = PlayMode(\n    archetypes=[Init, Stage, Note],\n    skin=Skin,\n    effects=Effects,\n    particles=Particles,\n    buckets=Buckets,\n)\n</code></pre> <p>Play mode archetypes subclass <code>PlayArchetype</code> and implement the following callbacks:</p> <ul> <li><code>should_spawn</code> (required)</li> <li><code>preprocess</code></li> <li><code>spawn_order</code></li> <li><code>initialize</code></li> <li><code>update_sequential</code></li> <li><code>update_parallel</code></li> <li><code>touch</code></li> <li><code>terminate</code></li> </ul> <p>Archetypes for scored notes should have the <code>is_scored</code> class variable set to <code>True</code>.</p>"},{"location":"concepts/project/#watch-mode","title":"Watch Mode","text":"<pre><code>from sonolus.script.engine import WatchMode\n\nfrom my_engine.common.buckets import Buckets\nfrom my_engine.common.effect import Effects\nfrom my_engine.common.particle import Particles\nfrom my_engine.common.skin import Skin\nfrom my_engine.watch.init import Init\nfrom my_engine.watch.note import Note\nfrom my_engine.watch.stage import Stage\nfrom my_engine.watch.update_spawn import update_spawn\n\nwatch_mode = WatchMode(\n    archetypes=[Init, Stage, Note],\n    skin=Skin,\n    effects=Effects,\n    particles=Particles,\n    buckets=Buckets,\n    update_spawn=update_spawn,\n)\n</code></pre> <p>Watch mode archetypes subclass <code>WatchArchetype</code> and implement the following callbacks:</p> <ul> <li><code>spawn_time</code> (required)</li> <li><code>despawn_time</code> (required)</li> <li><code>preprocess</code></li> <li><code>initialize</code></li> <li><code>update_sequential</code></li> <li><code>update_parallel</code></li> <li><code>terminate</code></li> </ul> <p>Watch mode also has the <code>update_spawn</code> global callback, which is invoked every frame and should return the reference time to compare against spawn and despawn times of archetypes. Typically, this can be either the current time or the current scaled time.</p>"},{"location":"concepts/project/#preview-mode","title":"Preview Mode","text":"<pre><code>from sonolus.script.engine import PreviewMode\n\nfrom my_engine.common.skin import Skin\nfrom my_engine.preview.bar_line import BpmChange, TimescaleChange\nfrom my_engine.preview.init import Init\nfrom my_engine.preview.note import Note\nfrom my_engine.preview.stage import Stage\n\npreview_mode = PreviewMode(\n    archetypes=[BpmChange, TimescaleChange, Init, Stage, Note],\n    skin=Skin,\n)\n</code></pre> <p>Preview mode archetypes subclass <code>PreviewArchetype</code> and implement the following callbacks:</p> <ul> <li><code>preprocess</code></li> <li><code>render</code></li> </ul>"},{"location":"concepts/project/#tutorial-mode","title":"Tutorial Mode","text":"<pre><code>from sonolus.script.engine import TutorialMode\n\nfrom my_engine.common.effect import Effects\nfrom my_engine.common.particle import Particles\nfrom my_engine.common.skin import Skin\nfrom my_engine.tutorial.init import preprocess\nfrom my_engine.tutorial.instructions import Instructions, InstructionIcons\nfrom my_engine.tutorial.navigate import navigate\nfrom my_engine.tutorial.update import update\n\ntutorial_mode = TutorialMode(\n    skin=Skin,\n    effects=Effects,\n    particles=Particles,\n    instructions=Instructions,\n    instruction_icons=InstructionIcons,\n    preprocess=preprocess,\n    navigate=navigate,\n    update=update,\n)\n</code></pre> <p>Tutorial mode does not have archetypes, but has the following global callbacks:</p> <ul> <li><code>preprocess</code> - Invoked once before the tutorial starts</li> <li><code>navigate</code> - Invoked when the player navigates forward or backward in the tutorial  </li> <li><code>update</code> - Invoked every frame and should handle most of the drawing logic</li> </ul>"},{"location":"concepts/project/#levels","title":"Levels","text":"<p>Levels are defined using the <code>Level</code> class:</p> <pre><code>from sonolus.script.level import LevelData, BpmChange, Level, TimescaleChange\n\nfrom my_engine.play.init import Init\nfrom my_engine.play.note import Note\nfrom my_engine.play.stage import Stage\n\n\nmy_level = Level(\n    name=\"my_level\",\n    title=\"My Level\",\n    bgm=\"bgm.mp3\",\n    data=LevelData(\n        bgm_offset=0,\n        entities=[\n            Init(),\n            Stage(),\n            BpmChange(beat=0, bpm=87),\n            BpmChange(beat=2, bpm=87),\n            BpmChange(beat=34, bpm=174),\n            TimescaleChange(beat=298, timescale=1.5),\n            TimescaleChange(beat=346, timescale=1),\n            Note(beat=1),\n            Note(beat=2),\n            Note(beat=3),\n        ],\n    ),\n)\n</code></pre>"},{"location":"concepts/project/#resources","title":"Resources","text":"<p>Resources should be placed in the <code>resources</code> directory next to the top-level package of the project.</p> <p>They can be <code>.scp</code> files, regular <code>.mp3</code> or <code>.png</code> files, or be organized as unpacked Sonolus resources (see sonolus-pack).</p>"},{"location":"concepts/resources/","title":"Resources &amp; Declarations","text":""},{"location":"concepts/resources/#global-variables","title":"Global Variables","text":""},{"location":"concepts/resources/#level-memory","title":"Level Memory","text":"<p>Level memory is defined with the <code>@level_memory</code> class decorator:</p> <pre><code>from sonolus.script.globals import level_memory\n\n\n@level_memory\nclass LevelMemory:\n    value: int\n</code></pre> <p>Alternatively, it may be called as a function as well by passing the type as an argument:</p> <pre><code>from sonolus.script.globals import level_memory\nfrom sonolus.script.vec import Vec2\n\n\nlevel_memory_value = level_memory(Vec2)\n</code></pre> <p>Level memory may be modified in sequential callbacks:</p> <ul> <li><code>preprocess</code></li> <li><code>update_sequential</code></li> <li><code>touch</code></li> </ul> <p>and may be read in any callback.</p>"},{"location":"concepts/resources/#level-data","title":"Level Data","text":"<p>Level data is defined with the <code>@level_data</code> class decorator:</p> <pre><code>from sonolus.script.globals import level_data\n\n\n@level_data\nclass LevelData:\n    value: int\n</code></pre> <p>Alternatively, it may be called as a function as well by passing the type as an argument:</p> <pre><code>from sonolus.script.globals import level_data\nfrom sonolus.script.vec import Vec2\n\n\nlevel_data_value = level_data(Vec2)\n</code></pre> <p>Level data may only be modified in the <code>preprocess</code> callback and may be read in any callback.</p>"},{"location":"concepts/resources/#archetype-variables","title":"Archetype Variables","text":""},{"location":"concepts/resources/#imported","title":"Imported","text":"<p>Imported fields are declared with <code>imported()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, imported\n\nclass MyArchetype(PlayArchetype):\n    field: int = imported()\n    field_with_explicit_name: int = imported(name=\"field_name\")\n</code></pre> <p>Imported fields may be loaded from the level data. In watch mode, data may also be loaded from a corresponding exported field in play mode.</p> <p>Imported fields may only be updated in the <code>preprocess</code> callback, and are read-only in other callbacks.</p>"},{"location":"concepts/resources/#exported","title":"Exported","text":"<p>Exported fields are declared with <code>exported()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, exported\n\nclass MyArchetype(PlayArchetype):\n    field: int = exported()\n    field_with_explicit_name: int = exported(name=\"#FIELD\")\n</code></pre> <p>This is only usable in play mode to export data to be loaded in watch mode. Exported fields are write-only.</p>"},{"location":"concepts/resources/#entity-data","title":"Entity Data","text":"<p>Entity data fields are declared with <code>entity_data()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, entity_data\n\nclass MyArchetype(PlayArchetype):\n    field: int = entity_data()\n</code></pre> <p>Entity data is accessible from other entities, but may only be updated in the <code>preprocess</code> callback and is read-only in other callbacks.</p> <p>It functions like <code>imported()</code> and shares the same underlying storage, except that it is not loaded from a level.</p>"},{"location":"concepts/resources/#entity-memory","title":"Entity Memory","text":"<p>Entity memory fields are declared with <code>entity_memory()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, entity_memory\n\nclass MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n</code></pre> <p>Entity memory is private to the entity and is not accessible from other entities. It may be read or updated in any callback associated with the entity.</p> <p>Entity memory fields may also be set when an entity is spawned using the <code>spawn()</code> method.</p>"},{"location":"concepts/resources/#shared-memory","title":"Shared Memory","text":"<p>Shared memory fields are declared with <code>shared_memory()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, shared_memory\n\nclass MyArchetype(PlayArchetype):\n    field: int = shared_memory()\n</code></pre> <p>Shared memory is accessible from other entities.</p> <p>Shared memory may be read in any callback, but may only be updated by sequential callbacks (<code>preprocess</code>, <code>update_sequential</code>, and <code>touch</code>).</p>"},{"location":"concepts/resources/#streams","title":"Streams","text":"<p>Streams are defined with the <code>@streams</code> decorator:</p> <pre><code>from sonolus.script.stream import streams, Stream, StreamGroup\nfrom sonolus.script.num import Num\nfrom sonolus.script.vec import Vec2\n\n@streams\nclass Streams:\n    stream_1: Stream[Num]  # A stream of Num values\n    stream_2: Stream[Vec2]  # A stream of Vec2 values\n    group_1: StreamGroup[Num, 10]  # A group of 10 Num streams\n    group_2: StreamGroup[Vec2, 5]  # A group of 5 Vec2 streams\n\n    data_field_1: Num  # A data field of type Num\n    data_field_2: Vec2  # A data field of type Vec2\n</code></pre> <p>Streams and stream groups are declared by annotating class attributes with <code>Stream</code> or <code>StreamGroup</code>.</p> <p>Other types are also supported in the form of data fields. They may be used to store additional data to export from Play to Watch mode.</p> <p>In either case, data is write-only in Play mode and read-only in Watch mode.</p> <p>This should only be used once in most projects, as multiple decorated classes will overlap with each other and interfere when both are used at the same time.</p> <p>For backwards compatibility, new streams and stream groups should be added to the end of existing ones, and lengths and element types of existing streams and stream groups should not be changed. Otherwise, old replays may not work on new versions of the engine.</p>"},{"location":"concepts/resources/#skins","title":"Skins","text":"<p>Skins are defined with the <code>@skin</code> decorator:</p> <pre><code>from sonolus.script.sprite import skin, StandardSprite, sprite, Sprite, RenderMode\n\n\n@skin\nclass Skin:\n    render_mode: RenderMode = RenderMode.DEFAULT\n\n    note: StandardSprite.NOTE_HEAD_RED\n    other: Sprite = sprite(\"other\")\n</code></pre> <p>Standard sprites are defined by annotating the field with the corresponding value from <code>StandardSprite</code>.</p> <p>Custom sprites are defined by annotating the field with <code>Sprite</code> and calling <code>sprite</code> with the sprite name.</p> <p>To set the render mode for the skin, set the <code>render_mode</code> field to the desired value from <code>RenderMode</code>.</p>"},{"location":"concepts/resources/#sound-effects","title":"Sound Effects","text":"<p>Sound effects are defined with the <code>@effects</code> decorator:</p> <pre><code>from sonolus.script.effect import effects, StandardEffect, Effect, effect\n\n\n@effects\nclass Effects:\n    tap_perfect: StandardEffect.PERFECT\n    other: Effect = effect(\"other\")\n</code></pre> <p>Standard sound effects are defined by annotating the field with the corresponding value from <code>StandardEffect</code>.</p> <p>Custom sound effects are defined by annotating the field with <code>Effect</code> and calling <code>effect</code> with the effect name.</p>"},{"location":"concepts/resources/#particles","title":"Particles","text":"<p>Particles are defined with the <code>@particles</code> decorator:</p> <pre><code>from sonolus.script.particle import particles, StandardParticle, Particle, particle\n\n\n@particles\nclass Particles:\n    tap: StandardParticle.NOTE_CIRCULAR_TAP_RED\n    other: Particle = particle(\"other\")\n</code></pre> <p>Standard particles are defined by annotating the field with the corresponding value from <code>StandardParticle</code>.</p> <p>Custom particles are defined by annotating the field with <code>Particle</code> and calling <code>particle</code> with the particle name.</p>"},{"location":"concepts/resources/#buckets","title":"Buckets","text":"<p>Buckets are defined with the <code>@buckets</code> decorator:</p> <pre><code>from sonolus.script.bucket import buckets, bucket_sprite, bucket, Bucket\nfrom sonolus.script.text import StandardText\nfrom my_engine.common.skin import Skin\n\n@buckets\nclass Buckets:\n    note: Bucket = bucket(\n        sprites=[\n            bucket_sprite(\n                sprite=Skin.note,\n                x=0,\n                y=0,\n                w=2,\n                h=2,\n            )\n        ],\n        unit=StandardText.MILLISECOND_UNIT,\n    )\n</code></pre> <p>Buckets are defined by annotating the field with <code>Bucket</code> and calling <code>bucket</code> with the bucket name.</p>"},{"location":"concepts/resources/#tutorial-instructions","title":"Tutorial Instructions","text":"<p>Tutorial instructions are defined with the <code>@instructions</code> decorator:</p> <pre><code>from sonolus.script.instruction import instructions, StandardInstruction, Instruction, instruction\n\n\n@instructions\nclass Instructions:\n    tap: StandardInstruction.TAP\n    other: Instruction = instruction(\"other\")\n</code></pre> <p>Standard instructions are defined by annotating the field with the corresponding value from <code>StandardInstruction</code>.</p> <p>Custom instructions are defined by annotating the field with <code>Instruction</code> and calling <code>instruction</code> with the instruction name.</p>"},{"location":"concepts/resources/#tutorial-instruction-icons","title":"Tutorial Instruction Icons","text":"<p>Tutorial instruction icons are defined with the <code>@instruction_icons</code> decorator:</p> <pre><code>from sonolus.script.instruction import instruction_icons, StandardInstructionIcon, InstructionIcon, instruction_icon\n\n\n@instruction_icons\nclass InstructionIcons:\n    hand: StandardInstructionIcon.HAND\n    other: InstructionIcon = instruction_icon(\"other\")\n</code></pre> <p>Standard instruction icons are defined by annotating the field with the corresponding value from <code>StandardInstructionIcon</code>.</p> <p>Custom instruction icons are defined by annotating the field with <code>InstructionIcon</code> and calling <code>instruction_icon</code> with the icon name.</p>"},{"location":"concepts/resources/#options","title":"Options","text":"<p>Engine options are defined with the <code>@options</code> decorator:</p> <pre><code>from sonolus.script.options import options, select_option, slider_option, toggle_option\n\n\n@options\nclass Options:\n    slider_option: float = slider_option(\n        name=\"Slider Option\",\n        standard=True,\n        advanced=False,\n        default=0.5,\n        min=0,\n        max=1,\n        step=0.1,\n        unit=\"unit\",\n        scope=\"scope\",\n    )\n    toggle_option: bool = toggle_option(\n        name=\"Toggle Option\",\n        standard=True,\n        advanced=False,\n        default=True,\n        scope=\"scope\",\n    )\n    select_option: int = select_option(\n        name=\"Select Option\",\n        standard=True,\n        advanced=False,\n        default=\"value\",\n        values=[\"value\"],\n        scope=\"scope\",\n    )\n</code></pre> <p>There are three types of options available:</p> <ol> <li><code>slider_option</code>: A slider control for numeric values</li> <li><code>toggle_option</code>: A toggle switch for boolean values</li> <li><code>select_option</code>: A dropdown menu for selecting from predefined values</li> </ol>"},{"location":"concepts/resources/#ui","title":"UI","text":"<p>Ui configuration is defined with the <code>UiConfig</code> class:</p> <pre><code>from sonolus.script.ui import (\n    EaseType,\n    UiAnimation,\n    UiAnimationTween,\n    UiConfig,\n    UiJudgmentErrorPlacement,\n    UiJudgmentErrorStyle,\n    UiMetric,\n    UiVisibility,\n)\n\nui_config = UiConfig(\n    scope=\"my_engine\",\n    primary_metric=UiMetric.ARCADE,\n    secondary_metric=UiMetric.LIFE,\n    menu_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    judgment_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    combo_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    primary_metric_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    secondary_metric_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    progress_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    tutorial_navigation_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    tutorial_instruction_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    judgment_animation=UiAnimation(\n        scale=UiAnimationTween(\n            start=1.0,\n            end=1.0, \n            duration=0.0,\n            ease=EaseType.NONE,\n        ),\n        alpha=UiAnimationTween(\n            start=1.0,\n            end=1.0,\n            duration=0.0,\n            ease=EaseType.NONE,\n        ),\n    ),\n    combo_animation=UiAnimation(\n        scale=UiAnimationTween(\n            start=1.2, \n            end=1.0, \n            duration=0.2,\n            ease=EaseType.IN_CUBIC,\n        ),\n        alpha=UiAnimationTween(\n            start=1.0,\n            end=1.0, \n            duration=0.0,\n            ease=EaseType.NONE,\n        ),\n    ),\n    judgment_error_style=UiJudgmentErrorStyle.LATE,\n    judgment_error_placement=UiJudgmentErrorPlacement.TOP,\n    judgment_error_min=0.0,\n)\n</code></pre>"},{"location":"concepts/types/","title":"Types","text":"<p>Sonolus.py has 3 core types: <code>Num</code>, <code>Array</code>, and <code>Record</code>. representing numeric values, fixed-size arrays,  and custom data structures, respectively. Arrays and records can be nested within each other to create complex data structures.</p> <p>Additionally, Sonolus.py supports the built-in types <code>tuple</code>, <code>dict</code>, <code>str</code>, classes and functions, and the constants <code>None</code>, <code>Ellipsis</code>, and <code>NotImplemented</code>.</p>"},{"location":"concepts/types/#num","title":"Num","text":"<p><code>Num</code> is the numeric and boolean type in Sonolus.py. It is interchangeable with <code>int</code>, <code>float</code>, and <code>bool</code>. Sonolus.py will treat any of these types as <code>Num</code>, but it's recommended to use what's appropriate for clarity.</p> <p>The Sonolus app uses 32-bit floating-point numbers for all numeric values, so precision may be lower compared to Python when running on Sonolus.</p> <p>Infinity, NaN, and values outside the range of 32-bit floating-point numbers are not supported.</p> <p>You can import <code>Num</code> from <code>sonolus.script.num</code>:</p> <pre><code>from sonolus.script.num import Num\n</code></pre>"},{"location":"concepts/types/#declaration","title":"Declaration","text":"<p>Nums can be declared using standard Python syntax.</p> <pre><code>a = 1\nb = 2.5\nc = True\n</code></pre>"},{"location":"concepts/types/#operations","title":"Operations","text":"<p>Nums support most of the standard Python operations:</p> <ul> <li>Comparison operators: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>Arithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code></li> <li>Unary operators: <code>+</code>, <code>-</code></li> </ul> <p>Note</p> <p>Floating point precision may be lower when running on Sonolus compared to Python. Care should be taken when performing precision-sensitive operations.</p> <p>Nums are the only supported type for boolean operations and control flow conditions. As a condition, any nonzero value is considered true, and <code>0</code> is considered false.</p> <ul> <li>Logical operators: <code>and</code>, <code>or</code>, <code>not</code></li> <li>Ternary expressions: <code>... if &lt;condition&gt; else ...</code></li> <li>If statements: <code>if &lt;condition&gt;:</code>, <code>elif &lt;condition&gt;:</code></li> <li>While loops: <code>while &lt;condition&gt;:</code></li> <li>Case guards: <code>case ... if &lt;condition&gt;:</code></li> </ul>"},{"location":"concepts/types/#instance-checks","title":"Instance Checks","text":"<p>Since <code>Num</code> is interchangeable with <code>int</code>, <code>float</code>, and <code>bool</code>, only <code>Num</code> is supported for type checks.</p> <pre><code>x = ...\n\n# Ok:\nisinstance(x, Num)\n\nmatch x:\n    case Num(value):\n        ...\n\n# Not ok:\nisinstance(x, int)\nisinstance(x, float)\nisinstance(x, bool)\n\nmatch x:\n    case int(value):\n        ...\n    case float(value):\n        ...\n    case bool(value):\n        ...\n</code></pre>"},{"location":"concepts/types/#conversion","title":"Conversion","text":"<p>Calling <code>int</code>, <code>float</code>, or <code>bool</code> is only supported for an argument of type <code>Num</code>.</p> <p>Details:</p> <ul> <li><code>int</code>: Equivalent to <code>math.trunc</code>.</li> <li><code>float</code>: Validates that the value is a <code>Num</code> and returns it as is.</li> <li><code>bool</code>: Validates that the value is a <code>Num</code> and returns <code>1</code> for <code>True</code> and <code>0</code> for <code>False</code>.</li> </ul>"},{"location":"concepts/types/#array","title":"Array","text":"<p><code>Array[T, Size]</code> stores a fixed number of elements of the same type.</p> <p>It has two type parameters:</p> <ul> <li><code>T</code>: The type of the elements.</li> <li><code>Size</code>: The number of elements.</li> </ul> <p>You can import <code>Array</code> from <code>sonolus.script.array</code>:</p> <pre><code>from sonolus.script.array import Array\n</code></pre>"},{"location":"concepts/types/#declaration_1","title":"Declaration","text":"<p>Arrays can be created using its constructor:</p> <pre><code>a1 = Array[int, 3](1, 2, 3)\na2 = Array[int, 0]()\n</code></pre> <p>If at least one element is provided, the element type and size can be inferred:</p> <pre><code>a3 = Array(1, 2, 3)\n</code></pre> <p>Since <code>Array</code> takes type parameters, it is considered a generic type. A version of <code>Array</code> with type parameters provided is considered a concrete type.</p> <pre><code>Array  # The Generic Array type\nArray[int, 3]  # A concrete Array type\n</code></pre> <p>The element type of an array must be concrete (not generic) and the size must be a non-negative compile-time  constant integer:</p> <pre><code># Ok\na4 = Array[Array[int, 3], 2](Array(1, 2, 3), Array(4, 5, 6))\n\n# Not ok:\na5 = Array[int, 0.5]()  # The size must be a non-negative integer\na6 = Array[Array, 2](Array(1, 2, 3), Array(4, 5, 6))  # The element type must be concrete (not generic)\n</code></pre> <p>Copies are made of any values provided to the constructor:</p> <pre><code>pair = Pair(1, 2)\na = Array[Pair, 1](pair)\nassert a[0] == Pair(1, 2)\n\npair.x = 3\nassert a[0] == Pair(1, 2)  # The value in the array is independent of the original value\n</code></pre>"},{"location":"concepts/types/#operations_1","title":"Operations","text":"<p>The value of an array can be copied from another array using the copy from operator (<code>@=</code>)<sup>1</sup>:</p> <pre><code>source_array = Array(1, 2, 3)\ndestination_array = Array(0, 0, 0)\n\ndestination_array @= source_array\nassert destination_array == Array(1, 2, 3)\n</code></pre> <p>Arrays can be compared for equality and inequality:</p> <pre><code>assert Array(1, 2, 3) == Array(1, 2, 3)\nassert Array(1, 2, 3) != Array(4, 5, 6)\n</code></pre> <p>Elements can be accessed by index:</p> <pre><code>a = Array(1, 2, 3)\nassert a[0] == 1\nassert a[1] == 2\nassert a[2] == 3\n</code></pre> <p>Elements can be updated by index, copying the given value into the corresponding element of the array:</p> <pre><code>a = Array(1, 2, 3)\na[0] = 4\nassert a == Array(4, 2, 3)\n</code></pre> <p>Warning</p> <p>If a value in an array is not a <code>Num</code>, updating it will copy the given value into the corresponding element of the array. However, that element remains independent of the original value, which may lead to unexpected results when updating either value.</p> <pre><code>pair = Pair(1, 2)\na = Array(Pair(0, 0))\n\na[0] = pair  # or equivalently: a[0] @= pair\nassert a[0] == Pair(1, 2)\n\npair.x = 3\nassert a[0] == Pair(1, 2)  # The value in the array is independent of the original value\n</code></pre> <p>For clarity, it's recommended to use the copy from operator (<code>@=</code>) when updating elements that are known to be an array or record.</p> <pre><code>a[0] @= pair\n</code></pre> <p>The length of an array can be accessed using the <code>len()</code> function:</p> <pre><code>assert len(Array(1, 2, 3)) == 3\n</code></pre> <p>Arrays can be iterated over using a for loop:</p> <pre><code>a = Array(1, 2, 3)\n\nfor element in a:\n    debug_log(element)\n</code></pre> <p>Other functionality:</p> <p><code>Array</code> inherits from <code>ArrayLike</code> and supports all of its methods.</p>"},{"location":"concepts/types/#instance-checks_1","title":"Instance Checks","text":"<p>Any array is considered an instance of the generic <code>Array</code> type.</p> <pre><code>a = Array(1, 2, 3)\nassert isinstance(a, Array)\n</code></pre> <p>Only an array with the exact element type and size is considered an instance of a concrete <code>Array[T, Size]</code> type.</p> <pre><code>a = Array(1, 2, 3)\nassert isinstance(a, Array[int, 3])\nassert not isinstance(a, Array[int, 2])\nassert not isinstance(a, Array[Pair, 3])\n</code></pre>"},{"location":"concepts/types/#enums","title":"Enums","text":"<p>There is limited support for enums containing <code>Num</code> values. Methods on enums are not supported.  When used as a type, any enum class is treated as <code>Num</code> and no enforcement is done on the values.</p> <pre><code>class MyEnum(IntEnum):\n    A = 1\n    B = 2\n\na = Array[MyEnum, 2](MyEnum.A, MyEnum.B)\nb = Array[MyEnum, 2](1, 2)\n</code></pre>"},{"location":"concepts/types/#record","title":"Record","text":"<p><code>Record</code> is the base class for user-defined types in Sonolus.py. It functions similarly to dataclasses.</p> <p>You can import <code>Record</code> from <code>sonolus.script.record</code>:</p> <pre><code>from sonolus.script.record import Record\n</code></pre>"},{"location":"concepts/types/#declaration_2","title":"Declaration","text":"<p>A record can be defined by inheriting from <code>Record</code> and defining zero or more fields as class attributes:</p> <pre><code>class MyPair(Record):\n    first: int\n    second: int\n</code></pre> <p>Fields must be annotated by <code>Num</code> (or equivalently <code>int</code>, <code>float</code>, or <code>bool</code>),  a concrete array type, or a concrete record type.</p> <pre><code># Not ok:\nclass MyRecord(Record):\n    array: Array  # Array is not concrete since it has unspecified type parameters\n</code></pre> <p>A <code>Record</code> subclass cannot be further subclassed.</p> <pre><code># Not ok:\nclass MyPairSubclass(MyPair):\n    third: int\n</code></pre>"},{"location":"concepts/types/#instantiation","title":"Instantiation","text":"<p>A constructor is automatically generated for the <code>Record</code> class:</p> <pre><code>pair_1 = MyPair(1, 2)\npair_2 = MyPair(first=1, second=2)\n</code></pre>"},{"location":"concepts/types/#generics","title":"Generics","text":"<p><code>Record</code> supports generics. If at least one type parameter is provided in the class definition, a generic  record type is created.</p> <pre><code>class MyGenericPair[T, U](Record):\n    first: T\n    second: U\n\nclass ContainsArray[T, Size](Record):\n    array: Array[T, Size]\n</code></pre> <p>Generic type parameters can be specified explicitly when instantiating a generic or inferred from the provided values:</p> <pre><code>pair_1 = MyGenericPair[int, int](1, 2)\npair_2 = MyGenericPair(1, 2)\n</code></pre> <p>The value of a type parameter can be accessed via the <code>type_var_value()</code> classmethod.</p> <pre><code>class MyGenericRecord[T](Record):\n    value: T\n\n    def my_type(self) -&gt; type:\n        return self.type_var_value(T)\n\n\nassert MyGenericRecord(1).my_type() == Num\n</code></pre>"},{"location":"concepts/types/#operations_2","title":"Operations","text":"<p>The value of a record can be copied from another record using the copy from operator (<code>@=</code>)<sup>1</sup>:</p> <pre><code>source_record = MyPair(1, 2)\ndestination_record = MyPair(0, 0)\n\ndestination_record @= source_record\nassert destination_record == MyPair(1, 2)\n</code></pre> <p>Records can be compared for equality and inequality:</p> <pre><code>assert MyPair(1, 2) == MyPair(1, 2)\nassert MyPair(1, 2) != MyPair(3, 4)\n</code></pre> <p>Dunder methods can be implemented to define custom behavior for records:</p> <pre><code>class MyAddablePair(Record):\n    first: int\n    second: int\n\n    def __add__(self, other: MyAddablePair) -&gt; MyAddablePair:\n        return MyAddablePair(self.first + other.first, self.second + other.second)\n</code></pre> <p>If a dunder method has an in-place variant and the in-place method is not explicitly implemented (e.g. <code>__iadd__</code> is the in-place variant of <code>__add__</code>), <code>Record</code> will automatically generate one that  modifies the instance in place:</p> <pre><code>pair = MyAddablePair(1, 2)\nreference = pair\npair += MyAddablePair(3, 4)\nassert pair == reference == MyAddablePair(4, 6)  # The instance is modified in place\n</code></pre> <p>Regular methods, properties, classmethods, and staticmethods can also be defined in a <code>Record</code> subclass.</p> <pre><code>class MyRecord(Record):\n    def my_method(self):\n        ...\n\n    @property\n    def my_property(self):\n        ...\n\n    @property.setter\n    def my_property(self, value):\n        ...\n\n    @classmethod\n    def my_classmethod(cls):\n        ...\n\n    @staticmethod\n    def my_staticmethod():\n        ...\n</code></pre> <p>Fields can be accessed and updated using the dot operator:</p> <pre><code>pair = MyPair(1, 2)\nassert pair.first == 1\nassert pair.second == 2\n\npair.first = 3\nassert pair == MyPair(3, 2)\n</code></pre> <p>Warning</p> <p>If a value in a record is not a <code>Num</code>, updating it will copy the given value into the corresponding field of the record. However, that field remains independent of the original value.</p> <pre><code>array = Array(1, 2, 3)\nrecord = MyRecord(array)\n\nrecord.array = Array(4, 5, 6)  # or equivalently: record.array @= Array(4, 5, 6)\nassert record.array == Array(4, 5, 6)\n\narray[0] = 7\nassert record.array == Array(4, 5, 6)  # The value in the record is independent of the original\n</code></pre> <p>For clarity, it's recommended to use the copy from operator (<code>@=</code>) when updating fields that are known to be an array or record.</p> <pre><code>record.array @= array\n</code></pre>"},{"location":"concepts/types/#instance-checks_2","title":"Instance Checks","text":"<p>Any record is considered an instance of the generic <code>Record</code> type:</p> <pre><code>pair = MyPair(1, 2)\nassert isinstance(pair, Record)\n</code></pre> <p>If a record is generic, any instance of it is considered an instance of the generic type:</p> <pre><code>pair = MyGenericPair[int, int](1, 2)\nassert isinstance(pair, MyGenericPair)\n</code></pre> <p>Only an instance of a record with the exact field types is considered an instance of a concrete <code>Record</code> type:</p> <pre><code>pair = MyPair(1, 2)\nassert isinstance(pair, MyPair[int, int])\nassert not isinstance(pair, MyPair[int, Array[int, 2]])\n</code></pre>"},{"location":"concepts/types/#transient-types","title":"Transient Types","text":"<p>In addition to the core types, the following transient types are available. There are some restrictions on how they can be used:</p> <ul> <li>They cannot be used as type arguments:     <pre><code># Not ok:\nArray[str, 3]\n</code></pre></li> <li>They cannot be used as a field types:     <pre><code># Not ok:\nclass MyRecord(Record):\n    field: str\n\n# Not ok:\nclass MyArchetype(PlayArchetype):\n    field: str = imported()\n</code></pre></li> </ul>"},{"location":"concepts/types/#tuple","title":"tuple","text":"<p>The built-in <code>tuple</code> type can be declared and destructured as usual:</p> <pre><code>t = (1, (2, 3))\na, (b, c) = t\n</code></pre> <p>Tuples may be indexed, but the given index must be a compile-time constant:</p> <pre><code>t = (1, 2, 3)\n\n# Ok\ndebug_log(t[0])\n\n# Not ok:\ndebug_log(t[random_integer(0, 2)])\n</code></pre> <p>They may also be created as an *args argument to a function and unpacked as an argument to a function:</p> <pre><code>def f1(a, b, c):\n    return a + b + c\n\ndef f2(*args):\n    return f1(*args)\n</code></pre> <p>Iterating over a tuple is also supported, but they are expanded at compile time, so iterating over large tuples may significantly increase the size of the compiled engine and slow down compilation:</p> <pre><code>t = (1, 2, 3)\nfor x in t:\n    debug_log(x)\n</code></pre>"},{"location":"concepts/types/#dict","title":"dict","text":"<p>Dicts can be created by the **kwargs syntax and unpacked as arguments to a function:</p> <pre><code>def f1(a, b):\n    return a + b\n\ndef f2(**kwargs):\n    return f1(**kwargs)\n</code></pre>"},{"location":"concepts/types/#str","title":"str","text":"<p>Strings can be created and compared for equality and inequality:</p> <pre><code>s1 = 'abc'\ns2 = 'def'\n\nassert s1 == 'abc'\nassert s1 != s2\n</code></pre>"},{"location":"concepts/types/#special-constants","title":"Special Constants","text":"<p>The built-in <code>None</code>, <code>Ellipsis</code>, and <code>NotImplemented</code> constants are supported.</p> <p><code>None</code> is the only supported right-side operand for the <code>is</code> and <code>is not</code> operators.</p> <pre><code>a = None\nb = 1\n\n# Ok\na is None\nb is not None\n\n# Not ok:\nb is b\n</code></pre>"},{"location":"concepts/types/#other-types","title":"Other types","text":"<p>Classes themselves are considered instances of <code>type</code>. They may be used as arguments to functions, but annotating a record field as <code>type</code> or declaring an array with element type <code>type</code> is not supported.</p> <p>Functions or methods may be used as arguments to functions, but annotating a record field or setting an array element type to <code>Callable</code> is not supported.</p>"},{"location":"concepts/types/#storing-instances-of-transient-types-in-records","title":"Storing Instances of Transient Types in Records","text":"<p>Warning</p> <p>The following is advanced usage and is unnecessary for most use cases.</p> <p>While transient types cannot be used as type parameters or as a Record field's type, it is possible to store them in a generic record in a field annotated by a type parameter. Type arguments must not be explicitly provided when doing so. If multiple fields are annotated by the same type parameter, all such fields may be required to hold the exact same value in some cases.</p> <p>For example, a version of the <code>filter</code> function can be implemented as follows (see Iterables  for more information on iterators):</p> <pre><code>class _FilteringIterator[T, Fn](Record, SonolusIterator):\n    fn: Fn\n    iterator: T\n\n    def has_next(self) -&gt; bool:\n        while self.iterator.has_next():\n            if self.fn(self.iterator.get()):\n                return True\n            self.iterator.advance()\n        return False\n\n    def get(self) -&gt; Any:\n        return self.iterator.get()\n\n    def advance(self):\n        self.iterator.advance()\n\n\ndef my_filter[T, Fn](iterable: T, fn: Fn) -&gt; T:\n    return _FilteringIterator(fn, iterable.__iter__())\n</code></pre> <ol> <li> <p>The copy from operator (<code>@=</code>) is officially the in-place matrix multiplication operator in Python, but it has been repurposed in Sonolus.py for copying Arrays and Records.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"reference/","title":"Reference","text":"<p>This section provides detailed information on available classes and functions.</p>"},{"location":"reference/builtins/","title":"builtins","text":"<p>Supported Python builtins.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.abs","title":"<code>abs(x)</code>","text":"<p>Return the absolute value of a number.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int | float</code> <p>A number.</p> required <p>Returns:</p> Type Description <code>int | float</code> <p>The absolute value of x.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.all","title":"<code>all(iterable)</code>","text":"<p>Return True if all elements of the iterable are true.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[bool]</code> <p>The iterable to evaluate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if all elements are true, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.any","title":"<code>any(iterable)</code>","text":"<p>Return True if any element of the iterable is true.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[bool]</code> <p>The iterable to evaluate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if any element is true, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.bool","title":"<code>bool(x)</code>","text":"<p>Convert a value to a Boolean.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int | float | bool</code> <p>The value to convert.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>The Boolean value of x.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.callable","title":"<code>callable(obj)</code>","text":"<p>Check if the object appears callable.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> <p>The object to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the object appears callable, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.enumerate","title":"<code>enumerate(iterable, start=0)</code>","text":"<p>Return an enumerate object.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to enumerate.</p> required <code>start</code> <code>int</code> <p>The starting index.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[tuple[int, T]]</code> <p>An enumerate object.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.filter","title":"<code>filter(function, iterable)</code>","text":"<p>Construct an iterator from those elements of iterable for which function returns true.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[[T], bool] | None</code> <p>A function that tests if each element should be included. If None, returns the elements that are true.</p> required <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to filter.</p> required <p>Returns:</p> Type Description <code>Iterator[T]</code> <p>An iterator yielding the filtered elements.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.float","title":"<code>float(x)</code>","text":"<p>Convert a number to a floating point number.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int | float</code> <p>The number to convert.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The floating point representation of x.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.int","title":"<code>int(x)</code>","text":"<p>Convert a number to an integer.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int | float</code> <p>The number to convert.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The integer representation of x.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.isinstance","title":"<code>isinstance(obj, classinfo)</code>","text":"<p>Check if an object is an instance of a class or of a subclass thereof.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> <p>The object to check.</p> required <code>classinfo</code> <code>type | tuple[type, ...]</code> <p>A type or a tuple of types.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the object is an instance of classinfo, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.issubclass","title":"<code>issubclass(cls, classinfo)</code>","text":"<p>Check if a class is a subclass of another class or a tuple of classes.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type</code> <p>The class to check.</p> required <code>classinfo</code> <code>type | tuple[type, ...]</code> <p>A class or a tuple of classes.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if cls is a subclass of classinfo, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.len","title":"<code>len(s)</code>","text":"<p>Return the number of items in a container.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>object</code> <p>The container object.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The number of items in s.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.map","title":"<code>map(function, iterable)</code>","text":"<p>Apply a function to every item of an iterable and return an iterator.</p> <p>Unlike the standard Python map function, it is possible that the function may be called more than once on the same item.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[[T], S]</code> <p>The function to apply.</p> required <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to process.</p> required <p>Returns:</p> Type Description <code>Iterator[S]</code> <p>An iterator with the results.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.reversed","title":"<code>reversed(seq)</code>","text":"<p>Return a reverse iterator.</p> <p>Parameters:</p> Name Type Description Default <code>seq</code> <code>Sequence[T]</code> <p>The sequence to reverse.</p> required <p>Returns:</p> Type Description <code>Iterator[T]</code> <p>An iterator over the reversed sequence.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.round","title":"<code>round(number, ndigits=...)</code>","text":"<p>Round a number to a given precision in decimal digits.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int | float</code> <p>The number to round.</p> required <code>ndigits</code> <code>int</code> <p>The number of decimal digits to round to.</p> <code>...</code> <p>Returns:</p> Type Description <code>float</code> <p>The rounded number.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.zip","title":"<code>zip(*iterables)</code>","text":"<p>Return an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences.</p> <p>Parameters:</p> Name Type Description Default <code>*iterables</code> <code>Iterable[T]</code> <p>Iterables to aggregate.</p> <code>()</code> <p>Returns:</p> Type Description <code>Iterator[tuple[T, ...]]</code> <p>An iterator of aggregated tuples.</p>"},{"location":"reference/math/","title":"math","text":"<p>Supported functions in the Python standard library <code>math</code> module.</p>"},{"location":"reference/math/#doc_stubs.math.acos","title":"<code>acos(x)</code>","text":"<p>Compute the arccosine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A value between -1 and 1.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The arccosine of x in radians.</p>"},{"location":"reference/math/#doc_stubs.math.asin","title":"<code>asin(x)</code>","text":"<p>Compute the arcsine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A value between -1 and 1.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The arcsine of x in radians.</p>"},{"location":"reference/math/#doc_stubs.math.atan","title":"<code>atan(x)</code>","text":"<p>Compute the arctangent of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The arctangent of x in radians.</p>"},{"location":"reference/math/#doc_stubs.math.atan2","title":"<code>atan2(y, x)</code>","text":"<p>Compute the arctangent of y / x considering the quadrant.</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>float</code> <p>The y-coordinate.</p> required <code>x</code> <code>float</code> <p>The x-coordinate.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The arctangent of y / x in radians.</p>"},{"location":"reference/math/#doc_stubs.math.ceil","title":"<code>ceil(x)</code>","text":"<p>Return the smallest integer greater than or equal to x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The ceiling of x.</p>"},{"location":"reference/math/#doc_stubs.math.cos","title":"<code>cos(x)</code>","text":"<p>Compute the cosine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The angle in radians.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The cosine of x.</p>"},{"location":"reference/math/#doc_stubs.math.cosh","title":"<code>cosh(x)</code>","text":"<p>Compute the hyperbolic cosine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The hyperbolic cosine of x.</p>"},{"location":"reference/math/#doc_stubs.math.floor","title":"<code>floor(x)</code>","text":"<p>Return the largest integer less than or equal to x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The floor of x.</p>"},{"location":"reference/math/#doc_stubs.math.log","title":"<code>log(x, base=...)</code>","text":"<p>Compute the logarithm of x to the given base.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The number for which to compute the logarithm.</p> required <code>base</code> <code>float</code> <p>The base of the logarithm. If omitted, returns the natural logarithm of x.</p> <code>...</code> <p>Returns:</p> Type Description <code>float</code> <p>The logarithm of x to the specified base.</p>"},{"location":"reference/math/#doc_stubs.math.sin","title":"<code>sin(x)</code>","text":"<p>Compute the sine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The angle in radians.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The sine of x.</p>"},{"location":"reference/math/#doc_stubs.math.sinh","title":"<code>sinh(x)</code>","text":"<p>Compute the hyperbolic sine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The hyperbolic sine of x.</p>"},{"location":"reference/math/#doc_stubs.math.tan","title":"<code>tan(x)</code>","text":"<p>Compute the tangent of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The angle in radians.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The tangent of x.</p>"},{"location":"reference/math/#doc_stubs.math.tanh","title":"<code>tanh(x)</code>","text":"<p>Compute the hyperbolic tangent of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The hyperbolic tangent of x.</p>"},{"location":"reference/math/#doc_stubs.math.trunc","title":"<code>trunc(x)</code>","text":"<p>Truncate x to the nearest integer towards zero.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The truncated integer value of x.</p>"},{"location":"reference/random/","title":"random","text":"<p>Supported functions in the Python standard library <code>random</code> module.</p>"},{"location":"reference/random/#doc_stubs.random.choice","title":"<code>choice(seq)</code>","text":"<p>Return a randomly selected element from a non-empty sequence.</p> <p>Parameters:</p> Name Type Description Default <code>seq</code> <code>Sequence[T]</code> <p>The sequence to choose from.</p> required <p>Returns:</p> Type Description <code>T</code> <p>A randomly selected element from the sequence.</p>"},{"location":"reference/random/#doc_stubs.random.randint","title":"<code>randint(a, b)</code>","text":"<p>Return a random integer N such that a &lt;= N &lt;= b.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>The lower bound.</p> required <code>b</code> <code>int</code> <p>The upper bound.</p> required <p>Returns:</p> Type Description <code>int</code> <p>A randomly selected integer between a and b, inclusive.</p>"},{"location":"reference/random/#doc_stubs.random.random","title":"<code>random()</code>","text":"<p>Return a random floating point number in the range [0.0, 1.0).</p> <p>Returns:</p> Type Description <code>float</code> <p>A random float between 0.0 (inclusive) and 1.0 (exclusive).</p>"},{"location":"reference/random/#doc_stubs.random.randrange","title":"<code>randrange(start, stop=..., step=...)</code>","text":"<pre><code>randrange(stop: int) -&gt; int\n</code></pre><pre><code>randrange(start: int, stop: int, step: int = ...) -&gt; int\n</code></pre> <p>Return a randomly selected element from range(start, stop, step).</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>The start of the range.</p> required <code>stop</code> <code>int</code> <p>The end of the range.</p> <code>...</code> <code>step</code> <code>int</code> <p>The step size.</p> <code>...</code> <p>Returns:</p> Type Description <code>int</code> <p>A randomly selected integer from the range.</p>"},{"location":"reference/random/#doc_stubs.random.shuffle","title":"<code>shuffle(seq)</code>","text":"<p>Shuffle the sequence in place.</p> <p>Parameters:</p> Name Type Description Default <code>seq</code> <code>MutableSequence[Any]</code> <p>The mutable sequence to shuffle.</p> required"},{"location":"reference/random/#doc_stubs.random.uniform","title":"<code>uniform(a, b)</code>","text":"<p>Return a random floating point number N such that a &lt;= N &lt;= b.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The lower bound.</p> required <code>b</code> <code>float</code> <p>The upper bound.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A random float between a and b.</p>"},{"location":"reference/sonolus.script.archetype/","title":"sonolus.script.archetype","text":""},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife","title":"<code>ArchetypeLife</code>","text":"<p>               Bases: <code>Record</code></p> <p>How an entity contributes to life.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.good_increment","title":"<code>good_increment: Num</code>  <code>instance-attribute</code>","text":"<p>Life increment for a good judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.great_increment","title":"<code>great_increment: Num</code>  <code>instance-attribute</code>","text":"<p>Life increment for a great judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.miss_increment","title":"<code>miss_increment: Num</code>  <code>instance-attribute</code>","text":"<p>Life increment for a miss judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.perfect_increment","title":"<code>perfect_increment: Num</code>  <code>instance-attribute</code>","text":"<p>Life increment for a perfect judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.type_var_value","title":"<code>type_var_value(var)</code>  <code>classmethod</code>","text":"<p>Return the value of a type variable.</p> <p>Parameters:</p> Name Type Description Default <code>var</code> <code>TypeVar</code> <p>The type variable to get the value of.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value of the type variable.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.update","title":"<code>update(perfect_increment=None, great_increment=None, good_increment=None, miss_increment=None)</code>","text":"<p>Update the life increments.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef","title":"<code>EntityRef</code>","text":"<p>               Bases: <code>Record</code></p> <p>Reference to another entity.</p> <p>May be used with <code>Any</code> to reference an unknown archetype.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    ref_1: EntityRef[OtherArchetype] = imported()\n    ref_2: EntityRef[Any] = imported()\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.archetype","title":"<code>archetype()</code>  <code>classmethod</code>","text":"<p>Get the archetype type.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.archetype_matches","title":"<code>archetype_matches()</code>","text":"<p>Check if entity at the index is precisely of the archetype.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.get","title":"<code>get()</code>","text":"<p>Get the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.type_var_value","title":"<code>type_var_value(var)</code>  <code>classmethod</code>","text":"<p>Return the value of a type variable.</p> <p>Parameters:</p> Name Type Description Default <code>var</code> <code>TypeVar</code> <p>The type variable to get the value of.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value of the type variable.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.with_archetype","title":"<code>with_archetype(archetype)</code>","text":"<p>Return a new reference with the given archetype type.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype","title":"<code>PlayArchetype</code>","text":"<p>               Bases: <code>_BaseArchetype</code></p> <p>Base class for play mode archetypes.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    # Set to True if the entity is a note and contributes to combo and score\n    # Default is False\n    is_scored: bool = True\n\n    imported_field: int = imported()\n    exported_field: int = exported()\n    entity_memory_field: int = entity_memory()\n    shared_memory_field: int = shared_memory()\n\n    @callback(order=1)\n    def preprocess(self):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.despawn","title":"<code>despawn</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the entity should be despawned after this frame.</p> <p>Setting this to True will despawn the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.index","title":"<code>index: int</code>  <code>property</code>","text":"<p>The index of this entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.is_active","title":"<code>is_active: bool</code>  <code>property</code>","text":"<p>Whether this entity is active.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.is_despawned","title":"<code>is_despawned: bool</code>  <code>property</code>","text":"<p>Whether this entity is despawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.is_scored","title":"<code>is_scored: bool = False</code>  <code>class-attribute</code>","text":"<p>Whether the entity contributes to combo and score.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.is_waiting","title":"<code>is_waiting: bool</code>  <code>property</code>","text":"<p>Whether this entity is waiting to be spawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.life","title":"<code>life: ArchetypeLife</code>  <code>property</code>","text":"<p>How this entity contributes to life.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code>","text":"<p>The name of the archetype.</p> <p>If not set, the name will be the class name.</p> <p>The name is used in level data.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.result","title":"<code>result: PlayEntityInput</code>  <code>property</code>","text":"<p>The result of this entity.</p> <p>Only meaningful for scored entities.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.initialize","title":"<code>initialize()</code>","text":"<p>Initialize this entity.</p> <p>Runs when this entity is spawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.preprocess","title":"<code>preprocess()</code>","text":"<p>Perform upfront processing.</p> <p>Runs first when the level is loaded.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.ref","title":"<code>ref()</code>","text":"<p>Get a reference to this entity.</p> <p>Valid both in level data and in callbacks.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.should_spawn","title":"<code>should_spawn()</code>","text":"<p>Return whether the entity should be spawned.</p> <p>Runs each frame while the entity is the first entity in the spawn queue.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.spawn","title":"<code>spawn(**kwargs)</code>  <code>classmethod</code>","text":"<p>Spawn an entity of this archetype, injecting the given values into entity memory.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n\ndef f():\n    MyArchetype.spawn(field=123)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Entity memory values to inject by field name as defined in the Archetype.</p> <code>{}</code>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.spawn_order","title":"<code>spawn_order()</code>","text":"<p>Return the spawn order of the entity.</p> <p>Runs when the level is loaded after <code>preprocess</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.terminate","title":"<code>terminate()</code>","text":"<p>Finalize before despawning.</p> <p>Runs when the entity is despawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.touch","title":"<code>touch()</code>","text":"<p>Handle user input.</p> <p>Runs after <code>update_sequential</code> each frame.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.update_parallel","title":"<code>update_parallel()</code>","text":"<p>Perform parallel actions for this frame.</p> <p>Runs after <code>touch</code> each frame.</p> <p>This is where most gameplay logic should be placed.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.update_sequential","title":"<code>update_sequential()</code>","text":"<p>Perform non-parallel actions for this frame.</p> <p>Runs first each frame.</p> <p>This is where logic affecting shared memory should be placed. Other logic should be placed in <code>update_parallel</code> for better performance.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype","title":"<code>PreviewArchetype</code>","text":"<p>               Bases: <code>_BaseArchetype</code></p> <p>Base class for preview mode archetypes.</p> Usage <pre><code>class MyArchetype(PreviewArchetype):\n    imported_field: int = imported()\n    entity_memory_field: int = entity_memory()\n    shared_memory_field: int = shared_memory()\n\n    @callback(order=1)\n    def preprocess(self):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.index","title":"<code>index: int</code>  <code>property</code>","text":"<p>The index of this entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code>","text":"<p>The name of the archetype.</p> <p>If not set, the name will be the class name.</p> <p>The name is used in level data.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.preprocess","title":"<code>preprocess()</code>","text":"<p>Perform upfront processing.</p> <p>Runs first when the level is loaded.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.ref","title":"<code>ref()</code>","text":"<p>Get a reference to this entity.</p> <p>Valid both in level data and in callbacks.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.render","title":"<code>render()</code>","text":"<p>Render the entity.</p> <p>Runs after <code>preprocess</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.spawn","title":"<code>spawn(**kwargs)</code>  <code>classmethod</code>","text":"<p>Spawn an entity of this archetype, injecting the given values into entity memory.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n\ndef f():\n    MyArchetype.spawn(field=123)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Entity memory values to inject by field name as defined in the Archetype.</p> <code>{}</code>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardArchetypeName","title":"<code>StandardArchetypeName</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Standard archetype names.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardArchetypeName.BPM_CHANGE","title":"<code>BPM_CHANGE = '#BPM_CHANGE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Bpm change marker</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardArchetypeName.TIMESCALE_CHANGE","title":"<code>TIMESCALE_CHANGE = '#TIMESCALE_CHANGE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timescale change marker</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport","title":"<code>StandardImport</code>","text":"<p>Standard import annotations for Archetype fields.</p> Usage <pre><code>class MyArchetype(WatchArchetype):\n    judgment: StandardImport.JUDGMENT\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.ACCURACY","title":"<code>ACCURACY = Annotated[float, imported(name='#ACCURACY')]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The accuracy of the entity.</p> <p>Automatically supported in watch mode for archetypes with a corresponding scored play mode archetype.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.BEAT","title":"<code>BEAT = Annotated[float, imported(name='#BEAT')]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The beat of the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.BPM","title":"<code>BPM = Annotated[float, imported(name='#BPM')]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The bpm, for bpm change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.JUDGMENT","title":"<code>JUDGMENT = Annotated[int, imported(name='#JUDGMENT')]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The judgment of the entity.</p> <p>Automatically supported in watch mode for archetypes with a corresponding scored play mode archetype.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.TIMESCALE","title":"<code>TIMESCALE = Annotated[float, imported(name='#TIMESCALE')]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timescale, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype","title":"<code>WatchArchetype</code>","text":"<p>               Bases: <code>_BaseArchetype</code></p> <p>Base class for watch mode archetypes.</p> Usage <pre><code>class MyArchetype(WatchArchetype):\n    imported_field: int = imported()\n    entity_memory_field: int = entity_memory()\n    shared_memory_field: int = shared_memory()\n\n    @callback(order=1)\n    def update_sequential(self):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.index","title":"<code>index: int</code>  <code>property</code>","text":"<p>The index of this entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.is_active","title":"<code>is_active: bool</code>  <code>property</code>","text":"<p>Whether this entity is active.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.life","title":"<code>life: ArchetypeLife</code>  <code>property</code>","text":"<p>How this entity contributes to life.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code>","text":"<p>The name of the archetype.</p> <p>If not set, the name will be the class name.</p> <p>The name is used in level data.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.result","title":"<code>result: WatchEntityInput</code>  <code>property</code>","text":"<p>The result of this entity.</p> <p>Only meaningful for scored entities.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.despawn_time","title":"<code>despawn_time()</code>","text":"<p>Return the despawn time of the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.initialize","title":"<code>initialize()</code>","text":"<p>Initialize this entity.</p> <p>Runs when this entity is spawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.preprocess","title":"<code>preprocess()</code>","text":"<p>Perform upfront processing.</p> <p>Runs first when the level is loaded.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.ref","title":"<code>ref()</code>","text":"<p>Get a reference to this entity.</p> <p>Valid both in level data and in callbacks.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.spawn","title":"<code>spawn(**kwargs)</code>  <code>classmethod</code>","text":"<p>Spawn an entity of this archetype, injecting the given values into entity memory.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n\ndef f():\n    MyArchetype.spawn(field=123)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Entity memory values to inject by field name as defined in the Archetype.</p> <code>{}</code>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.spawn_time","title":"<code>spawn_time()</code>","text":"<p>Return the spawn time of the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.terminate","title":"<code>terminate()</code>","text":"<p>Finalize before despawning.</p> <p>Runs when the entity is despawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.update_parallel","title":"<code>update_parallel()</code>","text":"<p>Parallel update callback.</p> <p>Runs after <code>touch</code> each frame.</p> <p>This is where most gameplay logic should be placed.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.update_sequential","title":"<code>update_sequential()</code>","text":"<p>Perform non-parallel actions for this frame.</p> <p>Runs first each frame.</p> <p>This is where logic affecting shared memory should be placed. Other logic should be placed in <code>update_parallel</code> for better performance.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.archetype_life_of","title":"<code>archetype_life_of(archetype)</code>","text":"<p>Retrieve the archetype life of the given archetype.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.callback","title":"<code>callback(*, order=0)</code>","text":"<p>Annotate a callback with its order.</p> <p>Callbacks are execute from lowest to highest order. By default, callbacks have an order of 0.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    @callback(order=1)\n    def update_sequential(self):\n        pass\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>int</code> <p>The order of the callback. Lower values are executed first.</p> <code>0</code>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.entity_data","title":"<code>entity_data()</code>","text":"<p>Declare a field as entity data.</p> <p>Entity data is accessible from other entities, but may only be updated in the <code>preprocess</code> callback and is read-only in other callbacks.</p> <p>It functions like <code>imported</code> and shares the same underlying storage, except that it is not loaded from a level.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_data()\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.entity_info_at","title":"<code>entity_info_at(index)</code>","text":"<p>Retrieve entity info of the entity at the given index.</p> <p>Available in play, watch, and preview mode.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.entity_memory","title":"<code>entity_memory()</code>","text":"<p>Declare a field as entity memory.</p> <p>Entity memory is private to the entity and is not accessible from other entities. It may be read or updated in any callback associated with the entity.</p> <p>Entity memory fields may also be set when an entity is spawned using the <code>spawn()</code> method.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.exported","title":"<code>exported(*, name=None)</code>","text":"<p>Declare a field as exported.</p> <p>This is only usable in play mode to export data to be loaded in watch mode.</p> <p>Exported fields are write-only.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = exported()\n    field_with_explicit_name: int = exported(name=\"#FIELD\")\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.imported","title":"<code>imported(*, name=None)</code>","text":"<p>Declare a field as imported.</p> <p>Imported fields may be loaded from the level.</p> <p>In watch mode, data may also be loaded from a corresponding exported field in play mode.</p> <p>Imported fields may only be updated in the <code>preprocess</code> callback, and are read-only in other callbacks.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = imported()\n    field_with_explicit_name: int = imported(name=\"field_name\")\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.shared_memory","title":"<code>shared_memory()</code>","text":"<p>Declare a field as shared memory.</p> <p>Shared memory is accessible from other entities.</p> <p>Shared memory may be read in any callback, but may only be updated by sequential callbacks (<code>preprocess</code>, <code>update_sequential</code>, and <code>touch</code>).</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = shared_memory()\n</code></pre>"},{"location":"reference/sonolus.script.array/","title":"sonolus.script.array","text":"<p>For usage details, see the corresponding concepts page.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array","title":"<code>Array</code>","text":"<p>               Bases: <code>GenericValue</code>, <code>ArrayLike[T]</code></p> <p>A fixed size array of values.</p> Usage <pre><code>array_1 = Array(1, 2, 3)\narray_2 = Array[int, 0]()\n</code></pre>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.__contains__","title":"<code>__contains__(value)</code>","text":"<p>Return whether any element in the array is equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check for.</p> required"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.__iter__","title":"<code>__iter__()</code>","text":"<p>Return an iterator over the array.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.__reversed__","title":"<code>__reversed__()</code>","text":"<p>Return a reversed view of the array.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.count","title":"<code>count(value)</code>","text":"<p>Return the number of elements in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to count.</p> required"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.element_type","title":"<code>element_type()</code>  <code>classmethod</code>","text":"<p>Return the type of elements in this array type.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.index","title":"<code>index(value, start=0, stop=None)</code>","text":"<p>Return the index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required <code>start</code> <code>Num</code> <p>The index to start searching from.</p> <code>0</code> <code>stop</code> <code>Num | None</code> <p>The index to stop searching at. If <code>None</code>, search to the end of the array.</p> <code>None</code>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.index_of_max","title":"<code>index_of_max(*, key=None)</code>","text":"<p>Return the index of the maximum value in the array.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[T, Any] | None</code> <p>A one-argument ordering function to use for comparison like the one used in <code>max()</code>.</p> <code>None</code>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.index_of_min","title":"<code>index_of_min(*, key=None)</code>","text":"<p>Return the index of the minimum value in the array.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[T, Any] | None</code> <p>A one-argument ordering function to use for comparison like the one used in <code>min()</code>.</p> <code>None</code>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.last_index","title":"<code>last_index(value)</code>","text":"<p>Return the last index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.reverse","title":"<code>reverse()</code>","text":"<p>Reverse the values in the array in place.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.shuffle","title":"<code>shuffle()</code>","text":"<p>Shuffle the values in the array in place.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.size","title":"<code>size()</code>  <code>classmethod</code>","text":"<p>Return the size of this array type.</p> <p>On instances, use <code>len(array)</code> instead.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.sort","title":"<code>sort(*, key=None, reverse=False)</code>","text":"<p>Sort the values in the array in place.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[T, Any] | None</code> <p>A one-argument ordering function to use for comparison.</p> <code>None</code> <code>reverse</code> <code>bool</code> <p>If <code>True</code>, sort in descending order, otherwise sort in ascending order.</p> <code>False</code>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.swap","title":"<code>swap(i, j)</code>","text":"<p>Swap the values at the given indices.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>Num</code> <p>The first index.</p> required <code>j</code> <code>Num</code> <p>The second index.</p> required"},{"location":"reference/sonolus.script.array_like/","title":"sonolus.script.array_like","text":""},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike","title":"<code>ArrayLike</code>","text":"<p>               Bases: <code>Sequence</code>, <code>ABC</code></p> <p>Mixin for array-like objects.</p> <p>Inheritors must implement <code>__len__</code>, <code>__getitem__</code>, and <code>__setitem__</code>.</p> Usage <pre><code>class MyArrayLike[T](Record, ArrayLike[T]):\n    def __len__(self) -&gt; int:\n        ...\n\n    def __getitem__(self, index: Num) -&gt; T:\n        ...\n\n    def __setitem__(self, index: Num, value: T):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__contains__","title":"<code>__contains__(value)</code>","text":"<p>Return whether any element in the array is equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check for.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__getitem__","title":"<code>__getitem__(index)</code>  <code>abstractmethod</code>","text":"<p>Return the item at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>Num</code> <p>The index of the item. Must be an integer between 0 and <code>len(self) - 1</code>.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__iter__","title":"<code>__iter__()</code>","text":"<p>Return an iterator over the array.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__len__","title":"<code>__len__()</code>  <code>abstractmethod</code>","text":"<p>Return the length of the array.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__reversed__","title":"<code>__reversed__()</code>","text":"<p>Return a reversed view of the array.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__setitem__","title":"<code>__setitem__(index, value)</code>  <code>abstractmethod</code>","text":"<p>Set the value of the item at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>Num</code> <p>The index of the item. Must be an integer between 0 and <code>len(self) - 1</code>.</p> required <code>value</code> <code>T</code> <p>The value to set.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.count","title":"<code>count(value)</code>","text":"<p>Return the number of elements in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to count.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.index","title":"<code>index(value, start=0, stop=None)</code>","text":"<p>Return the index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required <code>start</code> <code>Num</code> <p>The index to start searching from.</p> <code>0</code> <code>stop</code> <code>Num | None</code> <p>The index to stop searching at. If <code>None</code>, search to the end of the array.</p> <code>None</code>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.index_of_max","title":"<code>index_of_max(*, key=None)</code>","text":"<p>Return the index of the maximum value in the array.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[T, Any] | None</code> <p>A one-argument ordering function to use for comparison like the one used in <code>max()</code>.</p> <code>None</code>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.index_of_min","title":"<code>index_of_min(*, key=None)</code>","text":"<p>Return the index of the minimum value in the array.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[T, Any] | None</code> <p>A one-argument ordering function to use for comparison like the one used in <code>min()</code>.</p> <code>None</code>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.last_index","title":"<code>last_index(value)</code>","text":"<p>Return the last index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.reverse","title":"<code>reverse()</code>","text":"<p>Reverse the values in the array in place.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.shuffle","title":"<code>shuffle()</code>","text":"<p>Shuffle the values in the array in place.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.sort","title":"<code>sort(*, key=None, reverse=False)</code>","text":"<p>Sort the values in the array in place.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[T, Any] | None</code> <p>A one-argument ordering function to use for comparison.</p> <code>None</code> <code>reverse</code> <code>bool</code> <p>If <code>True</code>, sort in descending order, otherwise sort in ascending order.</p> <code>False</code>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.swap","title":"<code>swap(i, j)</code>","text":"<p>Swap the values at the given indices.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>Num</code> <p>The first index.</p> required <code>j</code> <code>Num</code> <p>The second index.</p> required"},{"location":"reference/sonolus.script.bucket/","title":"sonolus.script.bucket","text":""},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Bucket","title":"<code>Bucket</code>","text":"<p>               Bases: <code>Record</code></p> <p>A bucket for entity judgment results.</p> Usage <pre><code>Bucket(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Bucket.id","title":"<code>id: int</code>  <code>instance-attribute</code>","text":"<p>Bucket ID.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Bucket.window","title":"<code>window: JudgmentWindow</code>  <code>property</code> <code>writable</code>","text":"<p>The judgment window of the bucket.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Judgment","title":"<code>Judgment</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>The judgment of a hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow","title":"<code>JudgmentWindow</code>","text":"<p>               Bases: <code>Record</code></p> <p>The window for judging the accuracy of a hit.</p> Usage <pre><code>JudgmentWindow(perfect: Interval, great: Interval, good: Interval)\n</code></pre>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.end","title":"<code>end: float</code>  <code>property</code>","text":"<p>The end time of the good interval.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.good","title":"<code>good: Interval</code>  <code>instance-attribute</code>","text":"<p>Interval for a good hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.great","title":"<code>great: Interval</code>  <code>instance-attribute</code>","text":"<p>Interval for a great hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.perfect","title":"<code>perfect: Interval</code>  <code>instance-attribute</code>","text":"<p>Interval for a perfect hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.start","title":"<code>start: float</code>  <code>property</code>","text":"<p>The start time of the good interval.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.__add__","title":"<code>__add__(other)</code>","text":"<p>Add a scalar to the intervals.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Multiply the intervals by a scalar.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.judge","title":"<code>judge(actual, target)</code>","text":"<p>Judge the accuracy of a hit.</p> <p>Parameters:</p> Name Type Description Default <code>actual</code> <code>float</code> <p>The actual time of the hit.</p> required <code>target</code> <code>float</code> <p>The target time of the hit.</p> required <p>Returns:</p> Type Description <code>Judgment</code> <p>The <code>Judgment</code> of the hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.update","title":"<code>update(perfect=None, great=None, good=None)</code>","text":"<p>Update the window with the given intervals.</p> <p>Parameters:</p> Name Type Description Default <code>perfect</code> <code>Interval | None</code> <p>The interval for a perfect hit.</p> <code>None</code> <code>great</code> <code>Interval | None</code> <p>The interval for a great hit.</p> <code>None</code> <code>good</code> <code>Interval | None</code> <p>The interval for a good hit.</p> <code>None</code>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.bucket","title":"<code>bucket(*, sprites, unit=None)</code>","text":"<p>Define a bucket with the given sprites and unit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.bucket_sprite","title":"<code>bucket_sprite(*, sprite, fallback_sprite=None, x, y, w, h, rotation=0)</code>","text":"<p>Define a sprite for a bucket.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.buckets","title":"<code>buckets(cls)</code>","text":"<p>Decorator to define a buckets class.</p> Usage <pre><code>@buckets\nclass Buckets:\n    note: Bucket = bucket(\n        sprites=[\n            bucket_sprite(\n                sprite=Skin.note,\n                x=0,\n                y=0,\n                w=2,\n                h=2,\n            )\n        ],\n        unit=StandardText.MILLISECOND_UNIT,\n    )\n</code></pre>"},{"location":"reference/sonolus.script.containers/","title":"sonolus.script.containers","text":""},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap","title":"<code>ArrayMap</code>","text":"<p>               Bases: <code>Record</code></p> <p>A map implemented as an array of key-value pairs with a fixed maximum capacity.</p> Usage <pre><code>ArrayMap[K, V, Capacity].new()  # Create a new empty map\n</code></pre> <p>Examples:</p> <pre><code>map = ArrayMap[int, int, 10].new()\nmap[1] = 2\nmap[3] = 4\nassert 1 in map\nassert 2 not in map\nassert map[3] == 4\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__contains__","title":"<code>__contains__(key)</code>","text":"<p>Return whether the given key is present in the map.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>K</code> <p>The key to check for</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the key is present, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Return the value associated with the given key.</p> <p>Must be called with a key that is present in the map.</p> <p>The returned value continues to be part of the map. Future modifications to the map will affect the returned value.</p> Notes <p>Future modifications to the map may cause unexpected changes to the returned value. If the map may be modified in the future, it's recommended to make a copy of the value.</p> <p>For example: <pre><code>map = ArrayMap[int, Pair[int, int], 10].new()\nmap[1] = Pair(2, 3)\nmap[3] = Pair(4, 5)\nmap[5] = Pair(6, 7)\np = map[3]\nmap.pop(1)\n# The value of `p` may now be different\n</code></pre></p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__iter__","title":"<code>__iter__()</code>","text":"<p>Return an iterator over the keys in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__len__","title":"<code>__len__()</code>","text":"<p>Return the number of key-value pairs in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>Associate the given key with the given value.</p> <p>If the key is already present in the map, the value is updated. Must not be called if the map is full.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>K</code> <p>The key to associate with the value.</p> required <code>value</code> <code>V</code> <p>The value to associate with the key</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.capacity","title":"<code>capacity()</code>  <code>classmethod</code>","text":"<p>Return the maximum number of key-value pairs the map can hold.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.clear","title":"<code>clear()</code>","text":"<p>Clear the map, removing all key-value pairs.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.is_full","title":"<code>is_full()</code>","text":"<p>Return whether the map is full.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.items","title":"<code>items()</code>","text":"<p>Return an iterator over the key-value pairs in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.keys","title":"<code>keys()</code>","text":"<p>Return an iterator over the keys in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.new","title":"<code>new()</code>  <code>classmethod</code>","text":"<p>Create a new empty map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.pop","title":"<code>pop(key)</code>","text":"<p>Remove and return a copy of the value associated with the given key.</p> <p>Must be called with a key that is present in the map.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>K</code> <p>The key to remove</p> required <p>Returns:</p> Type Description <code>V</code> <p>The value associated with the key</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.values","title":"<code>values()</code>","text":"<p>Return an iterator over the values in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayPointer","title":"<code>ArrayPointer</code>","text":"<p>               Bases: <code>Record</code>, <code>ArrayLike[T]</code></p> <p>An array defined by a size and pointer to the first element.</p> <p>This is intended to be created internally and improper use may result in hard to debug issues.</p> Usage <pre><code>ArrayPointer[T](size: int, block: int, offset: int)\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayPointer.__len__","title":"<code>__len__()</code>","text":"<p>Return the number of elements in the array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayPointer.element_type","title":"<code>element_type()</code>  <code>classmethod</code>","text":"<p>Return the type of the elements in the array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet","title":"<code>ArraySet</code>","text":"<p>               Bases: <code>Record</code></p> <p>A set implemented as an array with a fixed maximum capacity.</p> Usage <pre><code>ArraySet[T, Capacity].new()  # Create a new empty set\n</code></pre> <p>Examples:</p> <pre><code>s = ArraySet[int, 10].new()\ns.add(1)\ns.add(2)\nassert 1 in s\nassert 3 not in s\ns.remove(1)\nassert 1 not in s\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.__contains__","title":"<code>__contains__(value)</code>","text":"<p>Return whether the given value is present in the set.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.__iter__","title":"<code>__iter__()</code>","text":"<p>Return an iterator over the values in the set.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.__len__","title":"<code>__len__()</code>","text":"<p>Return the number of elements in the set.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.add","title":"<code>add(value)</code>","text":"<p>Add a copy of the given value to the set.</p> <p>This has no effect and returns False if the value is already present or if the set is full.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to add.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was added, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.clear","title":"<code>clear()</code>","text":"<p>Clear the set, removing all elements.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.new","title":"<code>new()</code>  <code>classmethod</code>","text":"<p>Create a new empty set.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.remove","title":"<code>remove(value)</code>","text":"<p>Remove the given value from the set.</p> <p>This has no effect and returns False if the value is not present.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to remove.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was removed, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Box","title":"<code>Box</code>","text":"<p>               Bases: <code>Record</code></p> <p>A box that contains a value.</p> <p>This can be helpful for generic code that can handle both Num and non-Num types.</p> Usage <pre><code>Box[T](value: T)\n</code></pre> <p>Examples:</p> <pre><code>box = Box(1)\nbox = Box[int](2)\n\nx: T = ...\ny: T = ...\nbox = Box(x)\nbox.value = y  # Works regardless of whether x is a Num or not\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Box.value","title":"<code>value: T</code>  <code>instance-attribute</code>","text":"<p>The value contained in the box.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Pair","title":"<code>Pair</code>","text":"<p>               Bases: <code>Record</code></p> <p>A generic pair of values.</p> Usage <pre><code>Pair[T, U](first: T, second: U)\n</code></pre> <p>Examples:</p> <pre><code>pair = Pair(1, 2)\npair = Pair[int, Pair[int, int]](1, Pair(2, 3))\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Pair.first","title":"<code>first: T</code>  <code>instance-attribute</code>","text":"<p>The first value.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Pair.second","title":"<code>second: U</code>  <code>instance-attribute</code>","text":"<p>The second value.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray","title":"<code>VarArray</code>","text":"<p>               Bases: <code>Record</code>, <code>ArrayLike[T]</code></p> <p>An array with a variable size and fixed maximum capacity.</p> Usage <pre><code>VarArray[T, Capacity].new()  # Create a new empty array\n</code></pre> <p>Examples:</p> <pre><code>array = VarArray[int, 10].new()\narray.append(1)\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__delitem__","title":"<code>__delitem__(key)</code>","text":"<p>Remove the element at the given index.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>Return the element at the given index.</p> <p>The returned value continues to be part of the array. Future modifications to the array will affect the returned value.</p> Note <p>Future modifications to the array may cause unexpected changes to the returned value. If the array may be modified in the future, it's recommended to make a copy of the value.</p> <p>For example: <pre><code>a = VarArray[Pair, 10].new()\na.append(Pair(1, 2))\na.append(Pair(3, 4))\na.append(Pair(5, 6))\np = a[1]\na.pop(0)  # Elements are shifted back\nassert p == Pair(5, 6)  # The value of p has changed\n</code></pre></p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__iadd__","title":"<code>__iadd__(other)</code>","text":"<p>Appends copies of the values in the given array to the end of the array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__len__","title":"<code>__len__()</code>","text":"<p>Return the number of elements in the array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>Update the element at the given index.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.append","title":"<code>append(value)</code>","text":"<p>Append a copy of the given value to the end of the array.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to append.</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.append_unchecked","title":"<code>append_unchecked(value)</code>","text":"<p>Append the given value to the end of the array without checking the capacity.</p> <p>Use with caution as this may cause hard to debug issues if the array is full.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to append.</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.capacity","title":"<code>capacity()</code>  <code>classmethod</code>","text":"<p>Return the maximum number of elements the array can hold.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.clear","title":"<code>clear()</code>","text":"<p>Clear the array, removing all elements.</p> <p>References to elements are not immediately changed, but future insertions may overwrite them.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.extend","title":"<code>extend(values)</code>","text":"<p>Appends copies of the values in the given array to the end of the array.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>ArrayLike[T]</code> <p>The values to append.</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.insert","title":"<code>insert(index, value)</code>","text":"<p>Insert a copy of the given value at the given index.</p> <p>Preserves the relative order of the elements.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which to insert the value. Must be in the range [0, size].</p> required <code>value</code> <code>T</code> <p>The value to insert.</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.is_full","title":"<code>is_full()</code>","text":"<p>Return whether the array is full.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.new","title":"<code>new()</code>  <code>classmethod</code>","text":"<p>Create a new empty array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.pop","title":"<code>pop(index=None)</code>","text":"<p>Remove and return a copy of the value at the given index.</p> <p>Preserves the relative order of the elements.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | None</code> <p>The index of the value to remove. If None, the last element is removed.</p> <code>None</code>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.remove","title":"<code>remove(value)</code>","text":"<p>Remove the first occurrence of the given value, returning whether the value was removed.</p> <p>Preserves the relative order of the elements.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was removed, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.set_add","title":"<code>set_add(value)</code>","text":"<p>Adds a copy of the given value if it is not already present, returning whether the value was added.</p> <p>If the value is already present, the array is not modified. If the array is full, the value is not added.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to add</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was added, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.set_remove","title":"<code>set_remove(value)</code>","text":"<p>Removes the first occurrence of the given value, returning whether the value was removed.</p> <p>Does not preserve the relative order of the elements.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was removed, False otherwise.</p>"},{"location":"reference/sonolus.script.debug/","title":"sonolus.script.debug","text":""},{"location":"reference/sonolus.script.debug/#sonolus.script.debug.debug_log","title":"<code>debug_log(value)</code>","text":"<p>Log a value in debug mode.</p>"},{"location":"reference/sonolus.script.debug/#sonolus.script.debug.debug_pause","title":"<code>debug_pause()</code>","text":"<p>Pause the game if in debug mode.</p>"},{"location":"reference/sonolus.script.debug/#sonolus.script.debug.error","title":"<code>error(message=None)</code>","text":"<p>Raise an error.</p> <p>This function is used to raise an error during runtime. When this happens, the game will pause in debug mode. The current callback will also immediately return 0.</p>"},{"location":"reference/sonolus.script.debug/#sonolus.script.debug.static_error","title":"<code>static_error(message=None)</code>","text":"<p>Raise a static error.</p> <p>This function is used to raise an error during compile-time if the compiler cannot guarantee that this function will not be called during runtime.</p>"},{"location":"reference/sonolus.script.easing/","title":"sonolus.script.easing","text":"<p>For more information on easing functions, see easings.net.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_back","title":"<code>ease_in_back(x)</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending fast, overshooting below 0 at the start.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_circ","title":"<code>ease_in_circ(x)</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending very fast.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_cubic","title":"<code>ease_in_cubic(x)</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending fast with cubic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_elastic","title":"<code>ease_in_elastic(x)</code>","text":"<p>Interpolate between 0 and 1 with oscillations, starting slow and ending fast.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_expo","title":"<code>ease_in_expo(x)</code>","text":"<p>Interpolate between 0 and 1, starting extremely slow and ending extremely fast.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_back","title":"<code>ease_in_out_back(x)</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow with overshooting, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_circ","title":"<code>ease_in_out_circ(x)</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow, very fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_cubic","title":"<code>ease_in_out_cubic(x)</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow with cubic easing, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_elastic","title":"<code>ease_in_out_elastic(x)</code>","text":"<p>Interpolate between 0 and 1 with oscillations, slow at the start and end, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_expo","title":"<code>ease_in_out_expo(x)</code>","text":"<p>Interpolate between 0 and 1, starting and ending extremely slow, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_quad","title":"<code>ease_in_out_quad(x)</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow with quadratic easing, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_quart","title":"<code>ease_in_out_quart(x)</code>","text":"<p>Interpolate between 0 and 1, starting and ending very slow with quartic easing, very fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_quint","title":"<code>ease_in_out_quint(x)</code>","text":"<p>Interpolate between 0 and 1, starting and ending extremely slow with quintic easing, extremely fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_sine","title":"<code>ease_in_out_sine(x)</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow with sine easing, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_quad","title":"<code>ease_in_quad(x)</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending fast with quadratic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_quart","title":"<code>ease_in_quart(x)</code>","text":"<p>Interpolate between 0 and 1, starting very slow and ending very fast with quartic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_quint","title":"<code>ease_in_quint(x)</code>","text":"<p>Interpolate between 0 and 1, starting extremely slow and ending extremely fast with quintic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_sine","title":"<code>ease_in_sine(x)</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending fast with sine easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_back","title":"<code>ease_out_back(x)</code>","text":"<p>Interpolate between 0 and 1, starting fast and ending slow, overshooting above 1 at the end.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_circ","title":"<code>ease_out_circ(x)</code>","text":"<p>Interpolate between 0 and 1, starting very fast and ending slow.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_cubic","title":"<code>ease_out_cubic(x)</code>","text":"<p>Interpolate between 0 and 1, starting fast and ending slow with cubic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_elastic","title":"<code>ease_out_elastic(x)</code>","text":"<p>Interpolate between 0 and 1 with oscillations, starting fast and ending slow.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_expo","title":"<code>ease_out_expo(x)</code>","text":"<p>Interpolate between 0 and 1, starting extremely fast and ending extremely slow.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_back","title":"<code>ease_out_in_back(x)</code>","text":"<p>Interpolate between 0 and 1, fast at the start and end, slow in the middle with overshooting.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_circ","title":"<code>ease_out_in_circ(x)</code>","text":"<p>Interpolate between 0 and 1, very fast at the start and end, slow in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_cubic","title":"<code>ease_out_in_cubic(x)</code>","text":"<p>Interpolate between 0 and 1, fast at the start and end, slow in the middle with cubic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_elastic","title":"<code>ease_out_in_elastic(x)</code>","text":"<p>Interpolate between 0 and 1 with oscillations, fast at the start and end, slow in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_expo","title":"<code>ease_out_in_expo(x)</code>","text":"<p>Interpolate between 0 and 1, extremely fast at the start and end, extremely slow in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_quad","title":"<code>ease_out_in_quad(x)</code>","text":"<p>Interpolate between 0 and 1, fast at the start and end, slow in the middle with quadratic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_quart","title":"<code>ease_out_in_quart(x)</code>","text":"<p>Interpolate between 0 and 1, very fast at the start and end, very slow in the middle with quartic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_quint","title":"<code>ease_out_in_quint(x)</code>","text":"<p>Interpolate between 0 and 1, extremely fast at the start and end, extremely slow in the middle with quintic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_sine","title":"<code>ease_out_in_sine(x)</code>","text":"<p>Interpolate between 0 and 1, fast at the start and end, slow in the middle with sine easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_quad","title":"<code>ease_out_quad(x)</code>","text":"<p>Interpolate between 0 and 1, starting fast and ending slow with quadratic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_quart","title":"<code>ease_out_quart(x)</code>","text":"<p>Interpolate between 0 and 1, starting very fast and ending very slow with quartic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_quint","title":"<code>ease_out_quint(x)</code>","text":"<p>Interpolate between 0 and 1, starting extremely fast and ending extremely slow with quintic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_sine","title":"<code>ease_out_sine(x)</code>","text":"<p>Interpolate between 0 and 1, starting fast and ending slow with sine easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.linstep","title":"<code>linstep(x)</code>","text":"<p>Linear interpolation between 0 and 1.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.smootherstep","title":"<code>smootherstep(x)</code>","text":"<p>Interpolate between 0 and 1 using smootherstep.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.smoothstep","title":"<code>smoothstep(x)</code>","text":"<p>Interpolate between 0 and 1 using smoothstep.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.step_end","title":"<code>step_end(x)</code>","text":"<p>Step function returning 1.0 if x &gt;= 1, otherwise 0.0.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.step_start","title":"<code>step_start(x)</code>","text":"<p>Step function returning 1.0 if x &gt; 0, otherwise 0.0.</p>"},{"location":"reference/sonolus.script.effect/","title":"sonolus.script.effect","text":""},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect","title":"<code>Effect</code>","text":"<p>               Bases: <code>Record</code></p> <p>Sound effect clip.</p> Usage <pre><code>Effect(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.id","title":"<code>id: int</code>  <code>instance-attribute</code>","text":"<p>Effect ID.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.is_available","title":"<code>is_available()</code>","text":"<p>Return whether the effect clip is available.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.loop","title":"<code>loop()</code>","text":"<p>Play the effect clip in a loop until stopped.</p> <p>Returns:</p> Type Description <code>LoopedEffectHandle</code> <p>A handle to stop the loop.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.play","title":"<code>play(distance=0)</code>","text":"<p>Play the effect clip.</p> <p>If the clip was already played within the specified distance, it will be skipped.</p> <p>Parameters:</p> Name Type Description Default <code>distance</code> <code>float</code> <p>Minimum time in seconds since the last play for the effect to play.</p> <code>0</code>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.schedule","title":"<code>schedule(time, distance=0)</code>","text":"<p>Schedule the effect clip to play at a specific time.</p> <p>This is not suitable for real-time effects such as responses to user input. Use <code>play</code> instead.</p> <p>This may be called in preprocess to schedule effects upfront.</p> <p>If the clip would play within the specified distance of another play, it will be skipped.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>Time in seconds when the effect should play.</p> required <code>distance</code> <code>float</code> <p>Minimum time in seconds after a previous play for the effect to play.</p> <code>0</code>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.schedule_loop","title":"<code>schedule_loop(start_time)</code>","text":"<p>Schedule the effect clip to play in a loop until stopped.</p> <p>This is not suitable for real-time effects such as responses to user input. Use <code>loop</code> instead.</p> <p>Returns:</p> Type Description <code>ScheduledLoopedEffectHandle</code> <p>A handle to stop the loop.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.LoopedEffectHandle","title":"<code>LoopedEffectHandle</code>","text":"<p>               Bases: <code>Record</code></p> <p>Handle to stop a looped effect.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.LoopedEffectHandle.stop","title":"<code>stop()</code>","text":"<p>Stop the looped effect.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.ScheduledLoopedEffectHandle","title":"<code>ScheduledLoopedEffectHandle</code>","text":"<p>               Bases: <code>Record</code></p> <p>Handle to stop a scheduled looped effect.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.ScheduledLoopedEffectHandle.stop","title":"<code>stop(end_time)</code>","text":"<p>Stop the scheduled looped effect.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.StandardEffect","title":"<code>StandardEffect</code>","text":"<p>Standard sound effect clips.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.effect","title":"<code>effect(name)</code>","text":"<p>Define a sound effect clip with the given name.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.effects","title":"<code>effects(cls)</code>","text":"<p>Decorator to define effect clips.</p> Usage <pre><code>@effects\nclass Effects:\n    miss: StandardEffect.MISS\n    other: Effect = effect(\"other\")\n</code></pre>"},{"location":"reference/sonolus.script.engine/","title":"sonolus.script.engine","text":""},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.Engine","title":"<code>Engine</code>","text":"<p>A Sonolus.py engine.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the engine.</p> required <code>title</code> <code>AnyText | None</code> <p>The title of the engine.</p> <code>None</code> <code>subtitle</code> <code>AnyText</code> <p>The subtitle of the engine.</p> <code>'Sonolus.py Engine'</code> <code>author</code> <code>AnyText</code> <p>The author of the engine.</p> <code>'Unknown'</code> <code>skin</code> <code>str | None</code> <p>The default skin for the engine.</p> <code>None</code> <code>background</code> <code>str | None</code> <p>The default background for the engine.</p> <code>None</code> <code>effect</code> <code>str | None</code> <p>The default effect for the engine.</p> <code>None</code> <code>particle</code> <code>str | None</code> <p>The default particle for the engine.</p> <code>None</code> <code>thumbnail</code> <code>Asset | None</code> <p>The thumbnail for the engine.</p> <code>None</code> <code>data</code> <code>EngineData</code> <p>The engine's modes and configurations.</p> required <code>tags</code> <code>list[Tag] | None</code> <p>The tags of the engine.</p> <code>None</code> <code>description</code> <code>AnyText | None</code> <p>The description of the engine.</p> <code>None</code> <code>meta</code> <code>Any</code> <p>Additional metadata of the engine.</p> <code>None</code>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.Engine.export","title":"<code>export()</code>","text":"<p>Export the engine in a sonolus-pack compatible format.</p> <p>Returns:</p> Type Description <code>ExportedEngine</code> <p>An exported engine.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.EngineData","title":"<code>EngineData</code>","text":"<p>A Sonolus.py engine's modes and configurations.</p> <p>Parameters:</p> Name Type Description Default <code>ui</code> <code>UiConfig | None</code> <p>The UI configuration.</p> <code>None</code> <code>options</code> <code>Options</code> <p>The options for the engine.</p> <code>EmptyOptions</code> <code>play</code> <code>PlayMode | None</code> <p>The play mode configuration.</p> <code>None</code> <code>watch</code> <code>WatchMode | None</code> <p>The watch mode configuration.</p> <code>None</code> <code>preview</code> <code>PreviewMode | None</code> <p>The preview mode configuration.</p> <code>None</code> <code>tutorial</code> <code>TutorialMode | None</code> <p>The tutorial mode configuration.</p> <code>None</code>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.ExportedEngine","title":"<code>ExportedEngine</code>","text":"<p>An exported Sonolus.py engine.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.ExportedEngine.write_to_dir","title":"<code>write_to_dir(path)</code>","text":"<p>Write the exported engine to a directory.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.PlayMode","title":"<code>PlayMode</code>","text":"<p>A play mode definition.</p> <p>Parameters:</p> Name Type Description Default <code>archetypes</code> <code>list[type[_BaseArchetype]] | None</code> <p>A list of play archetypes.</p> <code>None</code> <code>skin</code> <code>Skin</code> <p>The skin for the play mode.</p> <code>EmptySkin</code> <code>effects</code> <code>Effects</code> <p>The effects for the play mode.</p> <code>EmptyEffects</code> <code>particles</code> <code>Particles</code> <p>The particles for the play mode.</p> <code>EmptyParticles</code> <code>buckets</code> <code>Buckets</code> <p>The buckets for the play mode.</p> <code>EmptyBuckets</code>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.PreviewMode","title":"<code>PreviewMode</code>","text":"<p>A preview mode definition.</p> <p>Parameters:</p> Name Type Description Default <code>archetypes</code> <code>list[type[_BaseArchetype]] | None</code> <p>A list of preview archetypes.</p> <code>None</code> <code>skin</code> <code>Skin</code> <p>The skin for the preview mode.</p> <code>EmptySkin</code>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.TutorialMode","title":"<code>TutorialMode</code>","text":"<p>A tutorial mode definition.</p> <p>Parameters:</p> Name Type Description Default <code>skin</code> <code>Skin</code> <p>The skin for the tutorial mode.</p> <code>EmptySkin</code> <code>effects</code> <code>Effects</code> <p>The effects for the tutorial mode.</p> <code>EmptyEffects</code> <code>particles</code> <code>Particles</code> <p>The particles for the tutorial mode.</p> <code>EmptyParticles</code> <code>instructions</code> <code>TutorialInstructions</code> <p>The instructions for the tutorial mode.</p> <code>EmptyInstructions</code> <code>instruction_icons</code> <code>TutorialInstructionIcons</code> <p>The instruction icons for the tutorial mode.</p> <code>EmptyInstructionIcons</code> <code>preprocess</code> <code>Callable[[], None]</code> <p>A callback to be called before the tutorial starts.</p> required <code>navigate</code> <code>Callable[[], None]</code> <p>A callback to be called when the user navigates.</p> required <code>update</code> <code>Callable[[], None]</code> <p>A callback to be called each frame.</p> required"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.WatchMode","title":"<code>WatchMode</code>","text":"<p>A watch mode definition.</p> <p>Parameters:</p> Name Type Description Default <code>archetypes</code> <code>list[type[_BaseArchetype]] | None</code> <p>A list of watch archetypes.</p> <code>None</code> <code>skin</code> <code>Skin</code> <p>The skin for the watch mode.</p> <code>EmptySkin</code> <code>effects</code> <code>Effects</code> <p>The effects for the watch mode.</p> <code>EmptyEffects</code> <code>particles</code> <code>Particles</code> <p>The particles for the watch mode.</p> <code>EmptyParticles</code> <code>buckets</code> <code>Buckets</code> <p>The buckets for the watch mode.</p> <code>EmptyBuckets</code> <code>update_spawn</code> <code>Callable[[], float]</code> <p>A callback returning the spawn time used by archetypes.</p> required"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.empty_play_mode","title":"<code>empty_play_mode()</code>","text":"<p>Create an empty play mode.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.empty_preview_mode","title":"<code>empty_preview_mode()</code>","text":"<p>Create an empty preview mode.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.empty_tutorial_mode","title":"<code>empty_tutorial_mode()</code>","text":"<p>Create an empty tutorial mode.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.empty_watch_mode","title":"<code>empty_watch_mode()</code>","text":"<p>Create an empty watch mode.</p>"},{"location":"reference/sonolus.script.globals/","title":"sonolus.script.globals","text":""},{"location":"reference/sonolus.script.globals/#sonolus.script.globals.level_data","title":"<code>level_data(cls)</code>","text":"<p>Define level data.</p> <p>Level data may only be modified during preprocessing.</p> Usage <pre><code>@level_data\nclass LevelData:\n    variable: int\n\nvariable = level_data(Array[int, 10])\n\ndef f():\n    LevelData.variable = 1\n    variable[0] = 2\n</code></pre>"},{"location":"reference/sonolus.script.globals/#sonolus.script.globals.level_memory","title":"<code>level_memory(cls)</code>","text":"<p>Define level memory.</p> <p>Level memory may be modified during gameplay in sequential callbacks (<code>preprocess</code>, <code>update_sequential</code>, <code>touch</code>).</p> Usage <pre><code>@level_memory\nclass LevelMemory:\n    variable: int\n\nvariable = level_data(Array[int, 10])\n\ndef f():\n    LevelMemory.variable = 1\n    variable[0] = 2\n</code></pre>"},{"location":"reference/sonolus.script.instruction/","title":"sonolus.script.instruction","text":""},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.Instruction","title":"<code>Instruction</code>","text":"<p>               Bases: <code>Record</code></p> <p>Tutorial instruction text.</p> Usage <pre><code>Instruction(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.Instruction.show","title":"<code>show()</code>","text":"<p>Show this instruction text.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.InstructionIcon","title":"<code>InstructionIcon</code>","text":"<p>               Bases: <code>Record</code></p> <p>Tutorial instruction icon.</p> Usage <pre><code>InstructionIcon(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.InstructionIcon.paint","title":"<code>paint(position, size, rotation, z, a)</code>","text":"<p>Paint this instruction icon.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Vec2</code> <p>The position of the icon.</p> required <code>size</code> <code>float</code> <p>The size of the icon.</p> required <code>rotation</code> <code>float</code> <p>The rotation of the icon.</p> required <code>z</code> <code>float</code> <p>The z-index of the icon.</p> required <code>a</code> <code>float</code> <p>The alpha of the icon.</p> required"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.StandardInstruction","title":"<code>StandardInstruction</code>","text":"<p>Standard instructions.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.StandardInstructionIcon","title":"<code>StandardInstructionIcon</code>","text":"<p>Standard instruction icons.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.clear_instruction","title":"<code>clear_instruction()</code>","text":"<p>Clear the current instruction text.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.instruction","title":"<code>instruction(name)</code>","text":"<p>Define an instruction with the given name.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.instruction_icon","title":"<code>instruction_icon(name)</code>","text":"<p>Define an instruction icon with the given name.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.instruction_icons","title":"<code>instruction_icons(cls)</code>","text":"<p>Decorator to define tutorial instruction icons.</p> Usage <pre><code>@instruction_icons\nclass InstructionIcons:\n    hand: StandardInstructionIcon.HAND\n    other_icon: InstructionIcon = instruction_icon(\"Other Icon\")\n</code></pre>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.instructions","title":"<code>instructions(cls)</code>","text":"<p>Decorator to define tutorial instructions.</p> Usage <pre><code>@instructions\nclass Instructions:\n    tap: StandardInstruction.TAP\n    other_instruction: InstructionText = instruction(\"Other Instruction\")\n</code></pre>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.show_instruction","title":"<code>show_instruction(inst)</code>","text":"<p>Show the given instruction text.</p>"},{"location":"reference/sonolus.script.interval/","title":"sonolus.script.interval","text":""},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval","title":"<code>Interval</code>","text":"<p>               Bases: <code>Record</code></p> <p>A closed interval.</p> Usage <pre><code>Interval(start: float, end: float)\n</code></pre>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.is_empty","title":"<code>is_empty: bool</code>  <code>property</code>","text":"<p>Whether the has a start greater than its end.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.length","title":"<code>length: float</code>  <code>property</code>","text":"<p>The length of the interval.</p> <p>May be negative if the end is less than the start.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.mid","title":"<code>mid: float</code>  <code>property</code>","text":"<p>The midpoint of the interval.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.tuple","title":"<code>tuple</code>  <code>property</code>","text":"<p>The interval as a tuple.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__add__","title":"<code>__add__(other)</code>","text":"<p>Add a value to both ends of the interval.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to add.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new interval with the value added to both ends.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__and__","title":"<code>__and__(other)</code>","text":"<p>Get the intersection of two intervals.</p> <p>The resulting interval will be empty and may have a negative length if the two intervals do not overlap.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self</code> <p>The other interval.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new interval representing the intersection of the two intervals.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if an item is within the interval.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Self | float | int</code> <p>The item to check. If it is an interval, it must be fully contained within this interval.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the item is within the interval, False otherwise.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__floordiv__","title":"<code>__floordiv__(other)</code>","text":"<p>Divide both ends of the interval by a value and floor the result.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to divide by.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new interval with both ends divided by the value and floored.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Multiply both ends of the interval by a value.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to multiply by.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new interval with both ends multiplied by the value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Subtract a value from both ends of the interval.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to subtract.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new interval with the value subtracted from both ends.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__truediv__","title":"<code>__truediv__(other)</code>","text":"<p>Divide both ends of the interval by a value.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to divide by.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new interval with both ends divided by the value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.clamp","title":"<code>clamp(x)</code>","text":"<p>Clamp a value to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to clamp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The clamped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.expand","title":"<code>expand(value)</code>","text":"<p>Expand the interval by a value on both ends.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float | int</code> <p>The value to expand by.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new interval with the value subtracted from the start and added to the end.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.lerp","title":"<code>lerp(x)</code>","text":"<p>Linearly interpolate a value within the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The interpolation factor.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.lerp_clamped","title":"<code>lerp_clamped(x)</code>","text":"<p>Linearly interpolate a value within the interval, clamped to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The interpolation factor.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.shrink","title":"<code>shrink(value)</code>","text":"<p>Shrink the interval by a value on both ends.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float | int</code> <p>The value to shrink by.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new interval with the value subtracted from the start and added to the end.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.unlerp","title":"<code>unlerp(x)</code>","text":"<p>Inverse linear interpolation of a value within the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to unlerp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The unlerped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.unlerp_clamped","title":"<code>unlerp_clamped(x)</code>","text":"<p>Inverse linear interpolation of a value within the interval, clamped to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to unlerp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The unlerped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.zero","title":"<code>zero()</code>  <code>classmethod</code>","text":"<p>Get an empty interval.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.clamp","title":"<code>clamp(x, a, b)</code>","text":"<p>Clamp a value to an interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to clamp.</p> required <code>a</code> <code>float</code> <p>The start of the interval.</p> required <code>b</code> <code>float</code> <p>The end of the interval.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The clamped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.lerp","title":"<code>lerp(a, b, x)</code>","text":"<p>Linearly interpolate between two values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>T</code> <p>The start value.</p> required <code>b</code> <code>T</code> <p>The end value.</p> required <code>x</code> <code>float</code> <p>The interpolation factor.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.lerp_clamped","title":"<code>lerp_clamped(a, b, x)</code>","text":"<p>Linearly interpolate between two values, clamped to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>T</code> <p>The start value.</p> required <code>b</code> <code>T</code> <p>The end value.</p> required <code>x</code> <code>float</code> <p>The interpolation factor.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.remap","title":"<code>remap(a, b, c, d, x)</code>","text":"<p>Remap a value from one interval to another.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The start of the input interval.</p> required <code>b</code> <code>float</code> <p>The end of the input interval.</p> required <code>c</code> <code>float</code> <p>The start of the output interval.</p> required <code>d</code> <code>float</code> <p>The end of the output interval.</p> required <code>x</code> <code>float</code> <p>The value to remap.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The remapped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.remap_clamped","title":"<code>remap_clamped(a, b, c, d, x)</code>","text":"<p>Remap a value from one interval to another, clamped to the output interval.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The start of the input interval.</p> required <code>b</code> <code>float</code> <p>The end of the input interval.</p> required <code>c</code> <code>float</code> <p>The start of the output interval.</p> required <code>d</code> <code>float</code> <p>The end of the output interval.</p> required <code>x</code> <code>float</code> <p>The value to remap.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The remapped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.unlerp","title":"<code>unlerp(a, b, x)</code>","text":"<p>Inverse linear interpolation.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The start value.</p> required <code>b</code> <code>float</code> <p>The end value.</p> required <code>x</code> <code>float</code> <p>The value to unlerp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The unlerped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.unlerp_clamped","title":"<code>unlerp_clamped(a, b, x)</code>","text":"<p>Inverse linear interpolation, clamped to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The start value.</p> required <code>b</code> <code>float</code> <p>The end value.</p> required <code>x</code> <code>float</code> <p>The value to unlerp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The unlerped value.</p>"},{"location":"reference/sonolus.script.iterator/","title":"sonolus.script.iterator","text":""},{"location":"reference/sonolus.script.iterator/#sonolus.script.iterator.SonolusIterator","title":"<code>SonolusIterator</code>","text":"<p>               Bases: <code>Iterator[T]</code></p> <p>Base class for Sonolus iterators.</p> <p>This class is used to define custom iterators that can be used in Sonolus.py.</p> <p>Inheritors must implement the <code>has_next</code>, <code>get</code>, and <code>advance</code> methods. The <code>__next__</code> and <code>__iter__</code> methods are implemented by default.</p> Usage <pre><code>class MyIterator(Record, SonolusIterator):\n    def has_next(self) -&gt; bool:\n        ...\n\n    def get(self) -&gt; Any:\n        ...\n\n    def advance(self):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.iterator/#sonolus.script.iterator.SonolusIterator.advance","title":"<code>advance()</code>  <code>abstractmethod</code>","text":"<p>Advance the iterator to the next element.</p> <p>Must not be called if <code>has_next</code> returns <code>False</code>.</p>"},{"location":"reference/sonolus.script.iterator/#sonolus.script.iterator.SonolusIterator.get","title":"<code>get()</code>  <code>abstractmethod</code>","text":"<p>Return the next element of the iterator.</p> <p>May be called multiple times before calling <code>advance</code>.</p> <p>Must not be called if <code>has_next</code> returns <code>False</code>.</p>"},{"location":"reference/sonolus.script.iterator/#sonolus.script.iterator.SonolusIterator.has_next","title":"<code>has_next()</code>  <code>abstractmethod</code>","text":"<p>Return whether the iterator has more elements.</p>"},{"location":"reference/sonolus.script.level/","title":"sonolus.script.level","text":""},{"location":"reference/sonolus.script.level/#sonolus.script.level.BpmChange","title":"<code>BpmChange</code>","text":"<p>               Bases: <code>PlayArchetype</code></p> <p>The standard bpm change archetype.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.ExportedLevel","title":"<code>ExportedLevel</code>","text":"<p>An exported Sonolus level.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.ExportedLevel.write_to_dir","title":"<code>write_to_dir(path)</code>","text":"<p>Write the exported level to a directory.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.Level","title":"<code>Level</code>","text":"<p>A Sonolus level.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the level.</p> required <code>title</code> <code>AnyText | None</code> <p>The title of the level.</p> <code>None</code> <code>rating</code> <code>int</code> <p>The rating of the level.</p> <code>0</code> <code>artists</code> <code>AnyText</code> <p>The artists of the level.</p> <code>'Unknown'</code> <code>author</code> <code>AnyText</code> <p>The author of the level.</p> <code>'Unknown'</code> <code>cover</code> <code>Asset | None</code> <p>The cover of the level.</p> <code>None</code> <code>bgm</code> <code>Asset | None</code> <p>The background music of the level.</p> <code>None</code> <code>data</code> <code>LevelData</code> <p>The data of the level.</p> required <code>use_skin</code> <code>str | None</code> <p>The skin to use, overriding the engine skin.</p> <code>None</code> <code>use_background</code> <code>str | None</code> <p>The background to use, overriding the engine background.</p> <code>None</code> <code>use_effect</code> <code>str | None</code> <p>The effect to use, overriding the engine effect.</p> <code>None</code> <code>use_particle</code> <code>str | None</code> <p>The particle to use, overriding the engine particle.</p> <code>None</code> <code>tags</code> <code>list[Tag] | None</code> <p>The tags of the level.</p> <code>None</code> <code>description</code> <code>AnyText | None</code> <p>The description of the level.</p> <code>None</code> <code>meta</code> <code>Any</code> <p>Additional metadata of the level.</p> <code>None</code>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.Level.export","title":"<code>export(engine_name)</code>","text":"<p>Export the level in a sonolus-pack compatible format.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>The name of the engine this level is for.</p> required <p>Returns:</p> Type Description <code>ExportedLevel</code> <p>The exported level.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.LevelData","title":"<code>LevelData</code>","text":"<p>The data of a Sonolus level.</p> <p>Parameters:</p> Name Type Description Default <code>bgm_offset</code> <code>float</code> <p>The background music audio offset.</p> required <code>entities</code> <code>list[PlayArchetype]</code> <p>The entities of the level.</p> required"},{"location":"reference/sonolus.script.level/#sonolus.script.level.TimescaleChange","title":"<code>TimescaleChange</code>","text":"<p>               Bases: <code>PlayArchetype</code></p> <p>The standard timescale change archetype.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.flatten_entities","title":"<code>flatten_entities(entities)</code>","text":"<p>Flatten a list of entities.</p> <p>Parameters:</p> Name Type Description Default <code>entities</code> <code>EntityListArg</code> <p>The list of entities.</p> required <p>Yields:</p> Type Description <code>PlayArchetype</code> <p>The flattened entities.</p>"},{"location":"reference/sonolus.script.metadata/","title":"sonolus.script.metadata","text":""},{"location":"reference/sonolus.script.metadata/#sonolus.script.metadata.Tag","title":"<code>Tag</code>","text":"<p>A tag for an engine or level.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>AnyText</code> <p>The title of the tag.</p> required <code>icon</code> <code>str | None</code> <p>The icon of the tag.</p> <code>None</code>"},{"location":"reference/sonolus.script.num/","title":"sonolus.script.num","text":""},{"location":"reference/sonolus.script.num/#doc_stubs.num.Num","title":"<code>Num</code>","text":"<p>               Bases: <code>int</code>, <code>bool</code>, <code>float</code></p> <p>Common type for numbers and booleans.</p> <p>See the relevant concepts page for more information.</p>"},{"location":"reference/sonolus.script.options/","title":"sonolus.script.options","text":""},{"location":"reference/sonolus.script.options/#sonolus.script.options.options","title":"<code>options(cls)</code>","text":"<p>Decorator to define options.</p> Usage <pre><code>@options\nclass Options:\n    slider_option: float = slider_option(\n        name='Slider Option',\n        standard=True,\n        advanced=False,\n        default=0.5,\n        min=0,\n        max=1,\n        step=0.1,\n        unit='unit',\n        scope='scope',\n    )\n    toggle_option: bool = toggle_option(\n        name='Toggle Option',\n        standard=True,\n        advanced=False,\n        default=True,\n        scope='scope',\n    )\n    select_option: int = select_option(\n        name='Select Option',\n        standard=True,\n        advanced=False,\n        default='value',\n        values=['value'],\n        scope='scope',\n    )\n</code></pre>"},{"location":"reference/sonolus.script.options/#sonolus.script.options.select_option","title":"<code>select_option(*, name=None, description=None, standard=False, advanced=False, default, values, scope=None)</code>","text":"<p>Define a select option.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name of the option.</p> <code>None</code> <code>description</code> <code>str | None</code> <p>The description of the option.</p> <code>None</code> <code>standard</code> <code>bool</code> <p>Whether the option is standard.</p> <code>False</code> <code>advanced</code> <code>bool</code> <p>Whether the option is advanced.</p> <code>False</code> <code>default</code> <code>str | int</code> <p>The default value of the option.</p> required <code>values</code> <code>list[str]</code> <p>The values of the option.</p> required <code>scope</code> <code>str | None</code> <p>The scope of the option.</p> <code>None</code>"},{"location":"reference/sonolus.script.options/#sonolus.script.options.slider_option","title":"<code>slider_option(*, name=None, description=None, standard=False, advanced=False, default, min, max, step, unit=None, scope=None)</code>","text":"<p>Define a slider option.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name of the option.</p> <code>None</code> <code>description</code> <code>str | None</code> <p>The description of the option.</p> <code>None</code> <code>standard</code> <code>bool</code> <p>Whether the option is standard.</p> <code>False</code> <code>advanced</code> <code>bool</code> <p>Whether the option is advanced.</p> <code>False</code> <code>default</code> <code>float</code> <p>The default value of the option.</p> required <code>min</code> <code>float</code> <p>The minimum value of the option.</p> required <code>max</code> <code>float</code> <p>The maximum value of the option.</p> required <code>step</code> <code>float</code> <p>The step value of the option.</p> required <code>unit</code> <code>str | None</code> <p>The unit of the option.</p> <code>None</code> <code>scope</code> <code>str | None</code> <p>The scope of the option.</p> <code>None</code>"},{"location":"reference/sonolus.script.options/#sonolus.script.options.toggle_option","title":"<code>toggle_option(*, name=None, description=None, standard=False, advanced=False, default, scope=None)</code>","text":"<p>Define a toggle option.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name of the option.</p> <code>None</code> <code>description</code> <code>str | None</code> <p>The description of the option.</p> <code>None</code> <code>standard</code> <code>bool</code> <p>Whether the option is standard.</p> <code>False</code> <code>advanced</code> <code>bool</code> <p>Whether the option is advanced.</p> <code>False</code> <code>default</code> <code>bool</code> <p>The default value of the option.</p> required <code>scope</code> <code>str | None</code> <p>The scope of the option.</p> <code>None</code>"},{"location":"reference/sonolus.script.particle/","title":"sonolus.script.particle","text":""},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.Particle","title":"<code>Particle</code>","text":"<p>               Bases: <code>Record</code></p> <p>A particle effect.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.Particle.is_available","title":"<code>is_available()</code>","text":"<p>Check if the particle effect is available.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.Particle.spawn","title":"<code>spawn(quad, duration, loop=False)</code>","text":"<p>Spawn the particle effect.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to spawn the particle effect on.</p> required <code>duration</code> <code>float</code> <p>The duration of the particle effect.</p> required <code>loop</code> <code>bool</code> <p>Whether to loop the particle effect.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>ParticleHandle</code> <code>ParticleHandle</code> <p>A handle to the spawned particle effect.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.ParticleHandle","title":"<code>ParticleHandle</code>","text":"<p>               Bases: <code>Record</code></p> <p>A handle to a looping particle effect.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.ParticleHandle.destroy","title":"<code>destroy()</code>","text":"<p>Destroy the particle effect.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.ParticleHandle.move","title":"<code>move(quad)</code>","text":"<p>Move the particle effect to a new location.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The new quad to move the particle effect to.</p> required"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.StandardParticle","title":"<code>StandardParticle</code>","text":"<p>Standard particles.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.particle","title":"<code>particle(name)</code>","text":"<p>Define a particle with the given name.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.particles","title":"<code>particles(cls)</code>","text":"<p>Decorator to define particles.</p> Usage <pre><code>@particles\nclass Particles:\n    tap: StandardParticle.NOTE_CIRCULAR_TAP_RED\n    other: Particle = particle(\"other\")\n</code></pre>"},{"location":"reference/sonolus.script.printing/","title":"sonolus.script.printing","text":""},{"location":"reference/sonolus.script.printing/#sonolus.script.printing.PrintColor","title":"<code>PrintColor</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Print color.</p>"},{"location":"reference/sonolus.script.printing/#sonolus.script.printing.PrintFormat","title":"<code>PrintFormat</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Print format.</p>"},{"location":"reference/sonolus.script.printing/#sonolus.script.printing.print_number","title":"<code>print_number(value, *, fmt, decimal_places=0, anchor, pivot, dimensions, rotation=0, color=PrintColor.THEME, alpha=1, horizontal_align=HorizontalAlign.LEFT, background=False)</code>","text":"<p>Print a number.</p> <p>Only supported in preview mode.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float</code> <p>The value to print.</p> required <code>fmt</code> <code>PrintFormat</code> <p>The print format.</p> required <code>decimal_places</code> <code>int</code> <p>The number of decimal places.</p> <code>0</code> <code>anchor</code> <code>Vec2</code> <p>The anchor.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot.</p> required <code>dimensions</code> <code>Vec2</code> <p>The dimensions.</p> required <code>rotation</code> <code>float</code> <p>The rotation.</p> <code>0</code> <code>color</code> <code>PrintColor</code> <p>The color.</p> <code>THEME</code> <code>alpha</code> <code>float</code> <p>The alpha.</p> <code>1</code> <code>horizontal_align</code> <code>HorizontalAlign</code> <p>The horizontal alignment.</p> <code>LEFT</code> <code>background</code> <code>bool</code> <p>Whether to show a background.</p> <code>False</code>"},{"location":"reference/sonolus.script.project/","title":"sonolus.script.project","text":""},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig","title":"<code>BuildConfig</code>  <code>dataclass</code>","text":"<p>A configuration for building an engine package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.FAST_PASSES","title":"<code>FAST_PASSES: Sequence[CompilerPass] = optimize.FAST_PASSES</code>  <code>class-attribute</code>","text":"<p>The list of compiler passes for faster builds.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.MINIMAL_PASSES","title":"<code>MINIMAL_PASSES: Sequence[CompilerPass] = optimize.MINIMAL_PASSES</code>  <code>class-attribute</code>","text":"<p>The minimal list of compiler passes.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.STANDARD_PASSES","title":"<code>STANDARD_PASSES: Sequence[CompilerPass] = optimize.STANDARD_PASSES</code>  <code>class-attribute</code>","text":"<p>The standard list of compiler passes.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.build_play","title":"<code>build_play: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to build the play package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.build_preview","title":"<code>build_preview: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to build the preview package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.build_tutorial","title":"<code>build_tutorial: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to build the tutorial package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.build_watch","title":"<code>build_watch: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to build the watch package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.passes","title":"<code>passes: Sequence[CompilerPass] = optimize.STANDARD_PASSES</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The list of compiler passes to use.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project","title":"<code>Project</code>","text":"<p>A Sonolus.py project.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>The engine of the project.</p> required <code>levels</code> <code>list[Level] | None</code> <p>The levels of the project.</p> <code>None</code> <code>resources</code> <code>PathLike | None</code> <p>The path to the resources of the project.</p> <code>None</code>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project.build","title":"<code>build(build_dir, config=None)</code>","text":"<p>Build the project.</p> <p>Parameters:</p> Name Type Description Default <code>build_dir</code> <code>PathLike</code> <p>The path to the build directory.</p> required <code>config</code> <code>BuildConfig | None</code> <p>The build configuration.</p> <code>None</code>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project.dev","title":"<code>dev(build_dir, port=8080, config=None)</code>","text":"<p>Start a development server for the project.</p> <p>Parameters:</p> Name Type Description Default <code>build_dir</code> <code>PathLike</code> <p>The path to the build directory.</p> required <code>port</code> <code>int</code> <p>The port of the development server.</p> <code>8080</code> <code>config</code> <code>BuildConfig | None</code> <p>The build configuration.</p> <code>None</code>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project.schema","title":"<code>schema()</code>","text":"<p>Generate the schema of the project.</p> <p>Returns:</p> Type Description <code>ProjectSchema</code> <p>The schema of the project.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project.with_levels","title":"<code>with_levels(levels)</code>","text":"<p>Create a new project with the specified levels.</p> <p>Parameters:</p> Name Type Description Default <code>levels</code> <code>list[Level]</code> <p>The levels of the project.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The new project.</p>"},{"location":"reference/sonolus.script.quad/","title":"sonolus.script.quad","text":""},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad","title":"<code>Quad</code>","text":"<p>               Bases: <code>Record</code></p> <p>A quad defined by its four corners.</p> Usage <pre><code>Quad(bl: Vec2, tl: Vec2, tr: Vec2, br: Vec2)\n</code></pre>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.bl","title":"<code>bl: Vec2</code>  <code>instance-attribute</code>","text":"<p>The bottom-left corner of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.br","title":"<code>br: Vec2</code>  <code>instance-attribute</code>","text":"<p>The bottom-right corner of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.center","title":"<code>center: Vec2</code>  <code>property</code>","text":"<p>The center of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.tl","title":"<code>tl: Vec2</code>  <code>instance-attribute</code>","text":"<p>The top-left corner of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.tr","title":"<code>tr: Vec2</code>  <code>instance-attribute</code>","text":"<p>The top-right corner of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.contains_point","title":"<code>contains_point(point)</code>","text":"<p>Check if the quad contains the given point.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Vec2</code> <p>The point to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the point is inside the quad, False otherwise.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.from_quad","title":"<code>from_quad(value)</code>  <code>classmethod</code>","text":"<p>Create a quad from a quad-like value.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.permute","title":"<code>permute(count=1)</code>","text":"<p>Perform a cyclic permutation of the quad's vertices and return a new quad.</p> <p>On a square, this operation is equivalent to rotating the square counterclockwise 90 degrees <code>count</code> times.</p> <p>Negative values of <code>count</code> are allowed and will rotate the quad clockwise.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of vertices to shift. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>Self</code> <p>The permuted quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.rotate","title":"<code>rotate(angle)</code>","text":"<p>Rotate the quad by the given angle about the origin and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.rotate_about","title":"<code>rotate_about(angle, /, pivot)</code>","text":"<p>Rotate the quad by the given angle about the given pivot and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.rotate_centered","title":"<code>rotate_centered(angle)</code>","text":"<p>Rotate the quad by the given angle about its center and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.scale","title":"<code>scale(factor)</code>","text":"<p>Scale the quad by the given factor about the origin and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.scale_about","title":"<code>scale_about(factor, /, pivot)</code>","text":"<p>Scale the quad by the given factor about the given pivot and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.scale_centered","title":"<code>scale_centered(factor)</code>","text":"<p>Scale the quad by the given factor about its center and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.translate","title":"<code>translate(translation)</code>","text":"<p>Translate the quad by the given translation and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect","title":"<code>Rect</code>","text":"<p>               Bases: <code>Record</code></p> <p>A rectangle defined by its top, right, bottom, and left edges.</p> Usage <pre><code>Rect(t: float, r: float, b: float, l: float)\n</code></pre>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.b","title":"<code>b: float</code>  <code>instance-attribute</code>","text":"<p>The bottom edge of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.bl","title":"<code>bl: Vec2</code>  <code>property</code>","text":"<p>The bottom-left corner of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.br","title":"<code>br: Vec2</code>  <code>property</code>","text":"<p>The bottom-right corner of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.center","title":"<code>center: Vec2</code>  <code>property</code>","text":"<p>The center of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.h","title":"<code>h: float</code>  <code>property</code>","text":"<p>The height of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.l","title":"<code>l: float</code>  <code>instance-attribute</code>","text":"<p>The left edge of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.r","title":"<code>r: float</code>  <code>instance-attribute</code>","text":"<p>The right edge of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.t","title":"<code>t: float</code>  <code>instance-attribute</code>","text":"<p>The top edge of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.tl","title":"<code>tl: Vec2</code>  <code>property</code>","text":"<p>The top-left corner of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.tr","title":"<code>tr: Vec2</code>  <code>property</code>","text":"<p>The top-right corner of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.w","title":"<code>w: float</code>  <code>property</code>","text":"<p>The width of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.as_quad","title":"<code>as_quad()</code>","text":"<p>Convert the rectangle to a <code>Quad</code>.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.contains_point","title":"<code>contains_point(point)</code>","text":"<p>Check if the rectangle contains the given point.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Vec2</code> <p>The point to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the point is inside the rectangle, False otherwise.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.expand","title":"<code>expand(expansion)</code>","text":"<p>Expand the rectangle by the given amount and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.from_center","title":"<code>from_center(center, dimensions)</code>  <code>classmethod</code>","text":"<p>Create a rectangle from its center and dimensions.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.scale","title":"<code>scale(factor)</code>","text":"<p>Scale the rectangle by the given factor about the origin and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.scale_about","title":"<code>scale_about(factor, /, pivot)</code>","text":"<p>Scale the rectangle by the given factor about the given pivot and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.scale_centered","title":"<code>scale_centered(factor)</code>","text":"<p>Scale the rectangle by the given factor about its center and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.shrink","title":"<code>shrink(shrinkage)</code>","text":"<p>Shrink the rectangle by the given amount and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.translate","title":"<code>translate(translation)</code>","text":"<p>Translate the rectangle by the given translation and return a new rectangle.</p>"},{"location":"reference/sonolus.script.record/","title":"sonolus.script.record","text":"<p>For usage details, see the corresponding concepts page.</p>"},{"location":"reference/sonolus.script.record/#sonolus.script.record.Record","title":"<code>Record</code>","text":"<p>               Bases: <code>GenericValue</code></p> <p>Base class for user-defined data structures.</p> Usage <p>A regular record: <pre><code>class MyRecord(Record):\n    field1: int\n    field2: bool\n</code></pre></p> <p>A generic record: <pre><code>class MyGenericRecord[T, U](Record):\n    field1: T\n    field2: U\n</code></pre></p>"},{"location":"reference/sonolus.script.record/#sonolus.script.record.Record.type_var_value","title":"<code>type_var_value(var)</code>  <code>classmethod</code>","text":"<p>Return the value of a type variable.</p> <p>Parameters:</p> Name Type Description Default <code>var</code> <code>TypeVar</code> <p>The type variable to get the value of.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value of the type variable.</p>"},{"location":"reference/sonolus.script.runtime/","title":"sonolus.script.runtime","text":""},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch","title":"<code>Touch</code>","text":"<p>               Bases: <code>Record</code></p> <p>Data of a touch event.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.angle","title":"<code>angle: float</code>  <code>instance-attribute</code>","text":"<p>The angle of the touch's movement.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.delta","title":"<code>delta: Vec2</code>  <code>instance-attribute</code>","text":"<p>The change in position of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.ended","title":"<code>ended: bool</code>  <code>instance-attribute</code>","text":"<p>Whether the touch has ended this frame.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.id","title":"<code>id: int</code>  <code>instance-attribute</code>","text":"<p>The unique identifier of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.position","title":"<code>position: Vec2</code>  <code>instance-attribute</code>","text":"<p>The current position of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.prev_position","title":"<code>prev_position: Vec2</code>  <code>property</code>","text":"<p>The previous position of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.speed","title":"<code>speed: float</code>  <code>instance-attribute</code>","text":"<p>The speed of the touch's movement.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.start_position","title":"<code>start_position: Vec2</code>  <code>instance-attribute</code>","text":"<p>The position the touch started.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.start_time","title":"<code>start_time: float</code>  <code>instance-attribute</code>","text":"<p>The time the touch started.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.started","title":"<code>started: bool</code>  <code>instance-attribute</code>","text":"<p>Whether the touch has started this frame.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.time","title":"<code>time: float</code>  <code>instance-attribute</code>","text":"<p>The time of the touch event.</p> <p>May remain constant while there is no movement.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.total_angle","title":"<code>total_angle: float</code>  <code>property</code>","text":"<p>The total angle of the touch's movement.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.total_delta","title":"<code>total_delta: Vec2</code>  <code>property</code>","text":"<p>The total change in position of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.velocity","title":"<code>velocity: Vec2</code>  <code>instance-attribute</code>","text":"<p>The velocity of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.aspect_ratio","title":"<code>aspect_ratio()</code>","text":"<p>Get the aspect ratio of the game.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.audio_offset","title":"<code>audio_offset()</code>","text":"<p>Get the audio offset of the game.</p> <p>Returns 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.background","title":"<code>background()</code>","text":"<p>Get the background quad.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.canvas","title":"<code>canvas()</code>","text":"<p>Get the preview canvas.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.delta_time","title":"<code>delta_time()</code>","text":"<p>Get the time elapsed since the last frame.</p> <p>Returns 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.input_offset","title":"<code>input_offset()</code>","text":"<p>Get the input offset of the game.</p> <p>Returns 0 in preview mode and tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_debug","title":"<code>is_debug()</code>","text":"<p>Check if the game is running in debug mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_multiplayer","title":"<code>is_multiplayer()</code>","text":"<p>Check if the game is running in multiplayer mode.</p> <p>Returns False if not in play mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_play","title":"<code>is_play()</code>","text":"<p>Check if the game is running in play mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_preprocessing","title":"<code>is_preprocessing()</code>","text":"<p>Check if the game is in the preprocessing stage.</p> <p>Returns True if the current callback is one of preprocess, spawn_order, spawn_time, or despawn_time.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_preview","title":"<code>is_preview()</code>","text":"<p>Check if the game is running in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_replay","title":"<code>is_replay()</code>","text":"<p>Check if the game is running in replay mode.</p> <p>Returns False if not in watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_skip","title":"<code>is_skip()</code>","text":"<p>Check if there was a time skip this frame.</p> <p>Returns False if not in watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_tutorial","title":"<code>is_tutorial()</code>","text":"<p>Check if the game is running in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_watch","title":"<code>is_watch()</code>","text":"<p>Check if the game is running in watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.level_life","title":"<code>level_life()</code>","text":"<p>Get the level life configuration.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.level_score","title":"<code>level_score()</code>","text":"<p>Get the level score configuration.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.navigation_direction","title":"<code>navigation_direction()</code>","text":"<p>Get the navigation direction of the tutorial.</p> <p>Returns 0 if not in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.particle_transform","title":"<code>particle_transform()</code>","text":"<p>Get the global particle transform.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.scaled_time","title":"<code>scaled_time()</code>","text":"<p>Get the current time of the game affected by the time scale.</p> <p>Returns the unscaled time in tutorial mode and 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.screen","title":"<code>screen()</code>","text":"<p>Get the screen boundaries as a rectangle.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.set_background","title":"<code>set_background(value)</code>","text":"<p>Set the background quad.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.set_particle_transform","title":"<code>set_particle_transform(value)</code>","text":"<p>Set the global particle transform.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.set_skin_transform","title":"<code>set_skin_transform(value)</code>","text":"<p>Set the global skin transform.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.skin_transform","title":"<code>skin_transform()</code>","text":"<p>Get the global skin transform.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.time","title":"<code>time()</code>","text":"<p>Get the current time of the game.</p> <p>Returns 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.touches","title":"<code>touches()</code>","text":"<p>Get the current touches of the game.</p>"},{"location":"reference/sonolus.script.sprite/","title":"sonolus.script.sprite","text":""},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.RenderMode","title":"<code>RenderMode</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Render mode for sprites.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.RenderMode.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the user's preferred render mode.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.RenderMode.LIGHTWEIGHT","title":"<code>LIGHTWEIGHT = 'lightweight'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the lightweight render mode with projective interpolation of textures.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.RenderMode.STANDARD","title":"<code>STANDARD = 'standard'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the standard render mode with bilinear interpolation of textures.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite","title":"<code>Sprite</code>","text":"<p>               Bases: <code>Record</code></p> <p>Skin sprite.</p> Usage <pre><code>Sprite(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.is_available","title":"<code>is_available: bool</code>  <code>property</code>","text":"<p>Check if the sprite is available.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw","title":"<code>draw(quad, z=0.0, a=1.0)</code>","text":"<p>Draw the sprite.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_b","title":"<code>draw_curved_b(quad, cp, n, z=0.0, a=1.0)</code>","text":"<p>Draw the sprite with a curved bottom with a quadratic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp</code> <code>Vec2</code> <p>The control point of the curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_bt","title":"<code>draw_curved_bt(quad, cp1, cp2, n, z=0.0, a=1.0)</code>","text":"<p>Draw the sprite with a curved bottom and top with a cubic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp1</code> <code>Vec2</code> <p>The control point of the bottom curve.</p> required <code>cp2</code> <code>Vec2</code> <p>The control point of the top curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_l","title":"<code>draw_curved_l(quad, cp, n, z=0.0, a=1.0)</code>","text":"<p>Draw the sprite with a curved left side with a quadratic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp</code> <code>Vec2</code> <p>The control point of the curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_lr","title":"<code>draw_curved_lr(quad, cp1, cp2, n, z=0.0, a=1.0)</code>","text":"<p>Draw the sprite with a curved left and right side with a cubic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp1</code> <code>Vec2</code> <p>The control point of the left curve.</p> required <code>cp2</code> <code>Vec2</code> <p>The control point of the right curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_r","title":"<code>draw_curved_r(quad, cp, n, z=0.0, a=1.0)</code>","text":"<p>Draw the sprite with a curved right side with a quadratic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp</code> <code>Vec2</code> <p>The control point of the curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_t","title":"<code>draw_curved_t(quad, cp, n, z=0.0, a=1.0)</code>","text":"<p>Draw the sprite with a curved top with a quadratic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp</code> <code>Vec2</code> <p>The control point of the curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.StandardSprite","title":"<code>StandardSprite</code>","text":"<p>Standard skin sprites.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.skin","title":"<code>skin(cls)</code>","text":"<p>Decorator to define a skin.</p> Usage <pre><code>@skin\nclass Skin:\n    render_mode: RenderMode\n\n    note: StandardSprite.NOTE_HEAD_RED\n    other: Sprite = skin_sprite(\"other\")\n</code></pre>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.sprite","title":"<code>sprite(name)</code>","text":"<p>Define a sprite with the given name.</p>"},{"location":"reference/sonolus.script.stream/","title":"sonolus.script.stream","text":""},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream","title":"<code>Stream</code>","text":"<p>               Bases: <code>Record</code></p> <p>Represents a stream.</p> <p>Most users should use <code>@streams</code> to declare streams and stream groups rather than using this class directly.</p> <p>If used directly, it is important that streams do not overlap. No other streams should have an offset in <code>range(self.offset, self.offset + max(1, sizeof(self.element_type())))</code>, or they will overlap and interfere with each other.</p> Usage <p>Declaring a stream: <pre><code>@streams\nclass Streams:\n    my_stream_1: Stream[Num]  # A stream of Num values\n    my_stream_2: Stream[Vec2]  # A stream of Vec2 values\n</code></pre></p> <p>Directly creating a stream (advanced usage): <pre><code>stream = Stream[Num](offset=0)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if the stream contains the key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Get the value corresponding to the key.</p> <p>If the key is not in the stream, interpolates linearly between surrounding values. If the stream is empty, returns the zero value of the element type.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>Set the value corresponding to the key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.backing_size","title":"<code>backing_size()</code>  <code>classmethod</code>","text":"<p>Return the number of underlying single-value streams backing this stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.element_type","title":"<code>element_type()</code>  <code>classmethod</code>","text":"<p>Return the type of elements in this array type.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.get_next","title":"<code>get_next(key)</code>","text":"<p>Get the value corresponding to the next key.</p> <p>If there is no next key, returns the value at the given key. Equivalent to <code>self[self.next_key(key)]</code>.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.get_next_inclusive","title":"<code>get_next_inclusive(key)</code>","text":"<p>Get the value corresponding to the next key, or the value at the given key if it is in the stream.</p> <p>Equivalent to <code>self[self.next_key_inclusive(key)]</code>.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.get_previous","title":"<code>get_previous(key)</code>","text":"<p>Get the value corresponding to the previous key.</p> <p>If there is no previous key, returns the value at the given key. Equivalent to <code>self[self.previous_key(key)]</code>.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.has_next_key","title":"<code>has_next_key(key)</code>","text":"<p>Check if there is a next key after the given key in the stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.has_previous_key","title":"<code>has_previous_key(key)</code>","text":"<p>Check if there is a previous key before the given key in the stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_items_from","title":"<code>iter_items_from(start)</code>","text":"<p>Iterate over the items in the stream in ascending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor key, value in stream.iter_items_from(0):\n    do_something(key, value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_items_from_desc","title":"<code>iter_items_from_desc(start)</code>","text":"<p>Iterate over the items in the stream in descending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor key, value in stream.iter_items_from_desc(0):\n    do_something(key, value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_keys_from","title":"<code>iter_keys_from(start)</code>","text":"<p>Iterate over the keys in the stream in ascending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor key in stream.iter_keys_from(0):\n    do_something(key)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_keys_from_desc","title":"<code>iter_keys_from_desc(start)</code>","text":"<p>Iterate over the keys in the stream in descending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor key in stream.iter_keys_from_desc(0):\n    do_something(key)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_values_from","title":"<code>iter_values_from(start)</code>","text":"<p>Iterate over the values in the stream in ascending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor value in stream.iter_values_from(0):\n    do_something(value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_values_from_desc","title":"<code>iter_values_from_desc(start)</code>","text":"<p>Iterate over the values in the stream in descending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor value in stream.iter_values_from_desc(0):\n    do_something(value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.next_key","title":"<code>next_key(key)</code>","text":"<p>Get the next key, or the key unchanged if it is the last key or the stream is empty.</p> <p>If the key is in the stream and there is a next key, returns the next key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.next_key_inclusive","title":"<code>next_key_inclusive(key)</code>","text":"<p>Like <code>next_key</code>, but returns the key itself if it is in the stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.previous_key","title":"<code>previous_key(key)</code>","text":"<p>Get the previous key, or the key unchanged if it is the first key or the stream is empty.</p> <p>If the key is in the stream and there is a previous key, returns the previous key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.previous_key_inclusive","title":"<code>previous_key_inclusive(key)</code>","text":"<p>Like <code>previous_key</code>, but returns the key itself if it is in the stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup","title":"<code>StreamGroup</code>","text":"<p>               Bases: <code>Record</code></p> <p>Represents a group of streams.</p> <p>Most users should use <code>@streams</code> to declare stream groups rather than using this class directly.</p> Usage <p>Declaring a stream group: <pre><code>@streams\nclass Streams:\n    my_group_1: StreamGroup[Num, 10]  # A group of 10 Num streams\n    my_group_2: StreamGroup[Vec2, 5]  # A group of 5 Vec2 streams\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if the group contains the stream with the given index.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.__getitem__","title":"<code>__getitem__(index)</code>","text":"<p>Get the stream at the given index.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.backing_size","title":"<code>backing_size()</code>  <code>classmethod</code>","text":"<p>Return the number of underlying single-value streams backing this stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.element_type","title":"<code>element_type()</code>  <code>classmethod</code>","text":"<p>Return the type of elements in this group.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.size","title":"<code>size()</code>  <code>classmethod</code>","text":"<p>Return the size of the group.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.streams","title":"<code>streams(cls)</code>","text":"<p>Decorator to define streams and stream groups.</p> <p>Streams and stream groups are declared by annotating class attributes with <code>Stream</code> or <code>StreamGroup</code>.</p> <p>Other types are also supported in the form of data fields. They may be used to store additional data to export from Play to Watch mode.</p> <p>In either case, data is write-only in Play mode and read-only in Watch mode.</p> <p>This should only be used once in most projects, as multiple decorated classes will overlap with each other and interfere when both are used at the same time.</p> <p>For backwards compatibility, new streams and stream groups should be added to the end of existing ones, and lengths and element types of existing streams and stream groups should not be changed. Otherwise, old replays may not work on new versions of the engine.</p> Usage <pre><code>@streams\nclass Streams:\n    stream_1: Stream[Num]  # A stream of Num values\n    stream_2: Stream[Vec2]  # A stream of Vec2 values\n    group_1: StreamGroup[Num, 10]  # A group of 10 Num streams\n    group_2: StreamGroup[Vec2, 5]  # A group of 5 Vec2 streams\n\n    data_field_1: Num  # A data field of type Num\n    data_field_2: Vec2  # A data field of type Vec2\n</code></pre>"},{"location":"reference/sonolus.script.text/","title":"sonolus.script.text","text":""},{"location":"reference/sonolus.script.text/#sonolus.script.text.StandardText","title":"<code>StandardText</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Standard text constants.</p>"},{"location":"reference/sonolus.script.timing/","title":"sonolus.script.timing","text":""},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.beat_to_bpm","title":"<code>beat_to_bpm(beat)</code>","text":"<p>Get the bpm at the given beat.</p> <p>Parameters:</p> Name Type Description Default <code>beat</code> <code>float</code> <p>The beat to get the bpm at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The bpm at the given beat.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.beat_to_starting_beat","title":"<code>beat_to_starting_beat(beat)</code>","text":"<p>Get the starting beat of the bpm section at the given beat.</p> <p>I.e. the beat of the bpm change at or immediately before the given beat.</p> <p>Parameters:</p> Name Type Description Default <code>beat</code> <code>float</code> <p>The beat to get the starting beat of the bpm section at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The starting beat of the bpm section at the given beat.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.beat_to_starting_time","title":"<code>beat_to_starting_time(beat)</code>","text":"<p>Get the starting time of the bpm section at the given beat.</p> <p>I.e. the time of the bpm change at or immediately before the given beat.</p> <p>Parameters:</p> Name Type Description Default <code>beat</code> <code>float</code> <p>The beat to get the starting time of the bpm section at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The starting time of the bpm section at the given beat.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.beat_to_time","title":"<code>beat_to_time(beat)</code>","text":"<p>Get the time at the given beat.</p> <p>Parameters:</p> Name Type Description Default <code>beat</code> <code>float</code> <p>The beat to get the time at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The time at the given beat.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.time_to_scaled_time","title":"<code>time_to_scaled_time(time)</code>","text":"<p>Get the scaled (timescale adjusted) time at the given time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time to get the scaled time at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The scaled (timescale adjusted) time at the given time.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.time_to_starting_scaled_time","title":"<code>time_to_starting_scaled_time(time)</code>","text":"<p>Get the starting scaled (timescale adjusted) time at the given time.</p> <p>I.e. the scaled time of the timescale change at or immediately before the given time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time to get the starting scaled time at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The starting scaled time at the given time.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.time_to_starting_time","title":"<code>time_to_starting_time(time)</code>","text":"<p>Get the starting time of the timescale section at the given time.</p> <p>I.e. the time of the timescale change at or immediately before the given time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time to get the starting time of the timescale section at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The starting time of the timescale section at the given time.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.time_to_timescale","title":"<code>time_to_timescale(time)</code>","text":"<p>Get the timescale at the given time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time to get the timescale at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The timescale at the given time.</p>"},{"location":"reference/sonolus.script.transform/","title":"sonolus.script.transform","text":""},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d","title":"<code>Transform2d</code>","text":"<p>               Bases: <code>Record</code></p> <p>A transformation matrix for 2D points.</p> Usage <pre><code>Transform2d.new()\n</code></pre>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.compose","title":"<code>compose(other)</code>","text":"<p>Compose with another transform which is applied after this transform and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self</code> <p>The other transform to compose with.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform resulting from the composition.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.compose_before","title":"<code>compose_before(other)</code>","text":"<p>Compose with another transform which is applied before this transform and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self</code> <p>The other transform to compose with.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform resulting from the composition.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.inverse_perspective_x","title":"<code>inverse_perspective_x(foreground_x, vanishing_point)</code>","text":"<p>Apply the inverse of a perspective transformation along the x-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_x</code> <code>float</code> <p>The foreground x-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after applying the inverse perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.inverse_perspective_y","title":"<code>inverse_perspective_y(foreground_y, vanishing_point)</code>","text":"<p>Apply the inverse of a perspective transformation along the y-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_y</code> <code>float</code> <p>The foreground y-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after applying the inverse perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.new","title":"<code>new()</code>  <code>classmethod</code>","text":"<p>Create a new identity transform.</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new identity transform.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.normalize","title":"<code>normalize()</code>","text":"<p>Normalize the transform to have a 1 in the bottom right corner and return a new transform.</p> <p>This may fail in some special cases involving perspective transformations where the bottom right corner is 0.</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new normalized transform.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.perspective_x","title":"<code>perspective_x(foreground_x, vanishing_point)</code>","text":"<p>Apply a perspective transformation along the x-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_x</code> <code>float</code> <p>The foreground x-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.perspective_y","title":"<code>perspective_y(foreground_y, vanishing_point)</code>","text":"<p>Apply a perspective transformation along the y-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_y</code> <code>float</code> <p>The foreground y-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.rotate","title":"<code>rotate(angle)</code>","text":"<p>Rotate about the origin and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after rotation.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.rotate_about","title":"<code>rotate_about(angle, /, pivot)</code>","text":"<p>Rotate about the pivot and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot point for rotation.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after rotation.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.scale","title":"<code>scale(factor)</code>","text":"<p>Scale about the origin and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>Vec2</code> <p>The scale factor vector.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after scaling.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.scale_about","title":"<code>scale_about(factor, /, pivot)</code>","text":"<p>Scale about the pivot and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>Vec2</code> <p>The scale factor vector.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot point for scaling.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after scaling.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.shear_x","title":"<code>shear_x(m)</code>","text":"<p>Shear along the x-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>float</code> <p>The shear factor along the x-axis.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after shearing.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.shear_y","title":"<code>shear_y(m)</code>","text":"<p>Shear along the y-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>float</code> <p>The shear factor along the y-axis.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after shearing.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.simple_perspective_x","title":"<code>simple_perspective_x(x)</code>","text":"<p>Apply perspective along the x-axis with vanishing point at the given x coordinate and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The x coordinate of the vanishing point.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.simple_perspective_y","title":"<code>simple_perspective_y(y)</code>","text":"<p>Apply perspective along the y-axis with vanishing point at the given y coordinate and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>float</code> <p>The y coordinate of the vanishing point.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.transform_quad","title":"<code>transform_quad(quad)</code>","text":"<p>Transform a <code>Quad</code> and return a new <code>Quad</code>.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to transform.</p> required <p>Returns:</p> Type Description <code>Quad</code> <p>A new transformed quad.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.transform_vec","title":"<code>transform_vec(v)</code>","text":"<p>Transform a <code>Vec2</code> and return a new <code>Vec2</code>.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>Vec2</code> <p>The vector to transform.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new transformed vector.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.translate","title":"<code>translate(translation)</code>","text":"<p>Translate along the x and y axes and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Vec2</code> <p>The translation vector.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new transform after translation.</p>"},{"location":"reference/sonolus.script.ui/","title":"sonolus.script.ui","text":""},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.EaseType","title":"<code>EaseType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>The easing function to use.</p>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiAnimation","title":"<code>UiAnimation</code>  <code>dataclass</code>","text":"<p>Animation configuration for UI elements.</p> <p>Parameters:</p> Name Type Description Default <code>scale</code> <code>UiAnimationTween</code> <p>The animation applied to scale.</p> required <code>alpha</code> <code>UiAnimationTween</code> <p>The animation applied to alpha.</p> required"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiAnimationTween","title":"<code>UiAnimationTween</code>  <code>dataclass</code>","text":"<p>Tween animation configuration for UI elements.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The initial value.</p> required <code>end</code> <code>float</code> <p>The final value.</p> required <code>duration</code> <code>float</code> <p>The duration of the animation.</p> required <code>ease</code> <code>EaseType</code> <p>The easing function to use.</p> required"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiConfig","title":"<code>UiConfig</code>  <code>dataclass</code>","text":"<p>Configuration for UI elements.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str | None</code> <p>The scope of the configuration.</p> <code>None</code> <code>primary_metric</code> <code>UiMetric</code> <p>The primary metric to display.</p> <code>ARCADE</code> <code>secondary_metric</code> <code>UiMetric</code> <p>The secondary metric to display.</p> <code>LIFE</code> <code>menu_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for the menu.</p> <code>UiVisibility()</code> <code>judgment_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for judgments.</p> <code>UiVisibility()</code> <code>combo_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for the combo.</p> <code>UiVisibility()</code> <code>primary_metric_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for the primary metric.</p> <code>UiVisibility()</code> <code>secondary_metric_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for the secondary metric.</p> <code>UiVisibility()</code> <code>progress_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for progress.</p> <code>UiVisibility()</code> <code>tutorial_navigation_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for tutorial navigation.</p> <code>UiVisibility()</code> <code>tutorial_instruction_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for tutorial instructions.</p> <code>UiVisibility()</code> <code>judgment_animation</code> <code>UiAnimation</code> <p>The animation configuration for judgments.</p> <code>lambda: UiAnimation(scale=UiAnimationTween(0, 1, 0.1, OUT_CUBIC), alpha=UiAnimationTween(1, 0, 0.3, NONE))()</code> <code>combo_animation</code> <code>UiAnimation</code> <p>The animation configuration for the combo.</p> <code>lambda: UiAnimation(scale=UiAnimationTween(1.2, 1, 0.2, IN_CUBIC), alpha=UiAnimationTween(1, 1, 0, NONE))()</code> <code>judgment_error_style</code> <code>UiJudgmentErrorStyle</code> <p>The style of the judgment error.</p> <code>LATE</code> <code>judgment_error_placement</code> <code>UiJudgmentErrorPlacement</code> <p>The placement of the judgment error.</p> <code>TOP</code> <code>judgment_error_min</code> <code>float</code> <p>The minimum judgment error.</p> <code>0.0</code>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiJudgmentErrorPlacement","title":"<code>UiJudgmentErrorPlacement</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>The placement of the judgment error.</p>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiJudgmentErrorStyle","title":"<code>UiJudgmentErrorStyle</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>The style of the judgment error.</p> <p>The name of each member refers to what's used for positive (late) judgment errors.</p>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiMetric","title":"<code>UiMetric</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>A metric to display on the UI.</p>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiVisibility","title":"<code>UiVisibility</code>  <code>dataclass</code>","text":"<p>Visibility configuration for UI elements.</p> <p>Parameters:</p> Name Type Description Default <code>scale</code> <code>float</code> <p>The scale of the element.</p> <code>1.0</code> <code>alpha</code> <code>float</code> <p>The alpha of the element.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.values/","title":"sonolus.script.values","text":""},{"location":"reference/sonolus.script.values/#sonolus.script.values.alloc","title":"<code>alloc(type_)</code>","text":"<p>Return an uninitialized instance of the given type.</p> <p>Use this carefully as reading from uninitialized memory can lead to unexpected behavior.</p>"},{"location":"reference/sonolus.script.values/#sonolus.script.values.copy","title":"<code>copy(value)</code>","text":"<p>Make a deep copy of the given value.</p>"},{"location":"reference/sonolus.script.values/#sonolus.script.values.sizeof","title":"<code>sizeof(type_)</code>","text":"<p>Return the size of the given type.</p>"},{"location":"reference/sonolus.script.values/#sonolus.script.values.swap","title":"<code>swap(a, b)</code>","text":"<p>Swap the values of the two given arguments.</p>"},{"location":"reference/sonolus.script.values/#sonolus.script.values.zeros","title":"<code>zeros(type_)</code>","text":"<p>Make a new instance of the given type initialized with zeros.</p>"},{"location":"reference/sonolus.script.vec/","title":"sonolus.script.vec","text":""},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2","title":"<code>Vec2</code>","text":"<p>               Bases: <code>Record</code></p> <p>A 2D vector.</p> Usage <pre><code>Vec2(x: float, y: float)\n</code></pre>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.angle","title":"<code>angle: Num</code>  <code>property</code>","text":"<p>Calculate the angle of the vector in radians from the positive x-axis.</p> <p>Returns:</p> Type Description <code>Num</code> <p>The angle of the vector in radians.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.magnitude","title":"<code>magnitude: Num</code>  <code>property</code>","text":"<p>Calculate the magnitude (length) of the vector.</p> <p>Returns:</p> Type Description <code>Num</code> <p>The magnitude of the vector.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.tuple","title":"<code>tuple: tuple[float, float]</code>  <code>property</code>","text":"<p>Return the vector as a tuple (x, y).</p> <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>A tuple representation of the vector.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__add__","title":"<code>__add__(other)</code>","text":"<p>Add this vector to another vector and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self</code> <p>The vector to add.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new vector resulting from the addition.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Multiply this vector by another vector or a scalar and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self | float</code> <p>The vector or scalar to multiply by.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new vector resulting from the multiplication.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__neg__","title":"<code>__neg__()</code>","text":"<p>Negate the vector (invert the direction) and return a new vector.</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector with inverted direction.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Subtract another vector from this vector and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self</code> <p>The vector to subtract.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new vector resulting from the subtraction.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__truediv__","title":"<code>__truediv__(other)</code>","text":"<p>Divide this vector by another vector or a scalar and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self | float</code> <p>The vector or scalar to divide by.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new vector resulting from the division.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.dot","title":"<code>dot(other)</code>","text":"<p>Calculate the dot product of this vector with another vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self</code> <p>The other vector to calculate the dot product with.</p> required <p>Returns:</p> Type Description <code>Num</code> <p>The dot product of the two vectors.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.down","title":"<code>down()</code>  <code>classmethod</code>","text":"<p>Return a vector pointing downwards (x=0, y=-1).</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector pointing downwards.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.left","title":"<code>left()</code>  <code>classmethod</code>","text":"<p>Return a vector pointing to the left (x=-1, y=0).</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector pointing to the left.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.normalize","title":"<code>normalize()</code>","text":"<p>Normalize the vector (set the magnitude to 1) and return a new vector.</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector with magnitude 1.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.one","title":"<code>one()</code>  <code>classmethod</code>","text":"<p>Return a vector with x and y set to 1.</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector with x=1 and y=1.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.orthogonal","title":"<code>orthogonal()</code>","text":"<p>Return a vector orthogonal to this vector.</p> <p>The orthogonal vector is rotated 90 degrees counter-clockwise from this vector.</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector orthogonal to this vector.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.right","title":"<code>right()</code>  <code>classmethod</code>","text":"<p>Return a vector pointing to the right (x=1, y=0).</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector pointing to the right.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.rotate","title":"<code>rotate(angle)</code>","text":"<p>Rotate the vector by a given angle in radians and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>Num</code> <p>The angle to rotate the vector by, in radians.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new vector rotated by the given angle.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.rotate_about","title":"<code>rotate_about(angle, pivot)</code>","text":"<p>Rotate the vector about a pivot by a given angle in radians and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>Num</code> <p>The angle to rotate the vector by, in radians.</p> required <code>pivot</code> <code>Self</code> <p>The pivot point to rotate about.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new vector rotated about the pivot by the given angle.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.up","title":"<code>up()</code>  <code>classmethod</code>","text":"<p>Return a vector pointing upwards (x=0, y=1).</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector pointing upwards.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.zero","title":"<code>zero()</code>  <code>classmethod</code>","text":"<p>Return a vector with x and y set to 0.</p> <p>Returns:</p> Type Description <code>Self</code> <p>A new vector with x=0 and y=0.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.pnpoly","title":"<code>pnpoly(vertices, test)</code>","text":"<p>Check if a point is inside a polygon.</p> <p>No guaranteed behavior for points on the edges or very close to the edges.</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>ArrayLike[Vec2] | tuple[Vec2, ...]</code> <p>The vertices of the polygon.</p> required <code>test</code> <code>Vec2</code> <p>The point to test.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether the point is inside the polygon.</p>"}]}