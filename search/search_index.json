{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sonolus.py","text":"<p>Sonolus.py is a Python library for creating Sonolus engines.</p>"},{"location":"#installation","title":"Installation","text":"<p>Sonolus.py is available on PyPI and can be installed using a package manager like pip.</p> pipuv <pre><code>pip install sonolus.py\n</code></pre> <pre><code>uv add sonolus.py\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new to Sonolus.py, the guide section is a good place to start. It provides an introduction to various aspects of making a Sonolus.py engine.</p> <p>For a ready-to-use example, the pydori engine is a Sonolus.py engine that  implements a Bandori-style (vertical scrolling rhythm game) gameplay and is intended to serve as a reference  implementation of a Sonolus.py engine.</p> <p>When creating a new project, you may want to use the new project template.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Overview: High-level overview of Sonolus.py.</li> <li>Concepts: Detailed information on concepts and usage.</li> <li>Reference: Detailed information on included classes and functions.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#093","title":"0.9.3","text":"<ul> <li>Added support for string use item values in levels</li> </ul>"},{"location":"changelog/#092","title":"0.9.2","text":"<ul> <li>Fixed dev server sometimes not exiting without further input upon a keyboard interrupt</li> </ul>"},{"location":"changelog/#091","title":"0.9.1","text":"<ul> <li>Added project urls</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":"<ul> <li>New dev server cli with faster rebuild times</li> <li>Performance improvements</li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":"<ul> <li>Changelog introduced</li> <li>Fixed some errors when iterating over iterators that are statically determined to be empty</li> <li>Added <code>Rect.from_margin(...)</code></li> <li>Added <code>SpriteGroup</code>, <code>EffectGroup</code>, and   <code>ParticleGroup</code> for array-like access to sprites, effects, and particles</li> <li>Added mid-edge properties like <code>Quad.mt</code> and <code>Rect.mb</code></li> <li>Added a warning when an invalid <code>item.json</code> is found when loading resources</li> </ul>"},{"location":"concepts/","title":"Concepts","text":"<p>This section provides a reference for the concepts and features of Sonolus.py.</p> <p>It is not intended to serve as a tutorial or introduction, and assumes familiarity with Python and Sonolus.py.</p> <p>For information on how to get started with Sonolus.py, see the home page.</p>"},{"location":"concepts/builtins/","title":"Builtins","text":"<p>Sonolus.py comes with support for a number of built-in functions. The supported functions and parameters are listed below.</p> <ul> <li><code>abs(x)</code></li> <li><code>bool(object)</code></li> <li><code>callable(object)</code></li> <li><code>enumerate(iterable, start=0)</code></li> <li><code>filter(function, iterable)</code></li> <li><code>float(x)</code> (for a num argument)</li> <li><code>int(x)</code> (for a num argument)</li> <li><code>isinstance(object, classinfo)</code></li> <li><code>issubclass(class, classinfo)</code></li> <li><code>iter(iterable)</code></li> <li><code>len(s)</code></li> <li><code>map(function, iterable)</code></li> <li><code>max(iterable, *, default=..., key=None)</code>, <code>max(arg1, arg2, *args, key=None)</code></li> <li><code>min(iterable, *, default=..., key=None)</code>, <code>min(arg1, arg2, *args, key=None)</code></li> <li><code>next(iterator)</code></li> <li><code>sum(iterable, start=0)</code></li> <li><code>range(stop)</code>, <code>range(start, stop[, step])</code></li> <li><code>reversed(seq)</code></li> <li><code>round(number[, ndigits])</code></li> <li><code>super(type[, object-or-type])</code></li> <li><code>zip(*iterables)</code></li> </ul>"},{"location":"concepts/builtins/#standard-library-modules","title":"Standard library modules","text":"<p>Sonolus.py also comes with support for some standard library modules.</p>"},{"location":"concepts/builtins/#math","title":"math","text":"<ul> <li><code>sin(x)</code></li> <li><code>cos(x)</code></li> <li><code>tan(x)</code></li> <li><code>asin(x)</code></li> <li><code>acos(x)</code></li> <li><code>atan(x)</code></li> <li><code>atan2(y, x)</code></li> <li><code>sinh(x)</code></li> <li><code>cosh(x)</code></li> <li><code>tanh(x)</code></li> <li><code>floor(x)</code></li> <li><code>ceil(x)</code></li> <li><code>trunc(x)</code></li> <li><code>log(x[, base])</code></li> <li><code>sqrt(x)</code></li> <li><code>degrees(x)</code></li> <li><code>radians(x)</code></li> <li><code>pi</code></li> <li><code>e</code></li> <li><code>tau</code></li> <li><code>inf</code></li> </ul>"},{"location":"concepts/builtins/#random","title":"random","text":"<ul> <li><code>randrange(stop)</code>, <code>random.randrange(start, stop[, step])</code></li> <li><code>randint(a, b)</code></li> <li><code>choice(seq)</code></li> <li><code>shuffle(seq)</code></li> <li><code>random()</code> (does not include 1)</li> <li><code>uniform(a, b)</code> (may include <code>b</code> where Python normally doesn't)</li> </ul> <p>Creating <code>Random</code> instances is not supported.</p>"},{"location":"concepts/builtins/#typing","title":"typing","text":"<ul> <li><code>assert_never(arg, /)</code></li> </ul>"},{"location":"concepts/cli/","title":"Command Line","text":"<p>The Sonolus.py CLI provides commands to run and build Sonolus scripts.</p>"},{"location":"concepts/cli/#starting-a-development-server","title":"Starting a development server","text":"<p>To start a development server, run the following command in the root directory of your project:</p> <pre><code>sonolus-py dev\n</code></pre>"},{"location":"concepts/cli/#building-the-project","title":"Building the project","text":"<p>To build the project, run the following command in the root directory of your project:</p> <pre><code>sonolus-py build\n</code></pre>"},{"location":"concepts/cli/#checking-for-errors-without-building","title":"Checking for errors without building","text":"<p>To check for errors, run the following command in the root directory of your project:</p> <pre><code>sonolus-py check\n</code></pre>"},{"location":"concepts/cli/#outputting-the-level-schema","title":"Outputting the level schema","text":"<p>To output the level schema of the project, run the following command in the root directory of your project:</p> <pre><code>sonolus-py schema\n</code></pre>"},{"location":"concepts/cli/#programmatic-usage","title":"Programmatic usage","text":"<p>The same functionality can be accessed programmatically as methods of a project.</p> <p>See Project for more information.</p>"},{"location":"concepts/constructs/","title":"Constructs","text":"<p>Sonolus.py functions as a compiler from Python to Sonolus nodes. While most standard Python constructs are supported, there are some limitations compared to standard Python. The following sections outline what Sonolus.py supports and  how it differs from standard Python.</p>"},{"location":"concepts/constructs/#key-differences","title":"Key Differences","text":"<ul> <li>Non-num variables must have a single live definition.<ul> <li>If there are multiple definitions <code>var = ...</code> for a variable, the compiler must be able to determine that a single   one is active whenever the variable is used.</li> </ul> </li> <li>Conditional branches may be eliminated if they are determined to be unreachable</li> <li>Functions with non-num return types may not return multiple distinct objects<ul> <li>Most functions returning a non-num value should have a single return at the end</li> </ul> </li> <li>Destructuring assignment does not support the <code>*</code> operator.</li> <li>Sequence <code>match</code> patterns do not support the <code>*</code> operator.</li> <li>Mapping <code>match</code> patterns are unsupported.</li> <li>Imports may not be done within functions</li> <li>The <code>global</code> and <code>nonlocal</code> keywords are unsupported.</li> </ul>"},{"location":"concepts/constructs/#overview","title":"Overview","text":"<p>The following constructs are supported in Sonolus.py:  </p> <ul> <li>Expressions:<ul> <li>Literals:<ul> <li>Numbers (excluding complex numbers): <code>0</code>, <code>1</code>, <code>1.0</code>, <code>1e3</code>, <code>0x1</code>, <code>0b1</code>, <code>0o1</code></li> <li>Booleans: <code>True</code>, <code>False</code></li> <li>Strings: <code>'Hello, World!'</code>, <code>\"Hello, World!\"</code></li> <li>Tuples: <code>(1, 2, 3)</code></li> </ul> </li> <li>Operators (if supported by the operands):<ul> <li>Unary: <code>+</code>, <code>-</code>, <code>not</code>, <code>~</code></li> <li>Binary: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> <li>Comparison: <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>is</code>, <code>is not</code>, <code>in</code>, <code>not in</code></li> <li>Logical: <code>and</code>, <code>or</code> (for <code>Num</code> arguments only)</li> <li>Ternary: <code>a if &lt;condition&gt; else b</code></li> <li>Attribute: <code>a.b</code></li> <li>Indexing: <code>a[b]</code></li> <li>Call: <code>f(a, b, c)</code></li> </ul> </li> <li>Variables: <code>a</code>, <code>b</code>, <code>c</code></li> <li>Lambda: <code>lambda a, b: a + b</code> (if not on the same line as another lambda or function definition)</li> <li>Assignment Expression: <code>(a := b)</code></li> <li>Generator Expression: <code>(x for x in iterable if condition)</code></li> </ul> </li> <li>Statements:<ul> <li>Simple Statements:<ul> <li>Assignments:<ul> <li>Simple assignment: <code>a = b</code></li> <li>Augmented assignment: <code>a += b</code></li> <li>Attribute assignment: <code>a.b = c</code></li> <li>Index assignment: <code>a[b] = c</code></li> <li>Destructuring assignment: <code>a, b = b, a</code></li> <li>Multiple assignment: <code>a = b = c = 1</code></li> <li>Annotated assignment: <code>a: int = 1</code></li> </ul> </li> <li>Assert: <code>assert &lt;condition&gt;, &lt;message&gt;</code></li> <li>Pass: <code>pass</code></li> <li>Break: <code>break</code></li> <li>Continue: <code>continue</code></li> <li>Return: <code>return &lt;value&gt;</code></li> <li>Yield: <code>yield &lt;value&gt;</code>, <code>yield from &lt;iterable&gt;</code></li> <li>Import: <code>import &lt;module&gt;</code>, <code>from &lt;module&gt; import &lt;name&gt;</code> (only outside of functions)</li> </ul> </li> <li>Compound Statements:<ul> <li>If: <code>if &lt;condition&gt;:</code>, <code>elif &lt;condition&gt;:</code>, <code>else:</code></li> <li>While: <code>while &lt;condition&gt;:</code>, <code>else:</code></li> <li>For: <code>for &lt;target&gt; in &lt;iterable&gt;:</code>, <code>else:</code></li> <li>Match: <code>match &lt;value&gt;:</code>, <code>case &lt;pattern&gt;:</code></li> <li>Function Definition: <code>def &lt;name&gt;(&lt;parameters&gt;):</code></li> <li>Class Definition: <code>class &lt;name&gt;:</code> (only outside of functions)</li> </ul> </li> </ul> </li> </ul>"},{"location":"concepts/constructs/#compile-time-evaluation","title":"Compile Time Evaluation","text":"<p>Some expressions can be evaluated at compile time:</p> <ul> <li>Numeric literals: <code>1</code>, <code>2.5</code>, <code>True</code>, <code>False</code>, ...</li> <li>None: <code>None</code></li> <li>Basic arithmetic: for compile time constant operands: <code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code>, ...</li> <li>Is/Is Not None: for any left-hand operand, <code>a is None</code>, <code>a is not None</code></li> <li>Type checks: for any value, <code>isinstance(a, t)</code>, <code>issubclass(a, t)</code></li> <li>Boolean operations:<ul> <li>Negation: <code>not a</code></li> <li>And<ul> <li>Both operands are compile time constants: <code>a and b</code></li> <li>One operand is known to be False: <code>False and a</code>, <code>a and False</code></li> </ul> </li> <li>Or<ul> <li>Both operands are compile time constants: <code>a or b</code></li> <li>One operand is known to be True: <code>True or a</code>, <code>a or True</code></li> </ul> </li> </ul> </li> <li>Comparison: for compile time constant operands: <code>a == b</code>, <code>a != b</code>, <code>a &gt; b</code>, <code>a &lt; b</code>, <code>a &gt;= b</code>, <code>a &lt;= b</code>, ...</li> <li>Variables assigned to compile time constants: <code>a = 1</code>, <code>b = a + 1</code>, ...</li> </ul> <p>Some values like array sizes must be compile-time constants.</p> <p>The compiler will eliminate branches known to be unreachable at compile time:</p> <pre><code>def f(a):\n    if isinstance(a, Num):\n        debug_log(a)\n    else:\n        debug_log(a.x + a.y)\n\n# This works because `isinstance` is evaluated at compile time and only the first (if) branch is reachable.\n# The second (else) branch is eliminated, so we don't get an error that a does not have 'x' and 'y' attributes.\nf(123)\n</code></pre>"},{"location":"concepts/constructs/#variables","title":"Variables","text":"<p>Variables can be assigned and used like in vanilla Python.</p> <pre><code>a = 1\nb = 2\nc = a + b\n</code></pre> <p>Unlike vanilla Python, non-num variables must have a single unambiguous definition when used. Nums have no such restriction.</p> <p>The following are allowed:</p> <pre><code>v = Vec2(1, 2)  # (1)\nv = Vec2(3, 4)  # (2)\ndebug_log(v.x + v.y)  # 'v' is valid because (2) is the only active definition\n</code></pre> <pre><code>v = 1  # (1)\nv = Vec2(3, 4)  # (2)\ndebug_log(v.x + v.y)  # 'v' is valid because (2) is the only active definition\n</code></pre> <pre><code>v = Vec2(1, 2)  # (1)\nwhile condition():\n    v = Vec2(3, 4)  # (2)\n    debug_log(v.x + v.y)  # 'v' is valid because (2) is the only active definition\n</code></pre> <pre><code>v = Vec2(1, 2)  # (1)\nif random() &lt; 0.5:\n    v @= Vec2(3, 4)  # Updates 'v' in-place without redefining it\ndebug_log(v.x + v.y)  # 'v' is valid because (1) is the only active definition\n</code></pre> <p>The following are not allowed:</p> <pre><code>v = Vec2(1, 2)  # (1)\nif random() &lt; 0.5:\n    v = Vec2(3, 4)  # (2)\ndebug_log(v.x + v.y)  # 'v' is invalid because both (1) and (2) are active\n</code></pre> <pre><code>v = Vec2(1, 2)  # (1)\nwhile condition():\n    debug_log(v.x + v.y)  # 'v' is invalid because (1) and (2) are active\n    v = Vec2(3, 4)  # (2) redefines 'v' for future iterations\n</code></pre>"},{"location":"concepts/constructs/#expressions","title":"Expressions","text":""},{"location":"concepts/constructs/#literals","title":"Literals","text":"<p><code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code>, and <code>tuple</code> literals are supported:</p> <pre><code>a = 1\nb = 1.0\nc = True\nd = 'Hello, World!'\ne = (1, 2, 3)\n</code></pre>"},{"location":"concepts/constructs/#operators","title":"Operators","text":"<p>All standard operators are supported for types implementing them. <code>@=</code> is reserved as the copy-from operator.</p> <pre><code>a = 1 + 2\nb = 3 - 4\nc = 5 * 6\nd = 7 / 8\ne = Vec2(1, 2)\nf = e.x + e.y\ng = Array(1, 2, 3)\nh = g[0] + g[1] + g[2]\n(i := 1)\n</code></pre> <p>The ternary operator is supported for, but the condition must be a <code>Num</code>. If the operands are not nums, the condition must be a compile-time constant or this will be considered an error:</p> <pre><code># Ok\na = 1 if random() &lt; 0.5 else 2\nb = Vec2(1, 2) if b is None else b\n\n# Not ok\nc = Vec2(1, 2) if random() &lt; 0.5 else Vec2(3, 4)  # Multiple definitions\n</code></pre> <p>If the condition is a compile-time constant, then the ternary operator will be evaluated at compile time:</p> <pre><code>e = Vec2(0, 0) if e is None else e  # Ok, evaluated at compile time\n</code></pre>"},{"location":"concepts/constructs/#statements","title":"Statements","text":""},{"location":"concepts/constructs/#assignment","title":"Assignment","text":"<p>Most assignment types are supported. Destructuring assignment is supported only for tuples, and the <code>*</code> operator is not supported.</p> <pre><code># Ok\na = 1\nb += 2\nc.x = 3\nd[0] = 4\n(e, f), g = (1, 2), 3\n\n# Not ok\nh, *i = 1, 2, 3  # Not supported\n</code></pre> <pre><code>if a &gt; 0:\n    pass\n</code></pre>"},{"location":"concepts/constructs/#conditional-statements","title":"Conditional Statements","text":"<p>The standard conditional statements are supported.</p>"},{"location":"concepts/constructs/#if-elif-else","title":"if / elif / else","text":"<pre><code>if a &gt; 0:\n    ...\nelif a &lt; 0:\n    ...\nelse:\n    ...\n</code></pre> <p>When the condition is a compile-time constant, the compiler will remove the unreachable branches:</p> Code<pre><code>v = None\nif v is None:\n    v = Vec2(1, 2)\ndebug_log(v.x + v.y)\n</code></pre> Equivalent<pre><code>v = None\n# The 'if' branch is always taken\nv = Vec2(1, 2)\ndebug_log(v.x + v.y)\n</code></pre> <p>This is useful for handling optional arguments and supporting multiple argument types:</p> <pre><code>def f(a: Vec2 | None = None):\n    if a is None:\n        a = Vec2(1, 2)\n    debug_log(a.x + a.y)\n</code></pre> <pre><code>def f(a: Vec2 | int):\n    if isinstance(a, Vec2):\n        debug_log(a.x + a.y)\n    else:\n        debug_log(a)\n</code></pre>"},{"location":"concepts/constructs/#match-case","title":"match / case","text":"<p>The <code>match</code> statement is supported for matching values against patterns. All patterns, including subpatterns, except mapping patterns and sequences with the <code>*</code> operator are supported.  Records have a <code>__match_args__</code> attribute defined automatically, so they can be used with positional subpatterns.</p> <pre><code>match x:\n    case 1:\n        ...\n    case 2 | 3:\n        ...\n    case Vec2() as v:\n        ...\n    case (a, b):\n        ...\n    case Num(a):\n        ...\n    case _:\n        ...\n</code></pre> <p>As with <code>if</code> statements, the compiler will remove unreachable branches when the value is a compile-time constant:</p> Code<pre><code>v = 1\nmatch v:\n    case Vec2(a, b):\n        debug_log(a + b)\n    case Num():\n        debug_log(v)\n    case _:\n        debug_log(-1)\n</code></pre> Equivalent<pre><code>v = 1\n# 'case Num()' is always taken\ndebug_log(v)\n</code></pre>"},{"location":"concepts/constructs/#loops","title":"Loops","text":""},{"location":"concepts/constructs/#while-else","title":"while / else","text":"<p>While loops are fully supported, including the <code>else</code> clause and the <code>break</code> and <code>continue</code> statements.</p> <pre><code>while a &gt; 0:\n    if ...:\n        break\n    if ...:\n        continue\n    ...\nelse:\n    ...\n</code></pre>"},{"location":"concepts/constructs/#for-else","title":"for / else","text":"<p>For loops are supported, including the <code>else</code> clause and the <code>break</code> and <code>continue</code> statements. Custom iterators must subclass SonolusIterator.</p> <pre><code>for i in range(10):\n    if ...:\n        break\n    if ...:\n        continue\n    ...\nelse:\n    ...\n</code></pre> <p>Tuples can be iterated over and result in an unrolled loop. This can be useful for iterating of objects of different, types, but care should be taken since it results in more code being generated compared to a normal loop:</p> Code<pre><code>for i in (1, 2, 3):\n    debug_log(i)\n</code></pre> Equivalent<pre><code>debug_log(1)\ndebug_log(2)\ndebug_log(3)\n</code></pre>"},{"location":"concepts/constructs/#functions","title":"Functions","text":"<p>Functions and lambdas are supported, including within other functions:</p> <pre><code>def f(a, b):\n    return a + b\n\n\ndef g(a):\n    return lambda b: f(a, b)\n</code></pre> <p>Function returns follow the same rules as variable access. If a function returns a non-num value, it most only return that value. If the function always returns a num, it may have any number of returns. Similarly, if a function always returns None (<code>return None</code> or just <code>return</code>), it may have any number of returns.  The <code>Maybe</code> is also an exception, see the  Maybe documentation for details</p> <p>The following are allowed:</p> <pre><code>def f():\n    return Vec2(1, 2)\n</code></pre> <pre><code>def g(x):\n    # Only one return is reachable since isinstance is evaluated at compile time\n    if isinstance(x, Vec2):\n        return Vec2(x.y, x.x)\n    else:\n        return x\n</code></pre> <pre><code>def h(x):\n    # Both returns return the exact same value\n    x = Vec2(1, 2)\n    if random() &lt; 0.5:\n        debug_log(123)\n        return x\n    else:\n        return x\n</code></pre> <pre><code>def i(x):\n    # All return values are nums\n    if random() &lt; 0.5:\n        return 1\n    return 2\n</code></pre> <p>The following are not allowed:</p> <pre><code>def j():\n    # Either return is reachable and return different values\n    if random() &lt; 0.5:\n        return Vec2(1, 2)\n    return Vec2(3, 4)\n</code></pre> <pre><code>def k():\n    # Both the return and an implicit 'return None' are reachable\n    if random() &lt; 0.5:\n        return Vec2(1, 2)\n</code></pre> <p>Outside of functions returning <code>None</code> or a num, most functions should have a single <code>return</code> statement at the end.</p>"},{"location":"concepts/constructs/#classes","title":"Classes","text":"<p>Classes are supported at the module level. User defined classes should subclass <code>Record</code> or have a supported Sonolus.py decorator such as <code>@level_memory</code>.</p> <p>Methods may have the <code>@staticmethod</code>, <code>@classmethod</code>, or <code>@property</code> decorators.</p> <pre><code>class MyRecord(Record):\n    x: int\n    y: int\n\n    def regular_method(self):\n        ...\n\n    @staticmethod\n    def static_method():\n        ...\n\n    @classmethod\n    def class_method(cls):\n        ...\n\n    @property\n    def property(self):\n        ...\n</code></pre>"},{"location":"concepts/constructs/#imports","title":"Imports","text":"<p>Imports are supported at the module level, but not within functions.</p>"},{"location":"concepts/constructs/#assert","title":"assert","text":"<p>Assertions are supported. Assertion failures cannot be handled and will terminate the current callback when running in the Sonolus app. In debug mode, the game will also pause to indicate the error.</p> <pre><code>assert a &gt; 0, 'a must be positive'\n</code></pre>"},{"location":"concepts/constructs/#pass","title":"pass","text":"<p>The <code>pass</code> statement is supported.</p>"},{"location":"concepts/overview/","title":"Overview","text":"<p>Sonolus.py is a Python library for creating Sonolus engines. This page provides an overview of the key functionality available in the library. For detailed information, see the Reference section.</p>"},{"location":"concepts/overview/#language","title":"Language","text":"<p>Sonolus.py compiles Python code into Sonolus nodes. It supports a subset of Python including most syntax and a portion of the standard library. Additionally, Sonolus.py provides its own library of types and functions that are designed for use in Sonolus engines.</p>"},{"location":"concepts/overview/#syntax","title":"Syntax","text":"<p>Most Python syntax is supported, but there are a few limitations. The primary restrictions are:</p> <ul> <li>Destructuring assignment with the <code>*</code> operator is unsupported.</li> <li>Sequence (list and array) <code>match</code> patterns with the <code>*</code> operator are unsupported.</li> <li>Mapping (dict) <code>match</code> patterns are unsupported.</li> <li>Within functions, <code>import</code> statements are unsupported.</li> <li>The <code>global</code> and <code>nonlocal</code> keywords are unsupported.</li> <li>Exception related statements (<code>try</code>, <code>except</code>, <code>finally</code>, <code>raise</code>) are unsupported.</li> </ul>"},{"location":"concepts/overview/#compile-time-evaluation","title":"Compile Time Evaluation","text":"<p>Sonolus.py will evaluate some expressions at compile time such as basic arithmetic operations on constants, boolean logical operations (<code>and</code>, <code>or</code>, <code>not</code>) on constants, and type checks (<code>isinstance</code>, <code>issubclass</code>).</p> <p>In control flow constructs like <code>if</code> and <code>match</code>, Sonolus.py may determine some branches to be unreachable at compile and eliminate them without evaluating them. This allows code like the following to compile successfully:</p> <pre><code>a = 1\nif isinstance(a, Vec2):\n    # This branch is eliminated at compile time.\n    # If it were not, compilation would fail because `a` has no attribute `x`.\n    debug_log(a.x)\nelse:\n    debug_log(a)\n</code></pre>"},{"location":"concepts/overview/#variables","title":"Variables","text":"<p>Numeric (<code>int</code>, <code>float</code>, <code>bool</code>) variables are fully supported and can be freely assigned and modified.</p> <p>All other variables have the restriction that if the compiler finds multiple possible values for a variable, it may not be accessed. For example, the following code will not compile:</p> <pre><code>if random() &lt; 0.5:\n    a = Vec2(1, 2)\nelse:\n    a = Vec2(3, 4)\n# This will not compile because `a` could have been defined in either branch.\ndebug_log(a.x)\n</code></pre>"},{"location":"concepts/overview/#function-returns","title":"Function Returns","text":"<p>Similar to variables, functions returning <code>int</code>, <code>float</code>, or <code>bool</code> can have any number of return statements. Functions returning <code>None</code> may also have any number of <code>return</code> or <code>return None</code> statements.</p> <p>Functions returning any other type must have exactly one <code>return</code> statement, and it must be the only exit point of the function <sup>1</sup>. It is ok, however, for a function to have other <code>return</code> statements that are eliminated at compile time. For example, the following code will compile successfully:</p> <pre><code>def fn(a: int | Vec2):\n    if isinstance(a, Vec2):\n        return Vec2(a.x, a.y)\n    else:\n        return Vec2(a, a)\n\nfn(123)\n</code></pre>"},{"location":"concepts/overview/#types","title":"Types","text":""},{"location":"concepts/overview/#numbers","title":"Numbers","text":"<p>Sonolus.py supports <code>int</code>, <code>float</code>, and <code>bool</code> types and most of the standard operations such as mathematical operations (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>), comparisons (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code>), and boolean operations (<code>and</code>, <code>or</code>, <code>not</code>).</p>"},{"location":"concepts/overview/#record","title":"Record","text":"<p><code>Record</code> is the main way to define custom types in Sonolus.py. It functions similarly to a data class and provides a way to define a type with named fields:</p> <pre><code>class MyRecord(Record):\n    a: int\n    b: float\n\nrecord_1 = MyRecord(1, b=2.3)\n</code></pre> <p>Records may also be generic:</p> <pre><code>class MyGenericRecord[T](Record):\n    value: T\n\nrecord_1 = MyGenericRecord[int](123)\nrecord_2 = MyGenericRecord(MyRecord(4, 5.6))  # Type arguments are inferred\n</code></pre> <p>Record arguments are retained by reference, so modifying the original record will also modify the record in the array:</p> <pre><code>record_1 = MyRecord(1, 2.3)\nrecord_2 = MyGenericRecord(record_1)\nrecord_2.value.a = 789  # This also affects `record_1` since they're the same object.\nassert record_1.a == record_2.value.a == 789\n</code></pre>"},{"location":"concepts/overview/#array","title":"Array","text":"<p><code>Array</code> is a type that represents a fixed-size array of elements of a specific type:</p> <pre><code>array_1 = Array[int, 3](1, 2, 3)\narray_2 = Array(4, 5, 6)  # Type arguments are inferred\n</code></pre> <p>When given record or array values as arguments, the array constructor will copy them:</p> <pre><code>record_1 = MyRecord(1, 2.5)\narray_1 = Array(record_1)\narray_1[0].a = 789  # This has no effect on `record_1` since it was copied.\nassert record_1.a == 1\n</code></pre>"},{"location":"concepts/overview/#operations","title":"Operations","text":"<p>This section is an overview of the operations available for records and arrays. For full details see the Record documentation and Array documentation.</p> <p>Records and arrays come with the <code>==</code> and <code>!=</code> operators predefined to compare their values for equality:</p> <pre><code>assert MyRecord(1, 2.3) == MyRecord(1, 2.3)\nassert Array(1, 2, 3) != Array(4, 5, 6)\n</code></pre> <p>The unary <code>+</code> operator makes a copy of a record or array, creating a new instance with the same values:</p> <pre><code>record_2 = +record_1\narray_2 = +array_1\n</code></pre> <p>Similarly, a new zero initialized value can be created using the unary <code>+</code> operator on a record or array type:</p> <pre><code>record_1 = +MyRecord\nrecord_2 = +Array[int, 3]\n</code></pre> <p>Records and arrays can be mutated in-place using the <code>@=</code> operator:</p> <pre><code>record_1 @= MyRecord(1, 2.3)\narray_1 @= Array(4, 5, 6)\n</code></pre> <p>Record fields and array elements of numeric types can be set using the <code>=</code> operator:</p> <pre><code>record_1.a = 123\narray_1[1] = 456\n</code></pre> <p>Setting a record field that's a record or array using the <code>=</code> operator will modify the field in-place:</p> <pre><code>record_1 = MyRecord(1, 2.3)\nrecord_2 = MyGenericRecord(record_1)\nrecord_2.value = MyRecord(4, 5.6)  # This modifies `record_1` in-place.\nassert record_1 == record_2.value == MyRecord(4, 5.6)\n</code></pre> <p>Setting an array element that's a record or array using the <code>=</code> operator will also modify the element in-place:</p> <pre><code>array_1 = Array(MyRecord(1, 2.3))\nrecord_1 = array_1[0]\narray_1[0] = MyRecord(4, 5.6)  # This modifies `record_1` in-place.\nassert record_1 == array_1[0] == MyRecord(4, 5.6)\n</code></pre>"},{"location":"concepts/overview/#other-types","title":"Other Types","text":"<p>Sonolus.py has limited support for other types of values such as strings, tuples, and functions. These have restrictions such as not being valid as Record field types or Array element types.</p>"},{"location":"concepts/overview/#modules","title":"Modules","text":"<p>Sonolus.py provides a number of built-in modules that can be used in Sonolus engines. These include:</p> <ul> <li>Project<ul> <li>Project: Configuration for a Sonolus.py project.</li> <li>Engine: Configuration for a Sonolus.py engine.</li> <li>Level: Configuration for a Sonolus.py level.</li> <li>Archetype: Engine archetypes and their configuration.</li> </ul> </li> <li>Core Types<ul> <li>Array: Fixed-size arrays.</li> <li>Num: Numeric values (int, float, bool).</li> <li>Record: User-defined types with named fields.</li> </ul> </li> <li>Engine Resources<ul> <li>Bucket: Judgment buckets.</li> <li>Effect: Sound effects.</li> <li>Instruction: Tutorial instructions.</li> <li>Options: Engine options.</li> <li>Particle: Particle effects.</li> <li>Sprite: Sprites and skins.</li> <li>UI: Engine ui configuration.</li> </ul> </li> <li>Sonolus Runtime<ul> <li>Globals: Level data and level memory definition.</li> <li>Runtime: Runtime functions like time and ui configuration.</li> <li>Stream: Data streams recorded in play mode and used in watch mode.</li> <li>Text: Standard Sonolus text constants.</li> <li>Timing: Beat and timescale related functions.</li> </ul> </li> <li>Python Builtins<ul> <li>builtins: Supported Python builtins.</li> <li>math: Supported math functions.</li> <li>random: Supported random functions.</li> <li>typing: Supported typing functions.</li> </ul> </li> <li>Utilities<ul> <li>ArrayLike: Mixin for array functionality.</li> <li>Containers: Additional container types like <code>VarArray</code> and <code>ArrayMap</code>.</li> <li>Debug: Debugging utilities.</li> <li>Easing: Easing functions for animations.</li> <li>Interval: Mathematical intervals.</li> <li>Iterator: Iterators over collections.</li> <li>Maybe: Optional function return values.</li> <li>Printing: Preview mode number printing.</li> <li>Quad: Quadrilaterals.</li> <li>Transform: Transformations like translation, rotation, and scaling.</li> <li>Values: Generic utilities for working with values.</li> <li>Vec: The Vec2 type and related functions.</li> </ul> </li> </ul> <p>For more details, see the Reference section.</p> <ol> <li> <p>The <code>Maybe</code> type is an exception to this rule.  See the <code>Maybe</code> documentation for details.\u00a0\u21a9</p> </li> </ol>"},{"location":"concepts/project/","title":"Project","text":"<p>Project details are defined in a file called <code>project.py</code> in the top-level package of the project:</p> <pre><code>from sonolus.script.engine import Engine, EngineData\nfrom sonolus.script.project import Project\n\nfrom my_engine.common.options import Options\nfrom my_engine.common.ui import ui_config\nfrom my_engine.level import my_level\nfrom my_engine.play.mode import play_mode\nfrom my_engine.preview.mode import preview_mode\nfrom my_engine.tutorial.mode import tutorial_mode\nfrom my_engine.watch.mode import watch_mode\n\nengine = Engine(\n    name=\"my_engine\",\n    title=\"Demo Engine\",\n    skin=\"pixel\",\n    particle=\"pixel\",\n    background=\"vanilla\",\n    data=EngineData(\n        ui=ui_config,\n        options=Options,\n        play=play_mode,\n        watch=watch_mode,\n        preview=preview_mode,\n        tutorial=tutorial_mode,\n    ),\n)\n\nproject = Project(\n    engine=engine,\n    levels=[my_level],\n)\n</code></pre> <p>A typical project structure might look like this:</p> <pre><code>my_engine/\n    __init__.py\n    project.py\n    common/\n        ...\n    play/\n        ...\n    preview/\n        ...\n    tutorial/\n        ...\nresources/\n    ...\n</code></pre>"},{"location":"concepts/project/#modes","title":"Modes","text":"<p>Modes are defined using the <code>PlayMode</code>, <code>WatchMode</code>, <code>PreviewMode</code>, and <code>TutorialMode</code> classes.</p>"},{"location":"concepts/project/#play-mode","title":"Play Mode","text":"<pre><code>from sonolus.script.engine import PlayMode\n\nfrom my_engine.common.buckets import Buckets\nfrom my_engine.common.effect import Effects\nfrom my_engine.play.init import Init\nfrom my_engine.play.note import Note\nfrom my_engine.common.particle import Particles\nfrom my_engine.common.skin import Skin\nfrom my_engine.play.stage import Stage\n\n\nplay_mode = PlayMode(\n    archetypes=[Init, Stage, Note],\n    skin=Skin,\n    effects=Effects,\n    particles=Particles,\n    buckets=Buckets,\n)\n</code></pre> <p>Play mode archetypes subclass <code>PlayArchetype</code> and implement the following callbacks:</p> <ul> <li><code>should_spawn</code> (required)</li> <li><code>preprocess</code></li> <li><code>spawn_order</code></li> <li><code>initialize</code></li> <li><code>update_sequential</code></li> <li><code>update_parallel</code></li> <li><code>touch</code></li> <li><code>terminate</code></li> </ul> <p>Archetypes for scored notes should have the <code>is_scored</code> class variable set to <code>True</code>.</p>"},{"location":"concepts/project/#watch-mode","title":"Watch Mode","text":"<pre><code>from sonolus.script.engine import WatchMode\n\nfrom my_engine.common.buckets import Buckets\nfrom my_engine.common.effect import Effects\nfrom my_engine.common.particle import Particles\nfrom my_engine.common.skin import Skin\nfrom my_engine.watch.init import Init\nfrom my_engine.watch.note import Note\nfrom my_engine.watch.stage import Stage\nfrom my_engine.watch.update_spawn import update_spawn\n\nwatch_mode = WatchMode(\n    archetypes=[Init, Stage, Note],\n    skin=Skin,\n    effects=Effects,\n    particles=Particles,\n    buckets=Buckets,\n    update_spawn=update_spawn,\n)\n</code></pre> <p>Watch mode archetypes subclass <code>WatchArchetype</code> and implement the following callbacks:</p> <ul> <li><code>spawn_time</code> (required)</li> <li><code>despawn_time</code> (required)</li> <li><code>preprocess</code></li> <li><code>initialize</code></li> <li><code>update_sequential</code></li> <li><code>update_parallel</code></li> <li><code>terminate</code></li> </ul> <p>Watch mode also has the <code>update_spawn</code> global callback, which is invoked every frame and should return the reference time to compare against spawn and despawn times of archetypes. Typically, this can be either the current time or the current scaled time.</p>"},{"location":"concepts/project/#preview-mode","title":"Preview Mode","text":"<pre><code>from sonolus.script.engine import PreviewMode\n\nfrom my_engine.common.skin import Skin\nfrom my_engine.preview.bar_line import BpmChange, TimescaleChange\nfrom my_engine.preview.init import Init\nfrom my_engine.preview.note import Note\nfrom my_engine.preview.stage import Stage\n\npreview_mode = PreviewMode(\n    archetypes=[BpmChange, TimescaleChange, Init, Stage, Note],\n    skin=Skin,\n)\n</code></pre> <p>Preview mode archetypes subclass <code>PreviewArchetype</code> and implement the following callbacks:</p> <ul> <li><code>preprocess</code></li> <li><code>render</code></li> </ul>"},{"location":"concepts/project/#tutorial-mode","title":"Tutorial Mode","text":"<pre><code>from sonolus.script.engine import TutorialMode\n\nfrom my_engine.common.effect import Effects\nfrom my_engine.common.particle import Particles\nfrom my_engine.common.skin import Skin\nfrom my_engine.tutorial.init import preprocess\nfrom my_engine.tutorial.instructions import Instructions, InstructionIcons\nfrom my_engine.tutorial.navigate import navigate\nfrom my_engine.tutorial.update import update\n\ntutorial_mode = TutorialMode(\n    skin=Skin,\n    effects=Effects,\n    particles=Particles,\n    instructions=Instructions,\n    instruction_icons=InstructionIcons,\n    preprocess=preprocess,\n    navigate=navigate,\n    update=update,\n)\n</code></pre> <p>Tutorial mode does not have archetypes, but has the following global callbacks:</p> <ul> <li><code>preprocess</code> - Invoked once before the tutorial starts</li> <li><code>navigate</code> - Invoked when the player navigates forward or backward in the tutorial  </li> <li><code>update</code> - Invoked every frame and should handle most of the drawing logic</li> </ul>"},{"location":"concepts/project/#levels","title":"Levels","text":"<p>Levels are defined using the <code>Level</code> class:</p> <pre><code>from sonolus.script.level import LevelData, BpmChange, Level, TimescaleChange\n\nfrom my_engine.play.init import Init\nfrom my_engine.play.note import Note\nfrom my_engine.play.stage import Stage\n\n\nmy_level = Level(\n    name=\"my_level\",\n    title=\"My Level\",\n    bgm=\"bgm.mp3\",\n    data=LevelData(\n        bgm_offset=0,\n        entities=[\n            Init(),\n            Stage(),\n            BpmChange(beat=0, bpm=87),\n            BpmChange(beat=2, bpm=87),\n            BpmChange(beat=34, bpm=174),\n            TimescaleChange(beat=298, timescale=1.5),\n            TimescaleChange(beat=346, timescale=1),\n            Note(beat=1),\n            Note(beat=2),\n            Note(beat=3),\n        ],\n    ),\n)\n</code></pre>"},{"location":"concepts/project/#resources","title":"Resources","text":"<p>Resources should be placed in the <code>resources</code> directory next to the top-level package of the project.</p> <p>They can be <code>.scp</code> files, regular <code>.mp3</code> or <code>.png</code> files, or be organized as unpacked Sonolus resources (see sonolus-pack).</p>"},{"location":"concepts/resources/","title":"Resources &amp; Declarations","text":""},{"location":"concepts/resources/#global-variables","title":"Global Variables","text":""},{"location":"concepts/resources/#level-memory","title":"Level Memory","text":"<p>Level memory is defined with the <code>@level_memory</code> class decorator:</p> <pre><code>from sonolus.script.globals import level_memory\n\n\n@level_memory\nclass LevelMemory:\n    value: int\n</code></pre> <p>Alternatively, it may be called as a function as well by passing the type as an argument:</p> <pre><code>from sonolus.script.globals import level_memory\nfrom sonolus.script.vec import Vec2\n\n\nlevel_memory_value = level_memory(Vec2)\n</code></pre> <p>Level memory may be modified in sequential callbacks:</p> <ul> <li><code>preprocess</code></li> <li><code>update_sequential</code></li> <li><code>touch</code></li> </ul> <p>and may be read in any callback.</p>"},{"location":"concepts/resources/#level-data","title":"Level Data","text":"<p>Level data is defined with the <code>@level_data</code> class decorator:</p> <pre><code>from sonolus.script.globals import level_data\n\n\n@level_data\nclass LevelData:\n    value: int\n</code></pre> <p>Alternatively, it may be called as a function as well by passing the type as an argument:</p> <pre><code>from sonolus.script.globals import level_data\nfrom sonolus.script.vec import Vec2\n\n\nlevel_data_value = level_data(Vec2)\n</code></pre> <p>Level data may only be modified in the <code>preprocess</code> callback and may be read in any callback.</p>"},{"location":"concepts/resources/#archetype-variables","title":"Archetype Variables","text":""},{"location":"concepts/resources/#imported","title":"Imported","text":"<p>Imported fields are declared with <code>imported()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, imported\n\nclass MyArchetype(PlayArchetype):\n    field: int = imported()\n    field_with_explicit_name: int = imported(name=\"field_name\")\n</code></pre> <p>Imported fields may be loaded from the level data. In watch mode, data may also be loaded from a corresponding exported field in play mode.</p> <p>Imported fields may only be updated in the <code>preprocess</code> callback, and are read-only in other callbacks.</p>"},{"location":"concepts/resources/#exported","title":"Exported","text":"<p>Exported fields are declared with <code>exported()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, exported\n\nclass MyArchetype(PlayArchetype):\n    field: int = exported()\n    field_with_explicit_name: int = exported(name=\"#FIELD\")\n</code></pre> <p>This is only usable in play mode to export data to be loaded in watch mode. Exported fields are write-only.</p>"},{"location":"concepts/resources/#entity-data","title":"Entity Data","text":"<p>Entity data fields are declared with <code>entity_data()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, entity_data\n\nclass MyArchetype(PlayArchetype):\n    field: int = entity_data()\n</code></pre> <p>Entity data is accessible from other entities, but may only be updated in the <code>preprocess</code> callback and is read-only in other callbacks.</p> <p>It functions like <code>imported()</code> and shares the same underlying storage, except that it is not loaded from a level.</p>"},{"location":"concepts/resources/#entity-memory","title":"Entity Memory","text":"<p>Entity memory fields are declared with <code>entity_memory()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, entity_memory\n\nclass MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n</code></pre> <p>Entity memory is private to the entity and is not accessible from other entities. It may be read or updated in any callback associated with the entity.</p> <p>Entity memory fields may also be set when an entity is spawned using the <code>spawn()</code> method.</p>"},{"location":"concepts/resources/#shared-memory","title":"Shared Memory","text":"<p>Shared memory fields are declared with <code>shared_memory()</code>:</p> <pre><code>from sonolus.script.archetype import PlayArchetype, shared_memory\n\nclass MyArchetype(PlayArchetype):\n    field: int = shared_memory()\n</code></pre> <p>Shared memory is accessible from other entities.</p> <p>Shared memory may be read in any callback, but may only be updated by sequential callbacks (<code>preprocess</code>, <code>update_sequential</code>, and <code>touch</code>).</p>"},{"location":"concepts/resources/#streams","title":"Streams","text":"<p>Streams are defined with the <code>@streams</code> decorator:</p> <pre><code>from sonolus.script.stream import streams, Stream, StreamGroup\nfrom sonolus.script.num import Num\nfrom sonolus.script.vec import Vec2\n\n@streams\nclass Streams:\n    stream_1: Stream[Num]  # A stream of Num values\n    stream_2: Stream[Vec2]  # A stream of Vec2 values\n    group_1: StreamGroup[Num, 10]  # A group of 10 Num streams\n    group_2: StreamGroup[Vec2, 5]  # A group of 5 Vec2 streams\n\n    data_field_1: Num  # A data field of type Num\n    data_field_2: Vec2  # A data field of type Vec2\n</code></pre> <p>Streams and stream groups are declared by annotating class attributes with <code>Stream</code> or <code>StreamGroup</code>.</p> <p>Other types are also supported in the form of data fields. They may be used to store additional data to export from Play to Watch mode.</p> <p>In either case, data is write-only in Play mode and read-only in Watch mode.</p> <p>This should only be used once in most projects, as multiple decorated classes will overlap with each other and interfere when both are used at the same time.</p> <p>For backwards compatibility, new streams and stream groups should be added to the end of existing ones, and lengths and element types of existing streams and stream groups should not be changed. Otherwise, old replays may not work on new versions of the engine.</p>"},{"location":"concepts/resources/#skins","title":"Skins","text":"<p>Skins are defined with the <code>@skin</code> decorator:</p> <pre><code>from sonolus.script.sprite import skin, StandardSprite, sprite, Sprite, RenderMode\n\n\n@skin\nclass Skin:\n    render_mode: RenderMode = RenderMode.DEFAULT\n\n    note: StandardSprite.NOTE_HEAD_RED\n    other: Sprite = sprite(\"other\")\n</code></pre> <p>Standard sprites are defined by annotating the field with the corresponding value from <code>StandardSprite</code>.</p> <p>Custom sprites are defined by annotating the field with <code>Sprite</code> and calling <code>sprite</code> with the sprite name.</p> <p>To set the render mode for the skin, set the <code>render_mode</code> field to the desired value from <code>RenderMode</code>.</p>"},{"location":"concepts/resources/#sound-effects","title":"Sound Effects","text":"<p>Sound effects are defined with the <code>@effects</code> decorator:</p> <pre><code>from sonolus.script.effect import effects, StandardEffect, Effect, effect\n\n\n@effects\nclass Effects:\n    tap_perfect: StandardEffect.PERFECT\n    other: Effect = effect(\"other\")\n</code></pre> <p>Standard sound effects are defined by annotating the field with the corresponding value from <code>StandardEffect</code>.</p> <p>Custom sound effects are defined by annotating the field with <code>Effect</code> and calling <code>effect</code> with the effect name.</p>"},{"location":"concepts/resources/#particles","title":"Particles","text":"<p>Particles are defined with the <code>@particles</code> decorator:</p> <pre><code>from sonolus.script.particle import particles, StandardParticle, Particle, particle\n\n\n@particles\nclass Particles:\n    tap: StandardParticle.NOTE_CIRCULAR_TAP_RED\n    other: Particle = particle(\"other\")\n</code></pre> <p>Standard particles are defined by annotating the field with the corresponding value from <code>StandardParticle</code>.</p> <p>Custom particles are defined by annotating the field with <code>Particle</code> and calling <code>particle</code> with the particle name.</p>"},{"location":"concepts/resources/#buckets","title":"Buckets","text":"<p>Buckets are defined with the <code>@buckets</code> decorator:</p> <pre><code>from sonolus.script.bucket import buckets, bucket_sprite, bucket, Bucket\nfrom sonolus.script.text import StandardText\nfrom my_engine.common.skin import Skin\n\n@buckets\nclass Buckets:\n    note: Bucket = bucket(\n        sprites=[\n            bucket_sprite(\n                sprite=Skin.note,\n                x=0,\n                y=0,\n                w=2,\n                h=2,\n            )\n        ],\n        unit=StandardText.MILLISECOND_UNIT,\n    )\n</code></pre> <p>Buckets are defined by annotating the field with <code>Bucket</code> and calling <code>bucket</code> with the bucket name.</p>"},{"location":"concepts/resources/#tutorial-instructions","title":"Tutorial Instructions","text":"<p>Tutorial instructions are defined with the <code>@instructions</code> decorator:</p> <pre><code>from sonolus.script.instruction import instructions, StandardInstruction, Instruction, instruction\n\n\n@instructions\nclass Instructions:\n    tap: StandardInstruction.TAP\n    other: Instruction = instruction(\"other\")\n</code></pre> <p>Standard instructions are defined by annotating the field with the corresponding value from <code>StandardInstruction</code>.</p> <p>Custom instructions are defined by annotating the field with <code>Instruction</code> and calling <code>instruction</code> with the instruction name.</p>"},{"location":"concepts/resources/#tutorial-instruction-icons","title":"Tutorial Instruction Icons","text":"<p>Tutorial instruction icons are defined with the <code>@instruction_icons</code> decorator:</p> <pre><code>from sonolus.script.instruction import instruction_icons, StandardInstructionIcon, InstructionIcon, instruction_icon\n\n\n@instruction_icons\nclass InstructionIcons:\n    hand: StandardInstructionIcon.HAND\n    other: InstructionIcon = instruction_icon(\"other\")\n</code></pre> <p>Standard instruction icons are defined by annotating the field with the corresponding value from <code>StandardInstructionIcon</code>.</p> <p>Custom instruction icons are defined by annotating the field with <code>InstructionIcon</code> and calling <code>instruction_icon</code> with the icon name.</p>"},{"location":"concepts/resources/#options","title":"Options","text":"<p>Engine options are defined with the <code>@options</code> decorator:</p> <pre><code>from sonolus.script.options import options, select_option, slider_option, toggle_option\n\n\n@options\nclass Options:\n    slider_option: float = slider_option(\n        name=\"Slider Option\",\n        standard=True,\n        advanced=False,\n        default=0.5,\n        min=0,\n        max=1,\n        step=0.1,\n        unit=\"unit\",\n        scope=\"scope\",\n    )\n    toggle_option: bool = toggle_option(\n        name=\"Toggle Option\",\n        standard=True,\n        advanced=False,\n        default=True,\n        scope=\"scope\",\n    )\n    select_option: int = select_option(\n        name=\"Select Option\",\n        standard=True,\n        advanced=False,\n        default=\"value\",\n        values=[\"value\"],\n        scope=\"scope\",\n    )\n</code></pre> <p>There are three types of options available:</p> <ol> <li><code>slider_option</code>: A slider control for numeric values</li> <li><code>toggle_option</code>: A toggle switch for boolean values</li> <li><code>select_option</code>: A dropdown menu for selecting from predefined values</li> </ol>"},{"location":"concepts/resources/#ui","title":"UI","text":"<p>Ui configuration is defined with the <code>UiConfig</code> class:</p> <pre><code>from sonolus.script.ui import (\n    EaseType,\n    UiAnimation,\n    UiAnimationTween,\n    UiConfig,\n    UiJudgmentErrorPlacement,\n    UiJudgmentErrorStyle,\n    UiMetric,\n    UiVisibility,\n)\n\nui_config = UiConfig(\n    scope=\"my_engine\",\n    primary_metric=UiMetric.ARCADE,\n    secondary_metric=UiMetric.LIFE,\n    menu_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    judgment_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    combo_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    primary_metric_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    secondary_metric_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    progress_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    tutorial_navigation_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    tutorial_instruction_visibility=UiVisibility(\n        scale=1.0,\n        alpha=1.0,\n    ),\n    judgment_animation=UiAnimation(\n        scale=UiAnimationTween(\n            start=1.0,\n            end=1.0, \n            duration=0.0,\n            ease=EaseType.NONE,\n        ),\n        alpha=UiAnimationTween(\n            start=1.0,\n            end=1.0,\n            duration=0.0,\n            ease=EaseType.NONE,\n        ),\n    ),\n    combo_animation=UiAnimation(\n        scale=UiAnimationTween(\n            start=1.2, \n            end=1.0, \n            duration=0.2,\n            ease=EaseType.IN_CUBIC,\n        ),\n        alpha=UiAnimationTween(\n            start=1.0,\n            end=1.0, \n            duration=0.0,\n            ease=EaseType.NONE,\n        ),\n    ),\n    judgment_error_style=UiJudgmentErrorStyle.LATE,\n    judgment_error_placement=UiJudgmentErrorPlacement.TOP,\n    judgment_error_min=0.0,\n)\n</code></pre>"},{"location":"concepts/types/","title":"Types","text":"<p>Sonolus.py has 3 core types: <code>Num</code>, <code>Array</code>, and <code>Record</code>. representing numeric values, fixed-size arrays,  and custom data structures, respectively. Arrays and records can be nested within each other to create complex data structures.</p> <p>Additionally, Sonolus.py supports the built-in types <code>tuple</code>, <code>dict</code>, <code>str</code>, classes and functions, and the constants <code>None</code>, <code>Ellipsis</code>, and <code>NotImplemented</code>.</p>"},{"location":"concepts/types/#num","title":"Num","text":"<p><code>Num</code> is the numeric and boolean type in Sonolus.py. It is interchangeable with <code>int</code>, <code>float</code>, and <code>bool</code>. Sonolus.py will treat any of these types as <code>Num</code>, but it's recommended to use what's appropriate for clarity.</p> <p>Typically, <code>Num</code> isn't directly used in code since <code>int</code>, <code>float</code>, and <code>bool</code> are more specific and easier to read. The main exception is for instance checking (<code>isinstance</code> or <code>match</code> patterns), where <code>Num</code> is the only supported way to check for numeric or boolean values.</p> <p>The Sonolus app uses 32-bit floating-point numbers for all numeric values, so precision may be lower compared to Python when running within Sonolus.</p> <p>NaN and values outside the range of 32-bit floating-point numbers are not supported.</p> <p>You can import <code>Num</code> from <code>sonolus.script.num</code>:</p> <pre><code>from sonolus.script.num import Num\n</code></pre>"},{"location":"concepts/types/#declaration","title":"Declaration","text":"<p>Nums can be declared using standard Python syntax.</p> <pre><code>a = 1\nb = 2.5\nc = True\n</code></pre>"},{"location":"concepts/types/#operations","title":"Operations","text":"<p>Nums support most of the standard Python operations:</p> <ul> <li>Comparison operators: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>Arithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code></li> <li>Unary operators: <code>+</code>, <code>-</code></li> </ul> <p>Note</p> <p>Floating point precision may be lower when running on Sonolus compared to Python. Care should be taken when performing precision-sensitive operations.</p> <p>As in regular Python, <code>0</code> is considered <code>False</code>, while any non-zero value is considered <code>True</code>.</p> <p>Objects with an explicit <code>__bool__</code> method may also be used in <code>if</code>, <code>while</code>, <code>case ... if</code> expressions as well as with the <code>not</code> operator. However, the operands of the <code>and</code> and <code>or</code> operators must be of type <code>Num</code>.</p> <ul> <li>Logical operators: <code>and</code>, <code>or</code>, <code>not</code></li> <li>Ternary expressions: <code>... if &lt;condition&gt; else ...</code></li> <li>If statements: <code>if &lt;condition&gt;:</code>, <code>elif &lt;condition&gt;:</code></li> <li>While loops: <code>while &lt;condition&gt;:</code></li> <li>Case guards: <code>case ... if &lt;condition&gt;:</code></li> </ul>"},{"location":"concepts/types/#instance-checks","title":"Instance Checks","text":"<p>Since <code>Num</code> is interchangeable with <code>int</code>, <code>float</code>, and <code>bool</code>, only <code>Num</code> is supported for type checks.</p> <pre><code>x = ...\n\n# Ok:\nisinstance(x, Num)\n\nmatch x:\n    case Num(value):\n        ...\n\n# Not ok:\nisinstance(x, int)\nisinstance(x, float)\nisinstance(x, bool)\n\nmatch x:\n    case int(value):\n        ...\n    case float(value):\n        ...\n    case bool(value):\n        ...\n</code></pre>"},{"location":"concepts/types/#conversion","title":"Conversion","text":"<p>Calling <code>int</code>, <code>float</code>, or <code>bool</code> is only supported for an argument of type <code>Num</code>.</p> <p>Details:</p> <ul> <li><code>int</code>: Equivalent to <code>math.trunc</code>.</li> <li><code>float</code>: Validates that the value is a <code>Num</code> and returns it as is.</li> <li><code>bool</code>: Validates that the value is a <code>Num</code> and returns <code>1</code> for <code>True</code> and <code>0</code> for <code>False</code>.</li> </ul>"},{"location":"concepts/types/#array","title":"Array","text":"<p><code>Array[T, Size]</code> stores a fixed number of elements of the same type.</p> <p>It has two type parameters:</p> <ul> <li><code>T</code>: The type of the elements.</li> <li><code>Size</code>: The number of elements.</li> </ul> <p>You can import <code>Array</code> from <code>sonolus.script.array</code>:</p> <pre><code>from sonolus.script.array import Array\n</code></pre>"},{"location":"concepts/types/#declaration_1","title":"Declaration","text":"<p>Arrays can be created using its constructor or the unary <code>+</code> operator.</p> <pre><code>a1 = Array[int, 3](1, 2, 3)\na2 = Array[int, 0]()\na3 = +Array[int, 3]  # Create a zero-initialized array\n</code></pre> <p>For type checker compatibility, the Python builtin <code>typing.Literal</code> or <code>Dim</code> may be used for an array's size: <pre><code>a1 = Array[int, Dim[3]](1, 2, 3)\na2 = Array[int, Literal[3]](1, 2, 3)\n</code></pre></p> <p>If at least one element is provided, the element type and size can be inferred:</p> <pre><code>a3 = Array(1, 2, 3)\n</code></pre> <p>Since <code>Array</code> takes type parameters, it is considered a generic type. A version of <code>Array</code> with type parameters provided is considered a concrete type.</p> <pre><code>Array  # The Generic Array type\nArray[int, 3]  # A concrete Array type\n</code></pre> <p>The element type of an array must be concrete (not generic) and the size must be a non-negative compile-time  constant integer:</p> <pre><code># Ok\na4 = Array[Array[int, 3], 2](Array(1, 2, 3), Array(4, 5, 6))\n\n# Not ok:\na5 = Array[int, 0.5]()  # The size must be a non-negative integer\na6 = Array[Array, 2](Array(1, 2, 3), Array(4, 5, 6))  # The element type must be concrete (not generic)\n</code></pre> <p>Copies are made of any values provided to the constructor:</p> <pre><code>pair = Pair(1, 2)\na = Array[Pair, 1](pair)\nassert a[0] == Pair(1, 2)\n\npair.x = 3\nassert a[0] == Pair(1, 2)  # The value in the array is independent of the original value\n</code></pre>"},{"location":"concepts/types/#operations_1","title":"Operations","text":"<p>An array can be copied with the unary <code>+</code> operator, which creates a new array with the same elements:</p> <pre><code>a = Array(1, 2, 3)\nb = +a\nassert b == Array(1, 2, 3)\n</code></pre> <p>The value of an array can be copied from another array using the copy from operator (<code>@=</code>)<sup>1</sup>:</p> <pre><code>source_array = Array(1, 2, 3)\ndestination_array = Array(0, 0, 0)\n\ndestination_array @= source_array\nassert destination_array == Array(1, 2, 3)\n</code></pre> <p>Arrays can be compared for equality and inequality:</p> <pre><code>assert Array(1, 2, 3) == Array(1, 2, 3)\nassert Array(1, 2, 3) != Array(4, 5, 6)\n</code></pre> <p>Elements can be accessed by index:</p> <pre><code>a = Array(1, 2, 3)\nassert a[0] == 1\nassert a[1] == 2\nassert a[2] == 3\n</code></pre> <p>Elements can be updated by index, copying the given value into the corresponding element of the array:</p> <pre><code>a = Array(1, 2, 3)\na[0] = 4\nassert a == Array(4, 2, 3)\n</code></pre> <p>Warning</p> <p>If a value in an array is not a <code>Num</code>, updating it will copy the given value into the corresponding element of the array. However, that element remains independent of the original value, which may lead to unexpected results when updating either value.</p> <pre><code>pair = Pair(1, 2)\na = Array(Pair(0, 0))\n\na[0] = pair  # or equivalently: a[0] @= pair\nassert a[0] == Pair(1, 2)\n\npair.x = 3\nassert a[0] == Pair(1, 2)  # The value in the array is independent of the original value\n</code></pre> <p>For clarity, it's recommended to use the copy from operator (<code>@=</code>) when updating elements that are known to be an array or record.</p> <pre><code>a[0] @= pair\n</code></pre> <p>The length of an array can be accessed using the <code>len()</code> function:</p> <pre><code>assert len(Array(1, 2, 3)) == 3\n</code></pre> <p>Arrays can be iterated over using a for loop:</p> <pre><code>a = Array(1, 2, 3)\n\nfor element in a:\n    debug_log(element)\n</code></pre> <p>Other functionality:</p> <p><code>Array</code> inherits from <code>ArrayLike</code> and supports all of its methods.</p>"},{"location":"concepts/types/#instance-checks_1","title":"Instance Checks","text":"<p>Any array is considered an instance of the generic <code>Array</code> type.</p> <pre><code>a = Array(1, 2, 3)\nassert isinstance(a, Array)\n</code></pre> <p>Only an array with the exact element type and size is considered an instance of a concrete <code>Array[T, Size]</code> type.</p> <pre><code>a = Array(1, 2, 3)\nassert isinstance(a, Array[int, 3])\nassert not isinstance(a, Array[int, 2])\nassert not isinstance(a, Array[Pair, 3])\n</code></pre>"},{"location":"concepts/types/#enums","title":"Enums","text":"<p>There is limited support for enums containing <code>Num</code> values. Methods on enums are not supported.  When used as a type, any enum class is treated as <code>Num</code> and no enforcement is done on the values.</p> <pre><code>class MyEnum(IntEnum):\n    A = 1\n    B = 2\n\na = Array[MyEnum, 2](MyEnum.A, MyEnum.B)\nb = Array[MyEnum, 2](1, 2)\n</code></pre>"},{"location":"concepts/types/#record","title":"Record","text":"<p><code>Record</code> is the base class for user-defined types in Sonolus.py. It functions similarly to dataclasses.</p> <p>You can import <code>Record</code> from <code>sonolus.script.record</code>:</p> <pre><code>from sonolus.script.record import Record\n</code></pre>"},{"location":"concepts/types/#declaration_2","title":"Declaration","text":"<p>A record can be defined by inheriting from <code>Record</code> and defining zero or more fields as class attributes:</p> <pre><code>class MyPair(Record):\n    first: int\n    second: int\n</code></pre> <p>Fields must be annotated by <code>Num</code> (or equivalently <code>int</code>, <code>float</code>, or <code>bool</code>),  a concrete array type, or a concrete record type.</p> <pre><code># Not ok:\nclass MyRecord(Record):\n    array: Array  # Array is not concrete since it has unspecified type parameters\n</code></pre> <p>A <code>Record</code> subclass cannot be further subclassed.</p> <pre><code># Not ok:\nclass MyPairSubclass(MyPair):\n    third: int\n</code></pre>"},{"location":"concepts/types/#instantiation","title":"Instantiation","text":"<p>A constructor is automatically generated for the <code>Record</code> class and the unary <code>+</code>  operator can also be used to create a zero-initialized record.</p> <pre><code>pair_1 = MyPair(1, 2)\npair_2 = MyPair(first=1, second=2)\npair_3 = +MyPair  # Create a zero-initialized record\n</code></pre>"},{"location":"concepts/types/#generics","title":"Generics","text":"<p><code>Record</code> supports generics. If at least one type parameter is provided in the class definition, a generic  record type is created.</p> <pre><code>class MyGenericPair[T, U](Record):\n    first: T\n    second: U\n\nclass ContainsArray[T, Size](Record):\n    array: Array[T, Size]\n</code></pre> <p>Generic type parameters can be specified explicitly when instantiating a generic or inferred from the provided values:</p> <pre><code>pair_1 = MyGenericPair[int, int](1, 2)\npair_2 = MyGenericPair(1, 2)\n</code></pre> <p>The value of a type parameter can be accessed via the <code>type_var_value()</code> classmethod.</p> <pre><code>class MyGenericRecord[T](Record):\n    value: T\n\n    def my_type(self) -&gt; type:\n        return self.type_var_value(T)\n\n\nassert MyGenericRecord(1).my_type() == Num\n</code></pre>"},{"location":"concepts/types/#operations_2","title":"Operations","text":"<p>A record can be copied with the unary <code>+</code> operator, which creates a new record with the same field values:</p> <pre><code>pair = MyPair(1, 2)\ncopy_pair = +pair\nassert copy_pair == MyPair(1, 2)\n</code></pre> <p>The value of a record can be copied from another record using the copy from operator (<code>@=</code>)<sup>1</sup>:</p> <pre><code>source_record = MyPair(1, 2)\ndestination_record = MyPair(0, 0)\n\ndestination_record @= source_record\nassert destination_record == MyPair(1, 2)\n</code></pre> <p>Records can be compared for equality and inequality:</p> <pre><code>assert MyPair(1, 2) == MyPair(1, 2)\nassert MyPair(1, 2) != MyPair(3, 4)\n</code></pre> <p>Dunder methods can be implemented to define custom behavior for records:</p> <pre><code>class MyAddablePair(Record):\n    first: int\n    second: int\n\n    def __add__(self, other: MyAddablePair) -&gt; MyAddablePair:\n        return MyAddablePair(self.first + other.first, self.second + other.second)\n</code></pre> <p>If a dunder method has an in-place variant and the in-place method is not explicitly implemented (e.g. <code>__iadd__</code> is the in-place variant of <code>__add__</code>), <code>Record</code> will automatically generate one that  modifies the instance in place:</p> <pre><code>pair = MyAddablePair(1, 2)\nreference = pair\npair += MyAddablePair(3, 4)\nassert pair == reference == MyAddablePair(4, 6)  # The instance is modified in place\n</code></pre> <p>Regular methods, properties, classmethods, and staticmethods can also be defined in a <code>Record</code> subclass.</p> <pre><code>class MyRecord(Record):\n    def my_method(self):\n        ...\n\n    @property\n    def my_property(self):\n        ...\n\n    @property.setter\n    def my_property(self, value):\n        ...\n\n    @classmethod\n    def my_classmethod(cls):\n        ...\n\n    @staticmethod\n    def my_staticmethod():\n        ...\n</code></pre> <p>Fields can be accessed and updated using the dot operator:</p> <pre><code>pair = MyPair(1, 2)\nassert pair.first == 1\nassert pair.second == 2\n\npair.first = 3\nassert pair == MyPair(3, 2)\n</code></pre> <p>Warning</p> <p>If a value in a record is not a <code>Num</code>, updating it will copy the given value into the corresponding field of the record. However, that field remains independent of the original value.</p> <pre><code>array = Array(1, 2, 3)\nrecord = MyRecord(array)\n\nrecord.array = Array(4, 5, 6)  # or equivalently: record.array @= Array(4, 5, 6)\nassert record.array == Array(4, 5, 6)\n\narray[0] = 7\nassert record.array == Array(4, 5, 6)  # The value in the record is independent of the original\n</code></pre> <p>For clarity, it's recommended to use the copy from operator (<code>@=</code>) when updating fields that are known to be an array or record.</p> <pre><code>record.array @= array\n</code></pre>"},{"location":"concepts/types/#instance-checks_2","title":"Instance Checks","text":"<p>Any record is considered an instance of the generic <code>Record</code> type:</p> <pre><code>pair = MyPair(1, 2)\nassert isinstance(pair, Record)\n</code></pre> <p>If a record is generic, any instance of it is considered an instance of the generic type:</p> <pre><code>pair = MyGenericPair[int, int](1, 2)\nassert isinstance(pair, MyGenericPair)\n</code></pre> <p>Only an instance of a record with the exact field types is considered an instance of a concrete <code>Record</code> type:</p> <pre><code>pair = MyPair(1, 2)\nassert isinstance(pair, MyPair[int, int])\nassert not isinstance(pair, MyPair[int, Array[int, 2]])\n</code></pre>"},{"location":"concepts/types/#transient-types","title":"Transient Types","text":"<p>In addition to the core types, the following transient types are available. There are some restrictions on how they can be used:</p> <ul> <li>They cannot be used as type arguments:     <pre><code># Not ok:\nArray[str, 3]\n</code></pre></li> <li>They cannot be used as a field types:     <pre><code># Not ok:\nclass MyRecord(Record):\n    field: str\n\n# Not ok:\nclass MyArchetype(PlayArchetype):\n    field: str = imported()\n</code></pre></li> </ul>"},{"location":"concepts/types/#tuple","title":"tuple","text":"<p>The built-in <code>tuple</code> type can be declared and destructured as usual:</p> <pre><code>t = (1, (2, 3))\na, (b, c) = t\n</code></pre> <p>Tuples may be indexed, but the given index must be a compile-time constant:</p> <pre><code>t = (1, 2, 3)\n\n# Ok\ndebug_log(t[0])\n\n# Not ok:\ndebug_log(t[random_integer(0, 2)])\n</code></pre> <p>They may also be created as an *args argument to a function and unpacked as an argument to a function:</p> <pre><code>def f1(a, b, c):\n    return a + b + c\n\ndef f2(*args):\n    return f1(*args)\n</code></pre> <p>Iterating over a tuple is also supported, but they are expanded at compile time, so iterating over large tuples may significantly increase the size of the compiled engine and slow down compilation:</p> <pre><code>t = (1, 2, 3)\nfor x in t:\n    debug_log(x)\n</code></pre>"},{"location":"concepts/types/#dict","title":"dict","text":"<p>Dicts can be created by the **kwargs syntax and unpacked as arguments to a function:</p> <pre><code>def f1(a, b):\n    return a + b\n\ndef f2(**kwargs):\n    return f1(**kwargs)\n</code></pre>"},{"location":"concepts/types/#str","title":"str","text":"<p>Strings can be created and compared for equality and inequality:</p> <pre><code>s1 = 'abc'\ns2 = 'def'\n\nassert s1 == 'abc'\nassert s1 != s2\n</code></pre>"},{"location":"concepts/types/#special-constants","title":"Special Constants","text":"<p>The built-in <code>None</code>, <code>Ellipsis</code>, and <code>NotImplemented</code> constants are supported.</p> <p><code>None</code> is the only supported right-side operand for the <code>is</code> and <code>is not</code> operators.</p> <pre><code>a = None\nb = 1\n\n# Ok\na is None\nb is not None\n\n# Not ok:\nb is b\n</code></pre>"},{"location":"concepts/types/#other-types","title":"Other types","text":"<p>Classes themselves are considered instances of <code>type</code>. They may be used as arguments to functions, but annotating a record field as <code>type</code> or declaring an array with element type <code>type</code> is not supported.</p> <p>Functions or methods may be used as arguments to functions, but annotating a record field or setting an array element type to <code>Callable</code> is not supported.</p>"},{"location":"concepts/types/#storing-instances-of-transient-types-in-records","title":"Storing Instances of Transient Types in Records","text":"<p>Warning</p> <p>The following is advanced usage and is unnecessary for most use cases.</p> <p>While transient types cannot be used as type parameters or as a Record field's type, it is possible to store them in a generic record in a field annotated by a type parameter. Type arguments must not be explicitly provided when doing so. If multiple fields are annotated by the same type parameter, all such fields may be required to hold the exact same value in some cases.</p> <p>For example, a version of the <code>filter</code> function can be implemented as follows (see Iterables  for more information on iterators):</p> <pre><code>class _FilteringIterator[T, Fn](Record, SonolusIterator):\n    fn: Fn\n    iterator: T\n\n    def next(self) -&gt; Maybe[T]:\n        while True:\n            value = self.iterator.next()\n            if value.is_nothing:\n                return Nothing\n            inside = value.get()\n            if self.fn(inside):\n                return Some(inside)\n\n\ndef my_filter[T, Fn](iterable: T, fn: Fn) -&gt; T:\n    return _FilteringIterator(fn, iterable.__iter__())\n</code></pre> <ol> <li> <p>The copy from operator (<code>@=</code>) is officially the in-place matrix multiplication operator in Python, but it has been repurposed in Sonolus.py for copying Arrays and Records.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"guides/","title":"Guides","text":"<p>This sections contains guides on Sonolus.py features. By going through this section, you'll learn the essential concepts needed to understand how existing engines like pydori work and to create new engines.</p>"},{"location":"guides/bucket/","title":"Buckets &amp; Judgment","text":""},{"location":"guides/bucket/#declaring-buckets","title":"Declaring Buckets","text":"<p>Buckets define how notes are displayed on the results screen. Typically, each kind of note has its own bucket and therefore its own entry on the results screen. Buckets are defined using the <code>@buckets</code> decorator and the <code>bucket</code> function:</p> <pre><code>from sonolus.script.bucket import buckets, bucket, Bucket, bucket_sprite\nfrom sonolus.script.text import StandardText\n\nSkin = ...\n\n@buckets\nclass Buckets:\n    tap_note: Bucket = bucket(\n        sprites=[\n            bucket_sprite(\n                sprite=Skin.tap_note,\n                x=0,\n                y=0,\n                w=2,\n                h=2,\n                rotation=-90,\n            ),\n        ],\n        unit=StandardText.MILLISECOND_UNIT,\n    )\n</code></pre> <p>Buckets have sprites used for diplay on the results screen, which are defined using the <code>bucket_sprite</code> function. They may also have a unit, which can either be a built-in from <code>StandardText</code> or a custom string. Conventionally, the unit for most engines should be set to <code>StandardText.MILLISECOND_UNIT</code> to indicate that the bucket is measured in milliseconds.</p>"},{"location":"guides/bucket/#judgment-windows","title":"Judgment Windows","text":"<p>Sonolus notes are judged on a scale from best to worst of:</p> <ul> <li><code>Judgment.PERFECT</code></li> <li><code>Judgment.GREAT</code></li> <li><code>Judgment.GOOD</code></li> <li><code>Judgment.MISS</code></li> </ul> <p>The <code>JudgmentWindow</code> class is useful for defining the judgment windows of a note in seconds, and judging a note based on the actual and expected (target) hit times:</p> <pre><code>from sonolus.script.bucket import JudgmentWindow, Judgment\nfrom sonolus.script.interval import Interval\n\nnote_judgment_window = JudgmentWindow(\n    perfect=Interval(-0.05, 0.05),\n    great=Interval(-0.1, 0.1),\n    good=Interval(-0.15, 0.15),\n)\n\nactual_time: float = ...\nexpected_time: float = ...\njudgment = note_judgment_window.judge(actual=actual_time, expected=expected_time)\n</code></pre>"},{"location":"guides/bucket/#bucket-window","title":"Bucket Window","text":"<p>For each bucket, the <code>window</code> attribute should be set during preprocessing to define the judgment windows for the bucket:</p> <pre><code>from sonolus.script.bucket import JudgmentWindow\n\nnote_judgment_window: JudgmentWindow = ...\nBuckets = ...\n\ndef init_buckets():\n    # Multiply by 1000 so buckets are in milliseconds.\n    Buckets.tap_note.window @= note_judgment_window * 1000\n</code></pre>"},{"location":"guides/coming-soon/","title":"Coming Soon","text":"<p>More guides are coming soon!</p>"},{"location":"guides/effect/","title":"Sound Effects","text":"<p>Sound effects are used to play audio, typically short clips, during the course of a level.</p>"},{"location":"guides/effect/#declaration","title":"Declaration","text":"<p>Effects are declared with the <code>@effects</code> decorator. Standard Sonolus effects are declared by using a value from <code>StandardEffect</code> as the type hint. Custom effects may also be defined using the <code>Effect</code> type hint and the <code>effect</code> function.</p> <pre><code>from sonolus.script.effect import effects, effect, StandardEffect, Effect\n\n\n@effects\nclass Effects:\n    perfect: StandardEffect.PERFECT\n    great: StandardEffect.GREAT\n\n    custom_effect: Effect = effect(\"name_of_custom_effect\")\n</code></pre>"},{"location":"guides/effect/#playing-an-effect","title":"Playing an Effect","text":"<p>To play an effect, you can use the <code>play</code> method of the effect. This method accepts an optional distance parameter to prevent the effect from playing if it was already played within the specified time in seconds:</p> <pre><code>from sonolus.script.effect import Effect\n\nmy_effect: Effect = ...\nmy_effect.play()\nmy_effect.play(distance=0.1)\n</code></pre> <p>Using a small non-zero distance is recommended as two instances of the same effect played in quick succession can be unpleasant to hear.</p>"},{"location":"guides/effect/#scheduling-an-effect","title":"Scheduling an Effect","text":"<p>An effect can be scheduled to play at a specific time using the <code>schedule</code> method:</p> <pre><code>from sonolus.script.effect import Effect\n\nmy_effect: Effect = ...\nmy_effect.schedule(time=5.0)\nmy_effect.schedule(time=5.0, distance=0.1)\n</code></pre> <p>Scheduling is not suitable for real-time effects such as responses to user input and may not work if the scheduled time is too close to the current time. Use <code>play</code> instead for real-time effects.</p>"},{"location":"guides/effect/#looping-an-effect","title":"Looping an Effect","text":"<p>An effect can be played in a loop using the <code>loop</code> method, which returns a <code>LoopedEffectHandle</code> that can be used to stop the loop:</p> <pre><code>from sonolus.script.effect import Effect, LoopedEffectHandle\n\nmy_effect: Effect = ...\nloop_handle: LoopedEffectHandle = my_effect.loop()\n\n# Later, stop the loop\nloop_handle.stop()\n</code></pre> <p>Similarly, an effect can be scheduled to loop using the <code>schedule_loop</code> method:</p> <pre><code>from sonolus.script.effect import Effect\n\nmy_effect: Effect = ...\nmy_effect.schedule_loop(start_time=3.0).stop(end_time=10.0)\n</code></pre>"},{"location":"guides/effect/#checking-effect-availability","title":"Checking Effect Availability","text":"<p>Some effects may not be available depending on which effect packs a user has selected. To check if an effect is available, you can use the <code>is_available</code> method:</p> <pre><code>from sonolus.script.effect import Effect\n\nmy_effect: Effect = ...\n\nif my_effect.is_available():\n    # The effect is available, you can use it.\n    ...\nelse:\n    # Do something else, such as using a fallback.\n    ...\n</code></pre>"},{"location":"guides/particle/","title":"Particles","text":"<p>Particle effects are typically used for visuals such as the effect when a note is hit. They are somewhat similar to sprites, but may contain their own animations and support functionality such as looping. However, they come with the restriction that they do not have their own z-indexes, and thus are always drawn on top of sprites while having no set order between themselves.</p>"},{"location":"guides/particle/#declaration","title":"Declaration","text":"<p>Particles are declared with the <code>@particles</code> decorator. Standard Sonolus particles are declared by using a value from <code>StandardParticle</code> as the type hint. Custom particles may also be defined using the <code>Particle</code> type hint and the <code>particle</code> function.</p> <pre><code>from sonolus.script.particle import particles, particle, StandardParticle, Particle\n\n@particles\nclass Particle:\n    tap_note_hit_linear: StandardParticle.NOTE_LINEAR_TAP_CYAN\n    tap_note_hit_circular: StandardParticle.NOTE_CIRCULAR_TAP_CYAN\n\n    custom_particle: Particle = particle(\"name_of_custom_particle\")\n</code></pre>"},{"location":"guides/particle/#spawning-a-particle","title":"Spawning a Particle","text":"<p>To spawn a particle, you can use the <code>spawn</code> method of the particle. This  method accepts a <code>Quad</code> object that defines the position of the particle on the screen, a duration in seconds determining how quick the particle animation should play, and optionally whether the particle should loop:</p> <pre><code>from sonolus.script.particle import Particle\nfrom sonolus.script.quad import Quad\n\nmy_particle: Particle = ...\nmy_quad = Quad(\n    tl=Vec2(-0.5, 0.5),\n    tr=Vec2(0.5, 0.5),\n    bl=Vec2(-0.5, -0.5),\n    br=Vec2(0.5, -0.5),\n)\nhandle = my_particle.spawn(my_quad, duration=0.5, loop=False)\n</code></pre> <p>The call to <code>spawn</code> will return a <code>ParticleHandle</code> that can be used to control the particle after it has been  spawned.</p>"},{"location":"guides/particle/#moving-a-particle","title":"Moving a Particle","text":"<p>A particle can be moved using the <code>move</code> method of the <code>ParticleHandle</code>:</p> <pre><code>from sonolus.script.particle import ParticleHandle\nfrom sonolus.script.quad import Quad\n\nmy_particle_handle: ParticleHandle = ...\nnew_position: Quad = ...\nmy_particle_handle.move(new_position)\n</code></pre>"},{"location":"guides/particle/#destroying-a-particle","title":"Destroying a Particle","text":"<p>A particle can be destroyed using the <code>destroy</code> method of the <code>ParticleHandle</code>:</p> <pre><code>from sonolus.script.particle import ParticleHandle\n\nmy_particle_handle: ParticleHandle = ...\nmy_particle_handle.destroy()\n</code></pre>"},{"location":"guides/particle/#checking-particle-availability","title":"Checking Particle Availability","text":"<p>A particle effect may not be available depending on which effects a user has selected. To check if a particle is available, you can use the <code>is_available</code> method of a  <code>Particle</code>:</p> <pre><code>from sonolus.script.particle import Particle\n\nmy_particle: Particle = ...\nif my_particle.is_available():\n    # The particle is available, you can spawn it.\n    ...\nelse:\n    # Do something else, such as using a fallback particle.\n    ...\n</code></pre>"},{"location":"guides/play/","title":"Play","text":"<p>Play mode is generally the most important mode of a Sonolus engine, as it defines the interactive gameplay experience.</p>"},{"location":"guides/play/#configuration","title":"Configuration","text":"<p>Play mode is configured using the <code>PlayMode</code> class:</p> <pre><code>from sonolus.script.engine import PlayMode\n\n# ... import your archetypes, skin, effects, particles, and buckets\n\nplay_mode = PlayMode(\n    archetypes=[\n        Stage,\n        Note,\n        # etc.\n    ],\n    skin=Skin,\n    effects=Effects,\n    particles=Particles,\n    buckets=Buckets,\n)\n</code></pre>"},{"location":"guides/play/#play-archetypes","title":"Play Archetypes","text":"<p>Gameplay logic in play mode is defined via archetypes. Archetypes may correspond to individual notes, or other gameplay elements such as the stage. They may also be dedicated to special purposes such as initializing, input handing, and so forth depending on the needs of an engine.</p> <p>In play mode, archetypes inherit from the <code>PlayArchetype</code> class:</p> <pre><code>from sonolus.script.archetype import PlayArchetype\n\n\nclass Note(PlayArchetype):\n    is_score = True\n\n    # All of these methods are optional\n\n    def preprocess(self):\n        ...\n\n    def spawn_order(self) -&gt; float:\n        ...\n\n    def should_spawn(self) -&gt; bool:\n        ...\n\n    def initialize(self):\n        ...\n\n    def update_sequential(self):\n        ...\n\n    def touch(self):\n        ...\n\n    def update_parallel(self):\n        ...\n\n    def terminate(self):\n        ...\n</code></pre> <p>Archetypes that correspond to notes and contribute to scoring should set the <code>is_score</code> attribute to <code>True</code>.</p>"},{"location":"guides/play/#entities","title":"Entities","text":"<p>Entities are instances of archetypes. For example an engine may have a <code>Note</code> archetype, and each individual note is considered an entity.</p>"},{"location":"guides/play/#callbacks","title":"Callbacks","text":"<p>Callbacks determine the behavior of entities in play mode:</p> <ul> <li><code>preprocess</code>:   Called as the level is loaded</li> <li><code>spawn_order</code>:   Called after preprocessing is done to determine which order entities. should be spawned in.   Smaller values are spawned first; a common approach is to use the spawn time of the entity.</li> <li><code>should_spawn</code>:   Called to determine whether the entity should be spawned. Called each frame if the previous entity is spawned.</li> <li><code>initialize</code>:   Called when the entity is spawned at the start of the frame. Runs in parallel with other <code>initialize</code> calls.</li> <li><code>update_sequential</code>:   Called each frame an entity is active after <code>initialize</code> callbacks are done.   Since it's called sequentially, it can update shared state.</li> <li><code>touch</code>:   Called sequentially each frame after <code>update_sequential</code> if there's touch input. Has access to touch input data.</li> <li><code>update_parallel</code>:   Called after <code>touch</code> and <code>update_sequential</code> callbacks are done. Runs in parallel with other <code>update_parallel</code> calls.   Has better performance due to parallel execution, so most logic such as drawing sprites should be done here.</li> <li><code>terminate</code>:   Called after <code>update_parallel</code> callbacks are done when an entity is being despawned.   Runs in parallel with other <code>terminate</code> calls.</li> </ul> <p>If not defined in an archetype, the default behavior of each callback is to do nothing.</p>"},{"location":"guides/project-structure/","title":"Project Structure","text":"<p>Typically, a Sonolus.py project will have something resembling the following structure:</p> <pre><code>&lt;project_name&gt;/\n\u251c\u2500\u2500 lib/          # Common code shared between modes\n\u251c\u2500\u2500 play/         # Code for play mode\n\u251c\u2500\u2500 watch/        # Code for watch mode\n\u251c\u2500\u2500 preview/      # Code for preview mode\n\u251c\u2500\u2500 tutorial/     # Code for tutorial mode\n\u251c\u2500\u2500 .../           # Additional code e.g. for converting charts from other formats\n\u251c\u2500\u2500 project.py    # Project configuration\n\u2514\u2500\u2500 level.py      # Level configuration (for development server levels)\nresources/        # Resources for the engine\n</code></pre> <p>When starting a new project, you'll probably want to use the template project to initialize your project structure.</p>"},{"location":"guides/project-structure/#resources","title":"Resources","text":"<p>The <code>resources/</code> directory contains the resources used by the engine, and its contents are used by the development server. It supports resource source code (like the contents of sonolus-free-pack) sonolus collection (<code>.scp</code>) files, and raw image and audio files.</p>"},{"location":"guides/project-structure/#project-configuration","title":"Project Configuration","text":"<p>By default, Sonolus.py searches for a module named <code>project</code> in the root package of the project (i.e. the <code>&lt;project_name&gt;/project.py</code> file). This module should contain the project configuration and typically should contain the engine configuration as well. For example, pydori's project.py contains the following:</p> pydori/project.py <pre><code>from sonolus.script.engine import Engine, EngineData\nfrom sonolus.script.project import Project\n\nfrom pydori.level import load_levels\nfrom pydori.lib.options import Options\nfrom pydori.lib.ui import ui_config\nfrom pydori.play.mode import play_mode\nfrom pydori.preview.mode import preview_mode\nfrom pydori.tutorial.mode import tutorial_mode\nfrom pydori.watch.mode import watch_mode\n\nengine = Engine(\n    name=\"pydori\",\n    title=\"pydori\",\n    skin=\"pixel\",\n    particle=\"pixel\",\n    background=\"darkblue\",\n    data=EngineData(\n        ui=ui_config,\n        options=Options,\n        play=play_mode,\n        watch=watch_mode,\n        preview=preview_mode,\n        tutorial=tutorial_mode,\n    ),\n)\n\nproject = Project(\n    engine=engine,\n    levels=load_levels,\n)\n</code></pre> <p>This file defines the name and title of the engine, some defaults for players, and links to the various modes as well as the ui and option configurations. It also links to the levels to load for the development server.</p>"},{"location":"guides/screen/","title":"Screen","text":"<p>Sonolus has a screen coordinate-system with y-coordinates ranging from <code>+1</code> at the top of the screen to <code>-1</code> at the  bottom of the screen. The x-coordinate in the screen depend on the aspect ratio of a device, with <code>-aspect_ratio</code>  at the left and <code>+aspect_ratio</code> at the right. When designing engines, it's important to keep in mind that aspect ratios typically range from narrow (e.g. 4:3) to wide (e.g. 21:9) to ensure that nothing is cut off on devices with some aspect ratios.</p> <p>The screen coordinate system is used for drawing sprites, positioning particles, and positioning UI elements.</p>"},{"location":"guides/screen/#checking-screen-size","title":"Checking Screen Size","text":"<p>You can check aspect ratio using the <code>aspect_ratio</code> function:</p> <pre><code>from sonolus.script.runtime import aspect_ratio\n\n\nthe_aspect_ratio = aspect_ratio()\n</code></pre> <p>For convenience, the <code>screen</code> function returns a <code>Rect</code>  that can be used to check the coordinates of each corner of the screen:</p> <pre><code>from sonolus.script.runtime import screen\n\nthe_screen = screen()\ntop_left = the_screen.tl\n</code></pre>"},{"location":"guides/setup/","title":"Setup","text":"<p>Sonolus.py is published on PyPI, and can be installed with any package manager.</p> <p>For example, you can use pip to install it:</p> <pre><code>pip install sonolus.py\n</code></pre> <p>Or add it to a project using uv:</p> <pre><code>uv add sonolus.py\n</code></pre>"},{"location":"guides/skin/","title":"Skins &amp; Sprites","text":"<p>Skins define sprites (images) that can be drawn in  Sonolus. An engine typically has a single skin used by all modes.</p>"},{"location":"guides/skin/#declaration","title":"Declaration","text":"<p>Skins are declared with the <code>@skin</code> decorator. Standard Sonolus sprites are declared by using a value from <code>StandardSprite</code> as the type hint. Custom sprites may also be defined using the <code>Sprite</code> type hint and the <code>sprite</code> function.</p> <pre><code>from sonolus.script.sprite import skin, StandardSprite, sprite, Sprite\n\n\n@skin\nclass Skin:\n    tap_note: StandardSprite.NOTE_HEAD_CYAN\n\n    custom_sprite: Sprite = sprite(\"name_of_custom_sprite\")\n</code></pre>"},{"location":"guides/skin/#render-mode","title":"Render Mode","text":"<p>The skin also defines the render mode for sprites. This is done by defining a <code>render_mode</code> attribute in a skin class to a value from <code>RenderMode</code>.</p> <pre><code>from sonolus.script.sprite import skin, RenderMode\n\n\n@skin\nclass Skin:\n    render_mode = RenderMode.LIGHTWEIGHT\n    ...\n</code></pre> <p>The three render modes available are:</p> <ul> <li><code>RenderMode.LIGHTWEIGHT</code>: Less taxing and well suited for engines implementing realistic 3D-like graphs, but is less accurate for some engines.</li> <li><code>RenderMode.STANDARD</code>: Slower, but more accurate for some engines and works better with some special cases such as drawing sprites in a triangular shape.</li> <li><code>RenderMode.DEFAULT</code>: Use either <code>LIGHTWEIGHT</code> or <code>STANDARD</code> based on the user's preferences. This is the default mode, and is suitable for engines where <code>STANDARD</code> is preferred, but are still playable in <code>LIGHTWEIGHT</code> when more performance is desired.</li> </ul>"},{"location":"guides/skin/#drawing-a-sprite","title":"Drawing a Sprite","text":"<p>To draw a sprite, you can use the <code>draw</code> method of the sprite. This method accepts a <code>Quad</code> object that defines the position of the sprite on the screen, as well as an optional z-index to control the rendering order of the sprite and an alpha (transparency) value:</p> <pre><code>from sonolus.script.sprite import Sprite\nfrom sonolus.script.quad import Quad\nfrom sonolus.script.vec import Vec2\n\nmy_sprite: Sprite = ...\nmy_quad = Quad(\n    tl=Vec2(-0.5, 0.5),\n    tr=Vec2(0.5, 0.5),\n    bl=Vec2(-0.5, -0.5),\n    br=Vec2(0.5, -0.5),\n)\nmy_sprite.draw(my_quad, z=123.4, a=1.0)\n</code></pre> <p>Z-index (<code>z</code>) is important to set correctly, as it ensures that sprites overlap in the correct order. It's especially important for two sprites that may overlap to have different z-index values, or they may conflict and render  incorrectly (z-fighting).</p> <p>Alpha (<code>a</code>) is a value between <code>0.0</code> (fully transparent) and <code>1.0</code> (fully opaque). It controls the transparency of the sprite when drawn. If not provided, it defaults to <code>1.0</code>.</p>"},{"location":"guides/skin/#checking-sprite-availability","title":"Checking Sprite Availability","text":"<p>Some skins may not have some sprites available, especially custom sprites. To check if a sprite is available, you can use the <code>is_available</code> property:</p> <pre><code>from sonolus.script.sprite import Sprite\n\nmy_sprite: Sprite = ...\n\nif my_sprite.is_available:\n    # The sprite is available, you can use it.\n    ...\nelse:\n    # Do something else, such as using a fallback.\n    ...\n</code></pre>"},{"location":"guides/skin/#layers","title":"Layers","text":"<p>To manage z-indexes, most engines will probably want to have some concept of a \"layer\" to categorize which sprites should be drawn on top of others. Additionally, some offset computed based on position is useful to ensure that two sprites on the same layer always have distinct z-indexes to prevent z-fighting.</p> <p>For example, the pydori engine uses the following code to define layers:</p> <pre><code>LAYER_STAGE = 0\nLAYER_LANE = 1\nLAYER_JUDGE_LINE = 2\n\nLAYER_CONNECTOR = 10\n\nLAYER_PREVIEW_COVER = 20\nLAYER_MEASURE_LINE = 21\nLAYER_SIM_LINE = 22\nLAYER_TIME_LINE = 23\nLAYER_BPM_CHANGE_LINE = 24\nLAYER_TIMESCALE_CHANGE_LINE = 25\n\nLAYER_NOTE_HEAD = 30\nLAYER_NOTE = 31\nLAYER_ARROW = 32\n\n\ndef get_z(layer: int, lane: float = 0, y: float = 0) -&gt; float:\n    \"\"\"Calculate z-index based on layer, lane, and y-coordinate.\n\n    Lane and y are used to prevent z-fighting between sprites in the same layer.\n    \"\"\"\n    return layer * 10000 + lane * 100 + y\n</code></pre>"},{"location":"guides/ui/","title":"UI","text":""},{"location":"guides/ui/#ui-configuration","title":"UI Configuration","text":"<p>Defaults for UI configuration such as the visibility of UI elements as well as animation settings can be set with the <code>UiConfig</code> class:</p> <pre><code>from sonolus.script.ui import UiConfig, UiJudgmentErrorStyle, UiJudgmentErrorPlacement\n\nui_config = UiConfig(\n    judgment_error_style=UiJudgmentErrorStyle.LATE,\n    judgment_error_placement=UiJudgmentErrorPlacement.TOP,\n    judgment_error_min=20.0,\n)\n</code></pre>"},{"location":"guides/ui/#runtime-ui-configuration","title":"Runtime UI Configuration","text":"<p>The placement of UI elements during gameplay are set during preprocessing of each mode. Sonolus.py provides the <code>runtime_ui</code> function to access the runtime UI configuration, which can be used to set the placement of UI elements:</p> <pre><code>from sonolus.script.runtime import runtime_ui, screen, HorizontalAlign\nfrom sonolus.script.vec import Vec2\n\n\ndef init_ui():\n    ui = runtime_ui()\n    ui.menu.update(\n        anchor=screen().tr + Vec2(-0.05, -0.05),\n        pivot=Vec2(1, 1),\n        dimensions=Vec2(0.15, 0.15) * ui.menu_config.scale,\n        rotation=0,\n        alpha=ui.menu_config.alpha,\n        horizontal_align=HorizontalAlign.CENTER,\n        background=True,\n    )\n    ui.judgment.update(\n        anchor=Vec2(0, -0.25),\n        pivot=Vec2(0.5, 0),\n        dimensions=Vec2(0, 0.15) * ui.judgment_config.scale,\n        rotation=0,\n        alpha=ui.judgment_config.alpha,\n        horizontal_align=HorizontalAlign.CENTER,\n        background=False,\n    )\n    ui.combo_value.update(\n        anchor=Vec2(screen().r * 0.7, 0),\n        pivot=Vec2(0.5, 0),\n        dimensions=Vec2(0, 0.2) * ui.combo_config.scale,\n        rotation=0,\n        alpha=ui.combo_config.alpha,\n        horizontal_align=HorizontalAlign.CENTER,\n        background=False,\n    )\n    ui.combo_text.update(\n        anchor=Vec2(screen().r * 0.7, 0),\n        pivot=Vec2(0.5, 1),\n        dimensions=Vec2(0, 0.12) * ui.combo_config.scale,\n        rotation=0,\n        alpha=ui.combo_config.alpha,\n        horizontal_align=HorizontalAlign.CENTER,\n        background=False,\n    )\n    ui.primary_metric_bar.update(\n        anchor=screen().tl + Vec2(0.05, -0.05),\n        pivot=Vec2(0, 1),\n        dimensions=Vec2(0.75, 0.15) * ui.primary_metric_config.scale,\n        rotation=0,\n        alpha=ui.primary_metric_config.alpha,\n        horizontal_align=HorizontalAlign.LEFT,\n        background=True,\n    )\n    ui.primary_metric_value.update(\n        anchor=screen().tl + Vec2(0.05, -0.05) + Vec2(0.715, -0.035) * ui.primary_metric_config.scale,\n        pivot=Vec2(0, 1),\n        dimensions=Vec2(0, 0.08) * ui.primary_metric_config.scale,\n        rotation=0,\n        alpha=ui.primary_metric_config.alpha,\n        horizontal_align=HorizontalAlign.RIGHT,\n        background=False,\n    )\n    ui.secondary_metric_bar.update(\n        anchor=screen().tr - Vec2(0.05, 0.05) - Vec2(0.05, 0) - Vec2(0.15, 0) * ui.menu_config.scale,\n        pivot=Vec2(1, 1),\n        dimensions=Vec2(0.75, 0.15) * ui.secondary_metric_config.scale,\n        rotation=0,\n        alpha=ui.secondary_metric_config.alpha,\n        horizontal_align=HorizontalAlign.LEFT,\n        background=True,\n    )\n    ui.secondary_metric_value.update(\n        anchor=screen().tr\n               - Vec2(0.05, 0.05)\n               - Vec2(0.05, 0)\n               - Vec2(0.15, 0) * ui.menu_config.scale\n               - Vec2(0.035, 0.035) * ui.primary_metric_config.scale,\n        pivot=Vec2(1, 1),\n        dimensions=Vec2(0, 0.08) * ui.secondary_metric_config.scale,\n        rotation=0,\n        alpha=ui.secondary_metric_config.alpha,\n        horizontal_align=HorizontalAlign.RIGHT,\n        background=False,\n    )\n    ui.progress.update(\n        anchor=screen().bl + Vec2(0.05, 0.05),\n        pivot=Vec2(0, 0),\n        dimensions=Vec2(screen().w - 0.1, 0.15 * ui.progress_config.scale),\n        rotation=0,\n        alpha=ui.progress_config.alpha,\n        horizontal_align=HorizontalAlign.CENTER,\n        background=True,\n    )\n    ui.previous.update(\n        anchor=Vec2(screen().l + 0.05, 0),\n        pivot=Vec2(0, 0.5),\n        dimensions=Vec2(0.15, 0.15) * ui.navigation_config.scale,\n        rotation=0,\n        alpha=ui.navigation_config.alpha,\n        background=True,\n    )\n    ui.next.update(\n        anchor=Vec2(screen().r - 0.05, 0),\n        pivot=Vec2(1, 0.5),\n        dimensions=Vec2(0.15, 0.15) * ui.navigation_config.scale,\n        rotation=0,\n        alpha=ui.navigation_config.alpha,\n        background=True,\n    )\n    ui.instruction.update(\n        anchor=Vec2(0, 0.2),\n        pivot=Vec2(0.5, 0.5),\n        dimensions=Vec2(1.2, 0.15) * ui.instruction_config.scale,\n        rotation=0,\n        alpha=ui.instruction_config.alpha,\n        background=True,\n    )\n</code></pre> <p>Since some UI elements only appear in certain modes, their configuration is ignored in other modes.</p>"},{"location":"guides/usage/","title":"Usage","text":"<p>Sonolus.py is mainly used via its command line interface (CLI) with the <code>sonolus-py</code> command.</p>"},{"location":"guides/usage/#development-server","title":"Development Server","text":"<p>To start a development server to test an engine, use the <code>dev</code> command:</p> <pre><code>sonolus-py dev\n</code></pre> <p>For larger projects, you might want to specify a specific mode to run to speed up startup:</p> <pre><code>sonolus-py dev --[play|watch|preview|tutorial]\n</code></pre>"},{"location":"guides/usage/#checking-for-errors","title":"Checking for Errors","text":"<p>To just check for errors in the project without attempting to build it or starting a server, use the <code>check</code> command:</p> <pre><code>sonolus-py check\n</code></pre>"},{"location":"guides/usage/#building-for-production","title":"Building for Production","text":"<p>To build engine data for production, use the <code>build</code> command:</p> <pre><code>sonolus-py build\n</code></pre> <p>This will create a <code>build/</code> directory containing the built engine data. These contents can be used in a  production Sonolus server such a server written with  Sonolus Express.</p>"},{"location":"reference/","title":"Reference","text":"<p>This section provides detailed information on available classes and functions.</p>"},{"location":"reference/builtins/","title":"builtins","text":"<p>Supported Python builtins.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.abs","title":"<code>abs(x: builtins.int | builtins.float) -&gt; builtins.int | builtins.float</code>","text":"<p>Return the absolute value of a number.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int | float</code> <p>A number.</p> required <p>Returns:</p> Type Description <code>int | float</code> <p>The absolute value of x.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.all","title":"<code>all(iterable: Iterable[builtins.bool]) -&gt; builtins.bool</code>","text":"<p>Return True if all elements of the iterable are true.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[bool]</code> <p>The iterable to evaluate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if all elements are true, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.any","title":"<code>any(iterable: Iterable[builtins.bool]) -&gt; builtins.bool</code>","text":"<p>Return True if any element of the iterable is true.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[bool]</code> <p>The iterable to evaluate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if any element is true, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.bool","title":"<code>bool(x: builtins.int | builtins.float | builtins.bool) -&gt; builtins.bool</code>","text":"<p>Convert a value to a Boolean.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int | float | bool</code> <p>The value to convert.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>The Boolean value of x.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.callable","title":"<code>callable(obj: object) -&gt; bool</code>","text":"<p>Check if the object appears callable.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> <p>The object to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the object appears callable, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.enumerate","title":"<code>enumerate(iterable: Iterable[T], start: int = 0) -&gt; Iterator[tuple[int, T]]</code>","text":"<p>Return an enumerate object.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to enumerate.</p> required <code>start</code> <code>int</code> <p>The starting index.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[tuple[int, T]]</code> <p>An enumerate object.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.filter","title":"<code>filter(function: Callable[[T], builtins.bool] | None, iterable: Iterable[T]) -&gt; Iterator[T]</code>","text":"<p>Construct an iterator from those elements of iterable for which function returns true.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[[T], bool] | None</code> <p>A function that tests if each element should be included. If None, returns the elements that are true.</p> required <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to filter.</p> required <p>Returns:</p> Type Description <code>Iterator[T]</code> <p>An iterator yielding the filtered elements.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.float","title":"<code>float(x: builtins.int | builtins.float) -&gt; builtins.float</code>","text":"<p>Convert a number to a floating point number.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int | float</code> <p>The number to convert.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The floating point representation of x.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.int","title":"<code>int(x: builtins.int | builtins.float) -&gt; builtins.int</code>","text":"<p>Convert a number to an integer.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int | float</code> <p>The number to convert.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The integer representation of x.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.isinstance","title":"<code>isinstance(obj: object, classinfo: type | tuple[type, ...]) -&gt; builtins.bool</code>","text":"<p>Check if an object is an instance of a class or of a subclass thereof.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> <p>The object to check.</p> required <code>classinfo</code> <code>type | tuple[type, ...]</code> <p>A type or a tuple of types.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the object is an instance of classinfo, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.issubclass","title":"<code>issubclass(cls: type, classinfo: type | tuple[type, ...]) -&gt; builtins.bool</code>","text":"<p>Check if a class is a subclass of another class or a tuple of classes.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type</code> <p>The class to check.</p> required <code>classinfo</code> <code>type | tuple[type, ...]</code> <p>A class or a tuple of classes.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if cls is a subclass of classinfo, False otherwise.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.iter","title":"<code>iter(iterable: Iterable[T]) -&gt; Iterator[T]</code>","text":"<p>Return an iterator for the given iterable.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to convert to an iterator.</p> required <p>Returns:</p> Type Description <code>Iterator[T]</code> <p>An iterator over the elements of the iterable.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.len","title":"<code>len(s: object) -&gt; builtins.int</code>","text":"<p>Return the number of items in a container.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>object</code> <p>The container object.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The number of items in s.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.map","title":"<code>map(function: Callable[[T], S], iterable: Iterable[T]) -&gt; Iterator[S]</code>","text":"<p>Apply a function to every item of an iterable and return an iterator.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[[T], S]</code> <p>The function to apply.</p> required <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to process.</p> required <p>Returns:</p> Type Description <code>Iterator[S]</code> <p>An iterator with the results.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.max","title":"<code>max(*args, **kwargs)</code>","text":"<pre><code>max(\n    iterable: Iterable[T],\n    *,\n    key: Callable[[T], Any] | None = ...,\n) -&gt; T\n</code></pre><pre><code>max(\n    iterable: Iterable[builtins.int | builtins.float],\n    *,\n    default: builtins.int | builtins.float = ...,\n    key: Callable[[builtins.int | builtins.float], Any]\n    | None = ...,\n) -&gt; builtins.int | builtins.float\n</code></pre><pre><code>max(\n    arg1: T,\n    arg2: T,\n    *args: T,\n    key: Callable[[T], Any] | None = ...,\n) -&gt; T\n</code></pre> <p>Return the largest item in an iterable or the largest of multiple arguments.</p> <p>When called with a single iterable, returns the largest item from that iterable. When called with multiple arguments, returns the largest argument.</p> <p>Use the <code>key</code> parameter to specify a function that transforms each element before comparison. Use the <code>default</code> parameter to specify a value to return if the iterable is empty (supported only for numeric values).</p>"},{"location":"reference/builtins/#doc_stubs.builtins.min","title":"<code>min(*args, **kwargs)</code>","text":"<pre><code>min(\n    iterable: Iterable[T],\n    *,\n    key: Callable[[T], Any] | None = ...,\n) -&gt; T\n</code></pre><pre><code>min(\n    iterable: Iterable[builtins.int | builtins.float],\n    *,\n    default: builtins.int | builtins.float = ...,\n    key: Callable[[builtins.int | builtins.float], Any]\n    | None = ...,\n) -&gt; builtins.int | builtins.float\n</code></pre><pre><code>min(\n    arg1: T,\n    arg2: T,\n    *args: T,\n    key: Callable[[T], Any] | None = ...,\n) -&gt; T\n</code></pre> <p>Return the smallest item in an iterable or the smallest of multiple arguments.</p> <p>When called with a single iterable, returns the smallest item from that iterable. When called with multiple arguments, returns the smallest argument.</p> <p>Use the <code>key</code> parameter to specify a function that transforms each element before comparison. Use the <code>default</code> parameter to specify a value to return if the iterable is empty (supported only for numeric values).</p>"},{"location":"reference/builtins/#doc_stubs.builtins.next","title":"<code>next(iterator: Iterator[T]) -&gt; T</code>","text":"<p>Retrieve the next item from an iterator.</p> <p>Errors if the iterator is exhausted.</p> <p>Parameters:</p> Name Type Description Default <code>iterator</code> <code>Iterator[T]</code> <p>The iterator to retrieve the next item from.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The next item from the iterator.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.range","title":"<code>range(*args) -&gt; builtins.range</code>","text":"<pre><code>range(stop: builtins.int) -&gt; builtins.range\n</code></pre><pre><code>range(\n    start: builtins.int,\n    stop: builtins.int,\n    step: builtins.int = ...,\n) -&gt; builtins.range\n</code></pre> <p>Return an immutable sequence of numbers.</p> <p>When called with one argument, creates a sequence from 0 to that number (exclusive). When called with two arguments, creates a sequence from the first to the second (exclusive). When called with three arguments, the third argument specifies the step size.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.reversed","title":"<code>reversed(seq: Sequence[T]) -&gt; Iterator[T]</code>","text":"<p>Return a reverse iterator.</p> <p>Parameters:</p> Name Type Description Default <code>seq</code> <code>Sequence[T]</code> <p>The sequence to reverse.</p> required <p>Returns:</p> Type Description <code>Iterator[T]</code> <p>An iterator over the reversed sequence.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.round","title":"<code>round(number: builtins.int | builtins.float, ndigits: builtins.int = ...) -&gt; builtins.float</code>","text":"<p>Round a number to a given precision in decimal digits.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int | float</code> <p>The number to round.</p> required <code>ndigits</code> <code>int</code> <p>The number of decimal digits to round to.</p> <code>...</code> <p>Returns:</p> Type Description <code>float</code> <p>The rounded number.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.sum","title":"<code>sum(iterable: Iterable[builtins.int | builtins.float], /, start: builtins.int | builtins.float = 0) -&gt; builtins.int | builtins.float</code>","text":"<p>Return the sum of a 'start' value (default: 0) and an iterable of numbers.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[int | float]</code> <p>The iterable of numbers to sum.</p> required <code>start</code> <code>int | float</code> <p>The starting value to add to the sum.</p> <code>0</code> <p>Returns:</p> Type Description <code>int | float</code> <p>The total sum.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.super","title":"<code>super(cls: type = ..., instance: Any = ...) -&gt; Any</code>","text":"<p>Return a proxy object that delegates method calls to a parent or sibling class.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type</code> <p>The class to delegate</p> <code>...</code> <code>instance</code> <code>Any</code> <p>The instance to delegate to.</p> <code>...</code> <p>Returns:     A proxy object that can be used to call methods from the parent or sibling class.</p>"},{"location":"reference/builtins/#doc_stubs.builtins.zip","title":"<code>zip(*iterables: Iterable[T]) -&gt; Iterator[tuple[T, ...]]</code>","text":"<p>Return an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences.</p> <p>Parameters:</p> Name Type Description Default <code>*iterables</code> <code>Iterable[T]</code> <p>Iterables to aggregate.</p> <code>()</code> <p>Returns:</p> Type Description <code>Iterator[tuple[T, ...]]</code> <p>An iterator of aggregated tuples.</p>"},{"location":"reference/math/","title":"math","text":"<p>Supported functions in the Python standard library <code>math</code> module.</p>"},{"location":"reference/math/#doc_stubs.math.acos","title":"<code>acos(x: float) -&gt; float</code>","text":"<p>Compute the arccosine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A value between -1 and 1.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The arccosine of x in radians.</p>"},{"location":"reference/math/#doc_stubs.math.asin","title":"<code>asin(x: float) -&gt; float</code>","text":"<p>Compute the arcsine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A value between -1 and 1.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The arcsine of x in radians.</p>"},{"location":"reference/math/#doc_stubs.math.atan","title":"<code>atan(x: float) -&gt; float</code>","text":"<p>Compute the arctangent of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The arctangent of x in radians.</p>"},{"location":"reference/math/#doc_stubs.math.atan2","title":"<code>atan2(y: float, x: float) -&gt; float</code>","text":"<p>Compute the arctangent of y / x considering the quadrant.</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>float</code> <p>The y-coordinate.</p> required <code>x</code> <code>float</code> <p>The x-coordinate.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The arctangent of y / x in radians.</p>"},{"location":"reference/math/#doc_stubs.math.ceil","title":"<code>ceil(x: float) -&gt; int</code>","text":"<p>Return the smallest integer greater than or equal to x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The ceiling of x.</p>"},{"location":"reference/math/#doc_stubs.math.cos","title":"<code>cos(x: float) -&gt; float</code>","text":"<p>Compute the cosine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The angle in radians.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The cosine of x.</p>"},{"location":"reference/math/#doc_stubs.math.cosh","title":"<code>cosh(x: float) -&gt; float</code>","text":"<p>Compute the hyperbolic cosine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The hyperbolic cosine of x.</p>"},{"location":"reference/math/#doc_stubs.math.degrees","title":"<code>degrees(x: float) -&gt; float</code>","text":"<p>Convert radians to degrees.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>An angle in radians.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The angle in degrees.</p>"},{"location":"reference/math/#doc_stubs.math.floor","title":"<code>floor(x: float) -&gt; int</code>","text":"<p>Return the largest integer less than or equal to x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The floor of x.</p>"},{"location":"reference/math/#doc_stubs.math.log","title":"<code>log(x: float, base: float = ...) -&gt; float</code>","text":"<p>Compute the logarithm of x to the given base.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The number for which to compute the logarithm.</p> required <code>base</code> <code>float</code> <p>The base of the logarithm. If omitted, returns the natural logarithm of x.</p> <code>...</code> <p>Returns:</p> Type Description <code>float</code> <p>The logarithm of x to the specified base.</p>"},{"location":"reference/math/#doc_stubs.math.radians","title":"<code>radians(x: float) -&gt; float</code>","text":"<p>Convert degrees to radians.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>An angle in degrees.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The angle in radians.</p>"},{"location":"reference/math/#doc_stubs.math.sin","title":"<code>sin(x: float) -&gt; float</code>","text":"<p>Compute the sine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The angle in radians.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The sine of x.</p>"},{"location":"reference/math/#doc_stubs.math.sinh","title":"<code>sinh(x: float) -&gt; float</code>","text":"<p>Compute the hyperbolic sine of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The hyperbolic sine of x.</p>"},{"location":"reference/math/#doc_stubs.math.sqrt","title":"<code>sqrt(x: float) -&gt; float</code>","text":"<p>Compute the square root of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A non-negative numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The square root of x.</p>"},{"location":"reference/math/#doc_stubs.math.tan","title":"<code>tan(x: float) -&gt; float</code>","text":"<p>Compute the tangent of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The angle in radians.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The tangent of x.</p>"},{"location":"reference/math/#doc_stubs.math.tanh","title":"<code>tanh(x: float) -&gt; float</code>","text":"<p>Compute the hyperbolic tangent of x.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The hyperbolic tangent of x.</p>"},{"location":"reference/math/#doc_stubs.math.trunc","title":"<code>trunc(x: float) -&gt; int</code>","text":"<p>Truncate x to the nearest integer towards zero.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>A numeric value.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The truncated integer value of x.</p>"},{"location":"reference/random/","title":"random","text":"<p>Supported functions in the Python standard library <code>random</code> module.</p>"},{"location":"reference/random/#doc_stubs.random.choice","title":"<code>choice(seq: Sequence[T]) -&gt; T</code>","text":"<p>Return a randomly selected element from a non-empty sequence.</p> <p>Parameters:</p> Name Type Description Default <code>seq</code> <code>Sequence[T]</code> <p>The sequence to choose from.</p> required <p>Returns:</p> Type Description <code>T</code> <p>A randomly selected element from the sequence.</p>"},{"location":"reference/random/#doc_stubs.random.randint","title":"<code>randint(a: int, b: int) -&gt; int</code>","text":"<p>Return a random integer N such that a &lt;= N &lt;= b.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>The lower bound.</p> required <code>b</code> <code>int</code> <p>The upper bound.</p> required <p>Returns:</p> Type Description <code>int</code> <p>A randomly selected integer between a and b, inclusive.</p>"},{"location":"reference/random/#doc_stubs.random.random","title":"<code>random() -&gt; float</code>","text":"<p>Return a random floating point number in the range [0.0, 1.0).</p> <p>Returns:</p> Type Description <code>float</code> <p>A random float between 0.0 (inclusive) and 1.0 (exclusive).</p>"},{"location":"reference/random/#doc_stubs.random.randrange","title":"<code>randrange(start: int, stop: int = ..., step: int = ...) -&gt; int</code>","text":"<pre><code>randrange(stop: int) -&gt; int\n</code></pre><pre><code>randrange(start: int, stop: int, step: int = ...) -&gt; int\n</code></pre> <p>Return a randomly selected element from range(start, stop, step).</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>The start of the range.</p> required <code>stop</code> <code>int</code> <p>The end of the range.</p> <code>...</code> <code>step</code> <code>int</code> <p>The step size.</p> <code>...</code> <p>Returns:</p> Type Description <code>int</code> <p>A randomly selected integer from the range.</p>"},{"location":"reference/random/#doc_stubs.random.shuffle","title":"<code>shuffle(seq: MutableSequence[Any]) -&gt; None</code>","text":"<p>Shuffle the sequence in place.</p> <p>Parameters:</p> Name Type Description Default <code>seq</code> <code>MutableSequence[Any]</code> <p>The mutable sequence to shuffle.</p> required"},{"location":"reference/random/#doc_stubs.random.uniform","title":"<code>uniform(a: float, b: float) -&gt; float</code>","text":"<p>Return a random floating point number N such that a &lt;= N &lt;= b.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The lower bound.</p> required <code>b</code> <code>float</code> <p>The upper bound.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A random float between a and b.</p>"},{"location":"reference/sonolus.script.archetype/","title":"sonolus.script.archetype","text":""},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife","title":"<code>ArchetypeLife</code>","text":"<p>               Bases: <code>Record</code></p> <p>How an entity contributes to life.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.good_increment","title":"<code>good_increment: int</code>  <code>instance-attribute</code>","text":"<p>Life increment for a good judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.great_increment","title":"<code>great_increment: int</code>  <code>instance-attribute</code>","text":"<p>Life increment for a great judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.miss_increment","title":"<code>miss_increment: int</code>  <code>instance-attribute</code>","text":"<p>Life increment for a miss judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.perfect_increment","title":"<code>perfect_increment: int</code>  <code>instance-attribute</code>","text":"<p>Life increment for a perfect judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.__pos__","title":"<code>__pos__() -&gt; Self</code>","text":"<p>Return a copy of the record.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.type_var_value","title":"<code>type_var_value(var: TypeVar) -&gt; Any</code>  <code>classmethod</code>","text":"<p>Return the value of a type variable.</p> <p>Parameters:</p> Name Type Description Default <code>var</code> <code>TypeVar</code> <p>The type variable to get the value of.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value of the type variable.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.ArchetypeLife.update","title":"<code>update(perfect_increment: int | None = None, great_increment: int | None = None, good_increment: int | None = None, miss_increment: int | None = None)</code>","text":"<p>Update the life increments.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef","title":"<code>EntityRef</code>","text":"<p>               Bases: <code>Record</code></p> <p>Reference to another entity.</p> <p>May be used with <code>typing.Any</code> to reference an unknown archetype.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    ref_1: EntityRef[OtherArchetype] = imported()\n    ref_2: EntityRef[Any] = imported()\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.__pos__","title":"<code>__pos__() -&gt; Self</code>","text":"<p>Return a copy of the record.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.archetype","title":"<code>archetype() -&gt; type[A]</code>  <code>classmethod</code>","text":"<p>Get the archetype type.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.archetype_matches","title":"<code>archetype_matches() -&gt; bool</code>","text":"<p>Check if entity at the index is precisely of the archetype.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.get","title":"<code>get() -&gt; A</code>","text":"<p>Get the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.get_as","title":"<code>get_as(archetype: type[_BaseArchetype]) -&gt; _BaseArchetype</code>","text":"<p>Get the entity as the given archetype type.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.type_var_value","title":"<code>type_var_value(var: TypeVar) -&gt; Any</code>  <code>classmethod</code>","text":"<p>Return the value of a type variable.</p> <p>Parameters:</p> Name Type Description Default <code>var</code> <code>TypeVar</code> <p>The type variable to get the value of.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value of the type variable.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.EntityRef.with_archetype","title":"<code>with_archetype(archetype: type[T]) -&gt; EntityRef[T]</code>","text":"<p>Return a new reference with the given archetype type.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype","title":"<code>PlayArchetype</code>","text":"<p>               Bases: <code>_BaseArchetype</code></p> <p>Base class for play mode archetypes.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    # Set to True if the entity is a note and contributes to combo and score\n    # Default is False\n    is_scored: bool = True\n\n    imported_field: int = imported()\n    exported_field: int = exported()\n    entity_memory_field: int = entity_memory()\n    shared_memory_field: int = shared_memory()\n\n    @callback(order=1)\n    def preprocess(self):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.despawn","title":"<code>despawn</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the entity should be despawned after this frame.</p> <p>Setting this to True will despawn the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.id","title":"<code>id: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The id of the archetype or entity.</p> <p>If accessed on an entity, always returns the runtime archetype id of the entity, even if it doesn't match the type that was used to access it.</p> <p>E.g. if an entity of archetype <code>A</code> is accessed via <code>EntityRef[B]</code>, the id will still be the id of <code>A</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.index","title":"<code>index: int</code>  <code>property</code>","text":"<p>The index of this entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.is_active","title":"<code>is_active: bool</code>  <code>property</code>","text":"<p>Whether this entity is active.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.is_despawned","title":"<code>is_despawned: bool</code>  <code>property</code>","text":"<p>Whether this entity is despawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.is_scored","title":"<code>is_scored: bool = False</code>  <code>class-attribute</code>","text":"<p>Whether entities of this archetype contribute to combo and score.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.is_waiting","title":"<code>is_waiting: bool</code>  <code>property</code>","text":"<p>Whether this entity is waiting to be spawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.key","title":"<code>key: int | float = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional key for the archetype.</p> <p>May be useful to identify an archetype in an inheritance hierarchy without needing to check id.</p> <p>If accessed on an entity, always returns the runtime key of the entity, even if it doesn't match the type that was used to access it.</p> <p>E.g. if an entity of archetype <code>A</code> is accessed via <code>EntityRef[B]</code>, the key will still be the key of <code>A</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.life","title":"<code>life: ArchetypeLife</code>  <code>class-attribute</code>","text":"<p>How this entities of this archetype contribute to life depending on judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code>","text":"<p>The name of the archetype.</p> <p>If not set, the name will be the class name.</p> <p>The name is used in level data.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.result","title":"<code>result: PlayEntityInput</code>  <code>property</code>","text":"<p>The result of this entity.</p> <p>Only meaningful for scored entities.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.derive","title":"<code>derive(name: str, is_scored: bool, key: int | float | None = None) -&gt; type[T]</code>  <code>classmethod</code>","text":"<p>Derive a new archetype class from this archetype.</p> <p>Roughly equivalent to returning: <pre><code>class Derived(cls):\n    name = &lt;name&gt;\n    is_scored = &lt;is_scored&gt;\n    key = &lt;key&gt;  # Only set if key is not None\n</code></pre></p> <p>This is used to create a new archetype with the same fields and callbacks, but with a different name and whether it is scored. Compared to manually subclassing, this method also enables faster compilation when the same base archetype has multiple derived archetypes by compiling callbacks only once for the base archetype.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new archetype.</p> required <code>is_scored</code> <code>bool</code> <p>Whether the new archetype is scored.</p> required <code>key</code> <code>int | float | None</code> <p>A key that can be accessed via the <code>key</code> property of the new archetype.</p> <code>None</code> <p>Returns:</p> Type Description <code>type[T]</code> <p>A new archetype class with the same fields and callbacks as this archetype, but with the given name and</p> <code>type[T]</code> <p>whether it is scored.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.initialize","title":"<code>initialize()</code>","text":"<p>Initialize this entity.</p> <p>Runs when this entity is spawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.preprocess","title":"<code>preprocess()</code>","text":"<p>Perform upfront processing.</p> <p>Runs first when the level is loaded.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.ref","title":"<code>ref() -&gt; EntityRef[Self]</code>","text":"<p>Get a reference to this entity.</p> <p>Valid both in level data and in callbacks.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.should_spawn","title":"<code>should_spawn() -&gt; bool</code>","text":"<p>Return whether the entity should be spawned.</p> <p>Runs each frame while the entity is the first entity in the spawn queue.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.spawn","title":"<code>spawn(**kwargs: Any) -&gt; None</code>  <code>classmethod</code>","text":"<p>Spawn an entity of this archetype, injecting the given values into entity memory.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n\ndef f():\n    MyArchetype.spawn(field=123)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Entity memory values to inject by field name as defined in the Archetype.</p> <code>{}</code>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.spawn_order","title":"<code>spawn_order() -&gt; float</code>","text":"<p>Return the spawn order of the entity.</p> <p>Runs when the level is loaded after <code>preprocess</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.terminate","title":"<code>terminate()</code>","text":"<p>Finalize before despawning.</p> <p>Runs when the entity is despawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.touch","title":"<code>touch()</code>","text":"<p>Handle user input.</p> <p>Runs after <code>update_sequential</code> each frame.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.update_parallel","title":"<code>update_parallel()</code>","text":"<p>Perform parallel actions for this frame.</p> <p>Runs after <code>touch</code> each frame.</p> <p>This is where most gameplay logic should be placed.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PlayArchetype.update_sequential","title":"<code>update_sequential()</code>","text":"<p>Perform non-parallel actions for this frame.</p> <p>Runs first each frame.</p> <p>This is where logic affecting shared memory should be placed. Other logic should typically be placed in <code>update_parallel</code> for better performance.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype","title":"<code>PreviewArchetype</code>","text":"<p>               Bases: <code>_BaseArchetype</code></p> <p>Base class for preview mode archetypes.</p> Usage <pre><code>class MyArchetype(PreviewArchetype):\n    imported_field: int = imported()\n    entity_memory_field: int = entity_memory()\n    shared_memory_field: int = shared_memory()\n\n    @callback(order=1)\n    def preprocess(self):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.id","title":"<code>id: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The id of the archetype or entity.</p> <p>If accessed on an entity, always returns the runtime archetype id of the entity, even if it doesn't match the type that was used to access it.</p> <p>E.g. if an entity of archetype <code>A</code> is accessed via <code>EntityRef[B]</code>, the id will still be the id of <code>A</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.index","title":"<code>index: int</code>  <code>property</code>","text":"<p>The index of this entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.key","title":"<code>key: int | float = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional key for the archetype.</p> <p>May be useful to identify an archetype in an inheritance hierarchy without needing to check id.</p> <p>If accessed on an entity, always returns the runtime key of the entity, even if it doesn't match the type that was used to access it.</p> <p>E.g. if an entity of archetype <code>A</code> is accessed via <code>EntityRef[B]</code>, the key will still be the key of <code>A</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code>","text":"<p>The name of the archetype.</p> <p>If not set, the name will be the class name.</p> <p>The name is used in level data.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.derive","title":"<code>derive(name: str, is_scored: bool, key: int | float | None = None) -&gt; type[T]</code>  <code>classmethod</code>","text":"<p>Derive a new archetype class from this archetype.</p> <p>Roughly equivalent to returning: <pre><code>class Derived(cls):\n    name = &lt;name&gt;\n    is_scored = &lt;is_scored&gt;\n    key = &lt;key&gt;  # Only set if key is not None\n</code></pre></p> <p>This is used to create a new archetype with the same fields and callbacks, but with a different name and whether it is scored. Compared to manually subclassing, this method also enables faster compilation when the same base archetype has multiple derived archetypes by compiling callbacks only once for the base archetype.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new archetype.</p> required <code>is_scored</code> <code>bool</code> <p>Whether the new archetype is scored.</p> required <code>key</code> <code>int | float | None</code> <p>A key that can be accessed via the <code>key</code> property of the new archetype.</p> <code>None</code> <p>Returns:</p> Type Description <code>type[T]</code> <p>A new archetype class with the same fields and callbacks as this archetype, but with the given name and</p> <code>type[T]</code> <p>whether it is scored.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.preprocess","title":"<code>preprocess()</code>","text":"<p>Perform upfront processing.</p> <p>Runs first when the level is loaded.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.ref","title":"<code>ref() -&gt; EntityRef[Self]</code>","text":"<p>Get a reference to this entity.</p> <p>Valid both in level data and in callbacks.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.render","title":"<code>render()</code>","text":"<p>Render the entity.</p> <p>Runs after <code>preprocess</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.PreviewArchetype.spawn","title":"<code>spawn(**kwargs: Any) -&gt; None</code>  <code>classmethod</code>","text":"<p>Spawn an entity of this archetype, injecting the given values into entity memory.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n\ndef f():\n    MyArchetype.spawn(field=123)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Entity memory values to inject by field name as defined in the Archetype.</p> <code>{}</code>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardArchetypeName","title":"<code>StandardArchetypeName</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Standard archetype names.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardArchetypeName.BPM_CHANGE","title":"<code>BPM_CHANGE = '#BPM_CHANGE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Bpm change marker</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardArchetypeName.TIMESCALE_CHANGE","title":"<code>TIMESCALE_CHANGE = '#TIMESCALE_CHANGE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timescale change marker</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardArchetypeName.TIMESCALE_GROUP","title":"<code>TIMESCALE_GROUP = '#TIMESCALE_GROUP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Entity referenced by the timescale changes in a group</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport","title":"<code>StandardImport</code>","text":"<p>Standard import annotations for Archetype fields.</p> Usage <pre><code>class MyArchetype(WatchArchetype):\n    judgment: StandardImport.JUDGMENT\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.ACCURACY","title":"<code>ACCURACY = Annotated[float, imported(name=StandardImportName.ACCURACY)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The accuracy of the entity.</p> <p>Automatically set in watch mode for archetypes with a corresponding scored play mode archetype.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.BEAT","title":"<code>BEAT = Annotated[float, imported(name=StandardImportName.BEAT)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The beat of the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.BPM","title":"<code>BPM = Annotated[float, imported(name=StandardImportName.BPM)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The bpm, for bpm change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.JUDGMENT","title":"<code>JUDGMENT = Annotated[Judgment, imported(name=StandardImportName.JUDGMENT)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The judgment of the entity.</p> <p>Automatically set in watch mode for archetypes with a corresponding scored play mode archetype.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.TIMESCALE","title":"<code>TIMESCALE = Annotated[float, imported(name=StandardImportName.TIMESCALE)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timescale, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.TIMESCALE_EASE","title":"<code>TIMESCALE_EASE = Annotated[TimescaleEase, imported(name=StandardImportName.TIMESCALE_EASE)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timescale ease type, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.TIMESCALE_GROUP","title":"<code>TIMESCALE_GROUP = Annotated[EntityRef[Any], imported(name=StandardImportName.TIMESCALE_GROUP)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timescale group, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImport.TIMESCALE_SKIP","title":"<code>TIMESCALE_SKIP = Annotated[float, imported(name=StandardImportName.TIMESCALE_SKIP)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The scaled time to skip, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName","title":"<code>StandardImportName</code>","text":"<p>Standard import names for Archetype fields.</p> Usage <pre><code>class MyArchetype(WatchArchetype):\n    judgment: int = imported(name=StandardImportName.JUDGMENT)\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName.ACCURACY","title":"<code>ACCURACY = '#ACCURACY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The accuracy of the entity.</p> <p>Automatically set in watch mode for archetypes with a corresponding scored play mode archetype.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName.BEAT","title":"<code>BEAT = '#BEAT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The beat of the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName.BPM","title":"<code>BPM = '#BPM'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The bpm, for bpm change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName.JUDGMENT","title":"<code>JUDGMENT = '#JUDGMENT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The judgment of the entity.</p> <p>Automatically set in watch mode for archetypes with a corresponding scored play mode archetype.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName.TIMESCALE","title":"<code>TIMESCALE = '#TIMESCALE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timescale, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName.TIMESCALE_EASE","title":"<code>TIMESCALE_EASE = '#TIMESCALE_EASE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timescale ease type, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName.TIMESCALE_GROUP","title":"<code>TIMESCALE_GROUP = '#TIMESCALE_GROUP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timescale group, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.StandardImportName.TIMESCALE_SKIP","title":"<code>TIMESCALE_SKIP = '#TIMESCALE_SKIP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The scaled time to skip, for timescale change markers.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype","title":"<code>WatchArchetype</code>","text":"<p>               Bases: <code>_BaseArchetype</code></p> <p>Base class for watch mode archetypes.</p> Usage <pre><code>class MyArchetype(WatchArchetype):\n    imported_field: int = imported()\n    entity_memory_field: int = entity_memory()\n    shared_memory_field: int = shared_memory()\n\n    @callback(order=1)\n    def update_sequential(self):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.id","title":"<code>id: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The id of the archetype or entity.</p> <p>If accessed on an entity, always returns the runtime archetype id of the entity, even if it doesn't match the type that was used to access it.</p> <p>E.g. if an entity of archetype <code>A</code> is accessed via <code>EntityRef[B]</code>, the id will still be the id of <code>A</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.index","title":"<code>index: int</code>  <code>property</code>","text":"<p>The index of this entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.is_active","title":"<code>is_active: bool</code>  <code>property</code>","text":"<p>Whether this entity is active.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.is_scored","title":"<code>is_scored: bool = False</code>  <code>class-attribute</code>","text":"<p>Whether entities of this archetype contribute to combo and score.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.key","title":"<code>key: int | float = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional key for the archetype.</p> <p>May be useful to identify an archetype in an inheritance hierarchy without needing to check id.</p> <p>If accessed on an entity, always returns the runtime key of the entity, even if it doesn't match the type that was used to access it.</p> <p>E.g. if an entity of archetype <code>A</code> is accessed via <code>EntityRef[B]</code>, the key will still be the key of <code>A</code>.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.life","title":"<code>life: ArchetypeLife</code>  <code>class-attribute</code>","text":"<p>How this entities of this archetype contribute to life depending on judgment.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code>","text":"<p>The name of the archetype.</p> <p>If not set, the name will be the class name.</p> <p>The name is used in level data.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.result","title":"<code>result: WatchEntityInput</code>  <code>property</code>","text":"<p>The result of this entity.</p> <p>Only meaningful for scored entities.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.derive","title":"<code>derive(name: str, is_scored: bool, key: int | float | None = None) -&gt; type[T]</code>  <code>classmethod</code>","text":"<p>Derive a new archetype class from this archetype.</p> <p>Roughly equivalent to returning: <pre><code>class Derived(cls):\n    name = &lt;name&gt;\n    is_scored = &lt;is_scored&gt;\n    key = &lt;key&gt;  # Only set if key is not None\n</code></pre></p> <p>This is used to create a new archetype with the same fields and callbacks, but with a different name and whether it is scored. Compared to manually subclassing, this method also enables faster compilation when the same base archetype has multiple derived archetypes by compiling callbacks only once for the base archetype.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new archetype.</p> required <code>is_scored</code> <code>bool</code> <p>Whether the new archetype is scored.</p> required <code>key</code> <code>int | float | None</code> <p>A key that can be accessed via the <code>key</code> property of the new archetype.</p> <code>None</code> <p>Returns:</p> Type Description <code>type[T]</code> <p>A new archetype class with the same fields and callbacks as this archetype, but with the given name and</p> <code>type[T]</code> <p>whether it is scored.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.despawn_time","title":"<code>despawn_time() -&gt; float</code>","text":"<p>Return the despawn time of the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.initialize","title":"<code>initialize()</code>","text":"<p>Initialize this entity.</p> <p>Runs when this entity is spawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.preprocess","title":"<code>preprocess()</code>","text":"<p>Perform upfront processing.</p> <p>Runs first when the level is loaded.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.ref","title":"<code>ref() -&gt; EntityRef[Self]</code>","text":"<p>Get a reference to this entity.</p> <p>Valid both in level data and in callbacks.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.spawn","title":"<code>spawn(**kwargs: Any) -&gt; None</code>  <code>classmethod</code>","text":"<p>Spawn an entity of this archetype, injecting the given values into entity memory.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n\ndef f():\n    MyArchetype.spawn(field=123)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Entity memory values to inject by field name as defined in the Archetype.</p> <code>{}</code>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.spawn_time","title":"<code>spawn_time() -&gt; float</code>","text":"<p>Return the spawn time of the entity.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.terminate","title":"<code>terminate()</code>","text":"<p>Finalize before despawning.</p> <p>Runs when the entity is despawned.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.update_parallel","title":"<code>update_parallel()</code>","text":"<p>Parallel update callback.</p> <p>Runs after <code>touch</code> each frame.</p> <p>This is where most gameplay logic should be placed.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.WatchArchetype.update_sequential","title":"<code>update_sequential()</code>","text":"<p>Perform non-parallel actions for this frame.</p> <p>Runs first each frame.</p> <p>This is where logic affecting shared memory should be placed. Other logic should typically be placed in <code>update_parallel</code> for better performance.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.callback","title":"<code>callback(*, order: int = 0) -&gt; Callable[[T], T]</code>","text":"<p>Annotate a callback with its order.</p> <p>Callbacks are executed from lowest to highest order. By default, callbacks have an order of 0.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    @callback(order=1)\n    def update_sequential(self):\n        pass\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>int</code> <p>The order of the callback. Lower values are executed first.</p> <code>0</code>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.entity_data","title":"<code>entity_data() -&gt; Any</code>","text":"<p>Declare a field as entity data.</p> <p>Entity data is accessible from other entities, but may only be updated in the <code>preprocess</code> callback and is read-only in other callbacks.</p> <p>It functions like <code>imported</code> and shares the same underlying storage, except that it is not loaded from a level.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_data()\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.entity_info_at","title":"<code>entity_info_at(index: int) -&gt; PlayEntityInfo | WatchEntityInfo | PreviewEntityInfo</code>","text":"<p>Retrieve entity info of the entity at the given index.</p> <p>Available in play, watch, and preview mode.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.entity_memory","title":"<code>entity_memory() -&gt; Any</code>","text":"<p>Declare a field as entity memory.</p> <p>Entity memory is private to the entity and is not accessible from other entities. It may be read or updated in any callback associated with the entity.</p> <p>Entity memory fields may also be set when an entity is spawned using the <code>spawn()</code> method.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = entity_memory()\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.exported","title":"<code>exported(*, name: str | None = None) -&gt; Any</code>","text":"<p>Declare a field as exported.</p> <p>This is only usable in play mode to export data to be loaded in watch mode.</p> <p>Exported fields are write-only.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = exported()\n    field_with_explicit_name: int = exported(name=\"#FIELD\")\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.get_archetype_by_name","title":"<code>get_archetype_by_name(name: str) -&gt; AnyArchetype</code>","text":"<p>Return the archetype with the given name in the current mode.</p>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.imported","title":"<code>imported(*, name: str | None = None) -&gt; Any</code>","text":"<p>Declare a field as imported.</p> <p>Imported fields may be loaded from the level.</p> <p>In watch mode, data may also be loaded from a corresponding exported field in play mode.</p> <p>Imported fields may only be updated in the <code>preprocess</code> callback, and are read-only in other callbacks.</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = imported()\n    field_with_explicit_name: int = imported(name=\"field_name\")\n</code></pre>"},{"location":"reference/sonolus.script.archetype/#sonolus.script.archetype.shared_memory","title":"<code>shared_memory() -&gt; Any</code>","text":"<p>Declare a field as shared memory.</p> <p>Shared memory is accessible from other entities.</p> <p>Shared memory may be read in any callback, but may only be updated by sequential callbacks (<code>preprocess</code>, <code>update_sequential</code>, and <code>touch</code>).</p> Usage <pre><code>class MyArchetype(PlayArchetype):\n    field: int = shared_memory()\n</code></pre>"},{"location":"reference/sonolus.script.array/","title":"sonolus.script.array","text":"<p>For usage details, see the corresponding concepts page.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Dim","title":"<code>Dim = Literal</code>  <code>module-attribute</code>","text":"<p>Shorthand for <code>typing.Literal</code> intended for use in array dimensions for type checker compatibility.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array","title":"<code>Array</code>","text":"<p>               Bases: <code>GenericValue</code>, <code>ArrayLike[T]</code></p> <p>A fixed size array of values.</p> Usage <pre><code>array_1 = Array(1, 2, 3)\narray_2 = Array[int, 0]()\narray_3 = +Array[int, 3]  # Create a zero-initialized array\narray_4 = +Array[int, Dim[3]]  # Alternative syntax for compliance with type checkers\narray_5 = +array_1  # Create a copy of array_1\n</code></pre>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.__contains__","title":"<code>__contains__(value: Any) -&gt; bool</code>","text":"<p>Return whether any element in the array is equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check for.</p> required"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.__iter__","title":"<code>__iter__() -&gt; SonolusIterator[T]</code>","text":"<p>Return an iterator over the array.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.__pos__","title":"<code>__pos__() -&gt; Array[T, Size]</code>","text":"<p>Return a copy of the array.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.__reversed__","title":"<code>__reversed__()</code>","text":"<p>Return a reversed view of the array.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.count","title":"<code>count(value: T) -&gt; int</code>","text":"<p>Return the number of elements in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to count.</p> required"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.element_type","title":"<code>element_type() -&gt; type[T] | type[Value]</code>  <code>classmethod</code>","text":"<p>Return the type of elements in this array type.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.index","title":"<code>index(value: T, start: int = 0, stop: int | None = None) -&gt; int</code>","text":"<p>Return the index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required <code>start</code> <code>int</code> <p>The index to start searching from.</p> <code>0</code> <code>stop</code> <code>int | None</code> <p>The index to stop searching at. If <code>None</code>, search to the end of the array.</p> <code>None</code>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.index_of_max","title":"<code>index_of_max(*, key: Callable[[T], Any] | None = None) -&gt; int</code>","text":"<p>Return the index of the maximum value in the array.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[[T], Any] | None</code> <p>A one-argument ordering function to use for comparison like the one used in <code>max()</code>.</p> <code>None</code>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.index_of_min","title":"<code>index_of_min(*, key: Callable[[T], Any] | None = None) -&gt; int</code>","text":"<p>Return the index of the minimum value in the array.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[[T], Any] | None</code> <p>A one-argument ordering function to use for comparison like the one used in <code>min()</code>.</p> <code>None</code>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.last_index","title":"<code>last_index(value: T) -&gt; int</code>","text":"<p>Return the last index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.reverse","title":"<code>reverse()</code>","text":"<p>Reverse the values in the array in place.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.shuffle","title":"<code>shuffle()</code>","text":"<p>Shuffle the values in the array in place.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.size","title":"<code>size() -&gt; int</code>  <code>classmethod</code>","text":"<p>Return the size of this array type.</p> <p>On instances, use <code>len(array)</code> instead.</p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.sort","title":"<code>sort(*, key: Callable[[T], Any] | None = None, reverse: bool = False)</code>","text":"<p>Sort the values in the array in place.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[[T], Any] | None</code> <p>A one-argument ordering function to use for comparison.</p> <code>None</code> <code>reverse</code> <code>bool</code> <p>If <code>True</code>, sort in descending order, otherwise sort in ascending order.</p> <code>False</code>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.Array.swap","title":"<code>swap(i: int, j: int)</code>","text":"<p>Swap the values at the given indices.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>The first index.</p> required <code>j</code> <code>int</code> <p>The second index.</p> required"},{"location":"reference/sonolus.script.array/#sonolus.script.array.ArrayMeta","title":"<code>ArrayMeta</code>","text":"<p>               Bases: <code>ABCMeta</code></p>"},{"location":"reference/sonolus.script.array/#sonolus.script.array.ArrayMeta.__pos__","title":"<code>__pos__() -&gt; T</code>","text":"<p>Create a zero-initialized array instance.</p>"},{"location":"reference/sonolus.script.array_like/","title":"sonolus.script.array_like","text":""},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike","title":"<code>ArrayLike</code>","text":"<p>               Bases: <code>Sequence[T]</code></p> <p>Mixin for array-like objects.</p> <p>Inheritors must implement <code>__len__</code>, <code>__getitem__</code>, and <code>__setitem__</code>.</p> Usage <pre><code>class MyArrayLike[T](Record, ArrayLike[T]):\n    def __len__(self) -&gt; int:\n        ...\n\n    def __getitem__(self, index: int) -&gt; T:\n        ...\n\n    def __setitem__(self, index: int, value: T):\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__contains__","title":"<code>__contains__(value: Any) -&gt; bool</code>","text":"<p>Return whether any element in the array is equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check for.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__getitem__","title":"<code>__getitem__(index: int) -&gt; T</code>  <code>abstractmethod</code>","text":"<p>Return the item at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the item. Must be an integer between 0 and <code>len(self) - 1</code>.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__iter__","title":"<code>__iter__() -&gt; SonolusIterator[T]</code>","text":"<p>Return an iterator over the array.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__len__","title":"<code>__len__() -&gt; int</code>  <code>abstractmethod</code>","text":"<p>Return the length of the array.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__reversed__","title":"<code>__reversed__()</code>","text":"<p>Return a reversed view of the array.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.__setitem__","title":"<code>__setitem__(index: int, value: T)</code>  <code>abstractmethod</code>","text":"<p>Set the value of the item at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the item. Must be an integer between 0 and <code>len(self) - 1</code>.</p> required <code>value</code> <code>T</code> <p>The value to set.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.count","title":"<code>count(value: T) -&gt; int</code>","text":"<p>Return the number of elements in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to count.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.index","title":"<code>index(value: T, start: int = 0, stop: int | None = None) -&gt; int</code>","text":"<p>Return the index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required <code>start</code> <code>int</code> <p>The index to start searching from.</p> <code>0</code> <code>stop</code> <code>int | None</code> <p>The index to stop searching at. If <code>None</code>, search to the end of the array.</p> <code>None</code>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.index_of_max","title":"<code>index_of_max(*, key: Callable[[T], Any] | None = None) -&gt; int</code>","text":"<p>Return the index of the maximum value in the array.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[[T], Any] | None</code> <p>A one-argument ordering function to use for comparison like the one used in <code>max()</code>.</p> <code>None</code>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.index_of_min","title":"<code>index_of_min(*, key: Callable[[T], Any] | None = None) -&gt; int</code>","text":"<p>Return the index of the minimum value in the array.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[[T], Any] | None</code> <p>A one-argument ordering function to use for comparison like the one used in <code>min()</code>.</p> <code>None</code>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.last_index","title":"<code>last_index(value: T) -&gt; int</code>","text":"<p>Return the last index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.reverse","title":"<code>reverse()</code>","text":"<p>Reverse the values in the array in place.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.shuffle","title":"<code>shuffle()</code>","text":"<p>Shuffle the values in the array in place.</p>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.sort","title":"<code>sort(*, key: Callable[[T], Any] | None = None, reverse: bool = False)</code>","text":"<p>Sort the values in the array in place.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[[T], Any] | None</code> <p>A one-argument ordering function to use for comparison.</p> <code>None</code> <code>reverse</code> <code>bool</code> <p>If <code>True</code>, sort in descending order, otherwise sort in ascending order.</p> <code>False</code>"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.ArrayLike.swap","title":"<code>swap(i: int, j: int)</code>","text":"<p>Swap the values at the given indices.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>The first index.</p> required <code>j</code> <code>int</code> <p>The second index.</p> required"},{"location":"reference/sonolus.script.array_like/#sonolus.script.array_like.get_positive_index","title":"<code>get_positive_index(index: int, length: int) -&gt; int</code>","text":"<p>Get the positive index for the given index in the array of the given length.</p> <p>This is used to convert negative indixes relative to the end of the array to positive indices.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index to convert.</p> required <code>length</code> <code>int</code> <p>The length of the array.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The positive index.</p>"},{"location":"reference/sonolus.script.bucket/","title":"sonolus.script.bucket","text":""},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Bucket","title":"<code>Bucket</code>","text":"<p>               Bases: <code>Record</code></p> <p>A bucket for entity judgment results.</p> Usage <pre><code>Bucket(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Bucket.id","title":"<code>id: int</code>  <code>instance-attribute</code>","text":"<p>Bucket ID.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Bucket.window","title":"<code>window: JudgmentWindow</code>  <code>property</code> <code>writable</code>","text":"<p>The judgment window of the bucket.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Judgment","title":"<code>Judgment</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>The judgment of a hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Judgment.GOOD","title":"<code>GOOD = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A good hit. Breaks combo.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Judgment.GREAT","title":"<code>GREAT = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A great hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Judgment.MISS","title":"<code>MISS = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A miss. Breaks combo.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.Judgment.PERFECT","title":"<code>PERFECT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A perfect hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow","title":"<code>JudgmentWindow</code>","text":"<p>               Bases: <code>Record</code></p> <p>The window for judging the accuracy of a hit.</p> Usage <pre><code>JudgmentWindow(perfect: Interval, great: Interval, good: Interval)\n</code></pre>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.end","title":"<code>end: float</code>  <code>property</code>","text":"<p>The end time of the good interval.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.good","title":"<code>good: Interval</code>  <code>instance-attribute</code>","text":"<p>Interval for a good hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.great","title":"<code>great: Interval</code>  <code>instance-attribute</code>","text":"<p>Interval for a great hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.perfect","title":"<code>perfect: Interval</code>  <code>instance-attribute</code>","text":"<p>Interval for a perfect hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.start","title":"<code>start: float</code>  <code>property</code>","text":"<p>The start time of the good interval.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.__add__","title":"<code>__add__(other: float | int) -&gt; JudgmentWindow</code>","text":"<p>Add a scalar to the intervals.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.__mul__","title":"<code>__mul__(other: float | int) -&gt; JudgmentWindow</code>","text":"<p>Multiply the intervals by a scalar.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.judge","title":"<code>judge(actual: float, target: float) -&gt; Judgment</code>","text":"<p>Judge the accuracy of a hit.</p> <p>Parameters:</p> Name Type Description Default <code>actual</code> <code>float</code> <p>The actual time of the hit.</p> required <code>target</code> <code>float</code> <p>The target time of the hit.</p> required <p>Returns:</p> Type Description <code>Judgment</code> <p>The <code>Judgment</code> of the hit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.JudgmentWindow.update","title":"<code>update(perfect: Interval | None = None, great: Interval | None = None, good: Interval | None = None)</code>","text":"<p>Update the window with the given intervals.</p> <p>Parameters:</p> Name Type Description Default <code>perfect</code> <code>Interval | None</code> <p>The interval for a perfect hit.</p> <code>None</code> <code>great</code> <code>Interval | None</code> <p>The interval for a great hit.</p> <code>None</code> <code>good</code> <code>Interval | None</code> <p>The interval for a good hit.</p> <code>None</code>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.bucket","title":"<code>bucket(*, sprites: list[_BucketSprite], unit: str | None = None) -&gt; Any</code>","text":"<p>Define a bucket with the given sprites and unit.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.bucket_sprite","title":"<code>bucket_sprite(*, sprite: Sprite, fallback_sprite: Sprite | None = None, x: float, y: float, w: float, h: float, rotation: float = 0) -&gt; _BucketSprite</code>","text":"<p>Define a sprite for a bucket.</p>"},{"location":"reference/sonolus.script.bucket/#sonolus.script.bucket.buckets","title":"<code>buckets(cls: type[T]) -&gt; T | Buckets</code>","text":"<p>Decorator to define a buckets class.</p> Usage <pre><code>@buckets\nclass Buckets:\n    note: Bucket = bucket(\n        sprites=[\n            bucket_sprite(\n                sprite=Skin.note,\n                x=0,\n                y=0,\n                w=2,\n                h=2,\n            )\n        ],\n        unit=StandardText.MILLISECOND_UNIT,\n    )\n</code></pre>"},{"location":"reference/sonolus.script.containers/","title":"sonolus.script.containers","text":""},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap","title":"<code>ArrayMap</code>","text":"<p>               Bases: <code>Record</code></p> <p>A map implemented as an array of key-value pairs with a fixed maximum capacity.</p> Usage <pre><code>ArrayMap[K, V, Capacity].new()  # Create a new empty map\n</code></pre> <p>Examples:</p> <pre><code>map = ArrayMap[int, int, 10].new()\nmap[1] = 2\nmap[3] = 4\nassert 1 in map\nassert 2 not in map\nassert map[3] == 4\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__contains__","title":"<code>__contains__(key: K) -&gt; bool</code>","text":"<p>Return whether the given key is present in the map.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>K</code> <p>The key to check for</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the key is present, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__delitem__","title":"<code>__delitem__(key: K)</code>","text":"<p>Remove the key-value pair associated with the given key.</p> <p>Must be called with a key that is present in the map.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>K</code> <p>The key to remove</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__getitem__","title":"<code>__getitem__(key: K) -&gt; V</code>","text":"<p>Return the value associated with the given key.</p> <p>Must be called with a key that is present in the map.</p> <p>The returned value continues to be part of the map. Future modifications to the map will affect the returned value.</p> Notes <p>Future modifications to the map may cause unexpected changes to the returned value. If the map may be modified in the future, it's recommended to make a copy of the value.</p> <p>For example: <pre><code>map = ArrayMap[int, Pair[int, int], 10].new()\nmap[1] = Pair(2, 3)\nmap[3] = Pair(4, 5)\nmap[5] = Pair(6, 7)\np = map[3]\nmap.pop(1)\n# The value of `p` may now be different\n</code></pre></p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__iter__","title":"<code>__iter__() -&gt; SonolusIterator[K]</code>","text":"<p>Return an iterator over the keys in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of key-value pairs in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.__setitem__","title":"<code>__setitem__(key: K, value: V)</code>","text":"<p>Associate the given key with the given value.</p> <p>If the key is already present in the map, the value is updated. Must not be called if the map is full.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>K</code> <p>The key to associate with the value.</p> required <code>value</code> <code>V</code> <p>The value to associate with the key</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.capacity","title":"<code>capacity() -&gt; int</code>  <code>classmethod</code>","text":"<p>Return the maximum number of key-value pairs the map can hold.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.clear","title":"<code>clear()</code>","text":"<p>Clear the map, removing all key-value pairs.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.is_full","title":"<code>is_full() -&gt; bool</code>","text":"<p>Return whether the map is full.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.items","title":"<code>items() -&gt; SonolusIterator[tuple[K, V]]</code>","text":"<p>Return an iterator over the key-value pairs in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.keys","title":"<code>keys() -&gt; SonolusIterator[K]</code>","text":"<p>Return an iterator over the keys in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.new","title":"<code>new() -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a new empty map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.pop","title":"<code>pop(key: K) -&gt; V</code>","text":"<p>Remove and return a copy of the value associated with the given key.</p> <p>Must be called with a key that is present in the map.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>K</code> <p>The key to remove</p> required <p>Returns:</p> Type Description <code>V</code> <p>The value associated with the key</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayMap.values","title":"<code>values() -&gt; SonolusIterator[V]</code>","text":"<p>Return an iterator over the values in the map.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayPointer","title":"<code>ArrayPointer</code>","text":"<p>               Bases: <code>Record</code>, <code>ArrayLike[T]</code></p> <p>An array defined by a size and pointer to the first element.</p> <p>This is intended to be created internally and improper use may result in hard to debug issues.</p> Usage <pre><code>ArrayPointer[T](size: int, block: int, offset: int)\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayPointer.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of elements in the array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArrayPointer.element_type","title":"<code>element_type() -&gt; type[T]</code>  <code>classmethod</code>","text":"<p>Return the type of the elements in the array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet","title":"<code>ArraySet</code>","text":"<p>               Bases: <code>Record</code></p> <p>A set implemented as an array with a fixed maximum capacity.</p> Usage <pre><code>ArraySet[T, Capacity].new()  # Create a new empty set\n</code></pre> <p>Examples:</p> <pre><code>s = ArraySet[int, 10].new()\ns.add(1)\ns.add(2)\nassert 1 in s\nassert 3 not in s\ns.remove(1)\nassert 1 not in s\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.__contains__","title":"<code>__contains__(value)</code>","text":"<p>Return whether the given value is present in the set.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.__iter__","title":"<code>__iter__() -&gt; SonolusIterator[T]</code>","text":"<p>Return an iterator over the values in the set.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.__len__","title":"<code>__len__()</code>","text":"<p>Return the number of elements in the set.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.add","title":"<code>add(value: T) -&gt; bool</code>","text":"<p>Add a copy of the given value to the set.</p> <p>This has no effect and returns False if the value is already present or if the set is full.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to add.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was added, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.clear","title":"<code>clear()</code>","text":"<p>Clear the set, removing all elements.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.new","title":"<code>new() -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a new empty set.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.ArraySet.remove","title":"<code>remove(value: T) -&gt; bool</code>","text":"<p>Remove the given value from the set.</p> <p>This has no effect and returns False if the value is not present.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to remove.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was removed, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Box","title":"<code>Box</code>","text":"<p>               Bases: <code>Record</code></p> <p>A box that contains a value.</p> <p>This can be helpful for generic code that can handle both Num and non-Num types.</p> Usage <pre><code>Box[T](value: T)\n</code></pre> <p>Examples:</p> <pre><code>box = Box(1)\nbox = Box[int](2)\n\nx: T = ...\ny: T = ...\nbox = Box(x)\nbox.value = y  # Works regardless of whether x is a Num, array, or record\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Box.value","title":"<code>value: T</code>  <code>instance-attribute</code>","text":"<p>The value contained in the box.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Pair","title":"<code>Pair</code>","text":"<p>               Bases: <code>Record</code></p> <p>A generic pair of values.</p> Usage <pre><code>Pair[T, U](first: T, second: U)\n</code></pre> <p>Examples:</p> <pre><code>pair = Pair(1, 2)\npair = Pair[int, Pair[int, int]](1, Pair(2, 3))\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Pair.first","title":"<code>first: T</code>  <code>instance-attribute</code>","text":"<p>The first value.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.Pair.second","title":"<code>second: U</code>  <code>instance-attribute</code>","text":"<p>The second value.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray","title":"<code>VarArray</code>","text":"<p>               Bases: <code>Record</code>, <code>ArrayLike[T]</code></p> <p>An array with a variable size and fixed maximum capacity.</p> Usage <pre><code>VarArray[T, Capacity].new()  # Create a new empty array\n</code></pre> <p>Examples:</p> <pre><code>array = VarArray[int, 10].new()\narray.append(1)\n</code></pre>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__delitem__","title":"<code>__delitem__(key: int)</code>","text":"<p>Remove the element at the given index.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__getitem__","title":"<code>__getitem__(item) -&gt; T</code>","text":"<p>Return the element at the given index.</p> <p>The returned value continues to be part of the array. Future modifications to the array will affect the returned value.</p> Note <p>Future modifications to the array may cause unexpected changes to the returned value. If the array may be modified in the future, it's recommended to make a copy of the value.</p> <p>For example: <pre><code>a = VarArray[Pair, 10].new()\na.append(Pair(1, 2))\na.append(Pair(3, 4))\na.append(Pair(5, 6))\np = a[1]\na.pop(0)  # Elements are shifted back\nassert p == Pair(5, 6)  # The value of p has changed\n</code></pre></p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__iadd__","title":"<code>__iadd__(other)</code>","text":"<p>Appends copies of the values in the given array to the end of the array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of elements in the array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.__setitem__","title":"<code>__setitem__(key: int, value: T)</code>","text":"<p>Update the element at the given index.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.append","title":"<code>append(value: T)</code>","text":"<p>Append a copy of the given value to the end of the array.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to append.</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.append_unchecked","title":"<code>append_unchecked(value: T)</code>","text":"<p>Append the given value to the end of the array without checking the capacity.</p> <p>Use with caution as this may cause hard to debug issues if the array is full.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to append.</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.capacity","title":"<code>capacity() -&gt; int</code>  <code>classmethod</code>","text":"<p>Return the maximum number of elements the array can hold.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.clear","title":"<code>clear()</code>","text":"<p>Clear the array, removing all elements.</p> <p>References to elements are not immediately changed, but future insertions may overwrite them.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.extend","title":"<code>extend(values: ArrayLike[T])</code>","text":"<p>Appends copies of the values in the given array to the end of the array.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>ArrayLike[T]</code> <p>The values to append.</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.insert","title":"<code>insert(index: int, value: T)</code>","text":"<p>Insert a copy of the given value at the given index.</p> <p>Preserves the relative order of the elements.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which to insert the value. Must be in the range [0, size].</p> required <code>value</code> <code>T</code> <p>The value to insert.</p> required"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.is_full","title":"<code>is_full() -&gt; bool</code>","text":"<p>Return whether the array is full.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.new","title":"<code>new() -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a new empty array.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.pop","title":"<code>pop(index: int | None = None) -&gt; T</code>","text":"<p>Remove and return a copy of the value at the given index.</p> <p>Preserves the relative order of the elements.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | None</code> <p>The index of the value to remove. If None, the last element is removed.</p> <code>None</code>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.remove","title":"<code>remove(value: T) -&gt; bool</code>","text":"<p>Remove the first occurrence of the given value, returning whether the value was removed.</p> <p>Preserves the relative order of the elements.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was removed, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.set_add","title":"<code>set_add(value: T) -&gt; bool</code>","text":"<p>Adds a copy of the given value if it is not already present, returning whether the value was added.</p> <p>If the value is already present, the array is not modified. If the array is full, the value is not added.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to add</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was added, False otherwise.</p>"},{"location":"reference/sonolus.script.containers/#sonolus.script.containers.VarArray.set_remove","title":"<code>set_remove(value: T) -&gt; bool</code>","text":"<p>Removes the first occurrence of the given value, returning whether the value was removed.</p> <p>Does not preserve the relative order of the elements.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value was removed, False otherwise.</p>"},{"location":"reference/sonolus.script.debug/","title":"sonolus.script.debug","text":""},{"location":"reference/sonolus.script.debug/#sonolus.script.debug.debug_log","title":"<code>debug_log(value: int | float | bool)</code>","text":"<p>Log a value in debug mode.</p>"},{"location":"reference/sonolus.script.debug/#sonolus.script.debug.debug_pause","title":"<code>debug_pause()</code>","text":"<p>Pause the game if in debug mode.</p>"},{"location":"reference/sonolus.script.debug/#sonolus.script.debug.error","title":"<code>error(message: str | None = None) -&gt; Never</code>","text":"<p>Raise an error.</p> <p>This function is used to raise an error during runtime. When this happens, the game will pause in debug mode. The current callback will also immediately return 0.</p>"},{"location":"reference/sonolus.script.debug/#sonolus.script.debug.static_error","title":"<code>static_error(message: str | None = None) -&gt; Never</code>","text":"<p>Raise a static error.</p> <p>This function is used to raise an error during compile-time if the compiler cannot guarantee that this function will not be called during runtime.</p>"},{"location":"reference/sonolus.script.easing/","title":"sonolus.script.easing","text":"<p>For more information on easing functions, see easings.net.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_back","title":"<code>ease_in_back(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending fast, overshooting below 0 at the start.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_circ","title":"<code>ease_in_circ(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending very fast.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_cubic","title":"<code>ease_in_cubic(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending fast with cubic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_elastic","title":"<code>ease_in_elastic(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1 with oscillations, starting slow and ending fast.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_expo","title":"<code>ease_in_expo(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting extremely slow and ending extremely fast.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_back","title":"<code>ease_in_out_back(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow with overshooting, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_circ","title":"<code>ease_in_out_circ(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow, very fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_cubic","title":"<code>ease_in_out_cubic(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow with cubic easing, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_elastic","title":"<code>ease_in_out_elastic(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1 with oscillations, slow at the start and end, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_expo","title":"<code>ease_in_out_expo(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting and ending extremely slow, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_quad","title":"<code>ease_in_out_quad(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow with quadratic easing, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_quart","title":"<code>ease_in_out_quart(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting and ending very slow with quartic easing, very fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_quint","title":"<code>ease_in_out_quint(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting and ending extremely slow with quintic easing, extremely fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_out_sine","title":"<code>ease_in_out_sine(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting and ending slow with sine easing, fast in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_quad","title":"<code>ease_in_quad(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending fast with quadratic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_quart","title":"<code>ease_in_quart(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting very slow and ending very fast with quartic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_quint","title":"<code>ease_in_quint(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting extremely slow and ending extremely fast with quintic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_in_sine","title":"<code>ease_in_sine(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting slow and ending fast with sine easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_back","title":"<code>ease_out_back(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting fast and ending slow, overshooting above 1 at the end.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_circ","title":"<code>ease_out_circ(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting very fast and ending slow.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_cubic","title":"<code>ease_out_cubic(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting fast and ending slow with cubic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_elastic","title":"<code>ease_out_elastic(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1 with oscillations, starting fast and ending slow.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_expo","title":"<code>ease_out_expo(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting extremely fast and ending extremely slow.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_back","title":"<code>ease_out_in_back(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, fast at the start and end, slow in the middle with overshooting.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_circ","title":"<code>ease_out_in_circ(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, very fast at the start and end, slow in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_cubic","title":"<code>ease_out_in_cubic(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, fast at the start and end, slow in the middle with cubic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_elastic","title":"<code>ease_out_in_elastic(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1 with oscillations, fast at the start and end, slow in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_expo","title":"<code>ease_out_in_expo(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, extremely fast at the start and end, extremely slow in the middle.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_quad","title":"<code>ease_out_in_quad(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, fast at the start and end, slow in the middle with quadratic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_quart","title":"<code>ease_out_in_quart(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, very fast at the start and end, very slow in the middle with quartic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_quint","title":"<code>ease_out_in_quint(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, extremely fast at the start and end, extremely slow in the middle with quintic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_in_sine","title":"<code>ease_out_in_sine(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, fast at the start and end, slow in the middle with sine easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_quad","title":"<code>ease_out_quad(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting fast and ending slow with quadratic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_quart","title":"<code>ease_out_quart(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting very fast and ending very slow with quartic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_quint","title":"<code>ease_out_quint(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting extremely fast and ending extremely slow with quintic easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.ease_out_sine","title":"<code>ease_out_sine(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1, starting fast and ending slow with sine easing.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.linstep","title":"<code>linstep(x: float) -&gt; float</code>","text":"<p>Linear interpolation between 0 and 1.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.smootherstep","title":"<code>smootherstep(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1 using smootherstep.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.smoothstep","title":"<code>smoothstep(x: float) -&gt; float</code>","text":"<p>Interpolate between 0 and 1 using smoothstep.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.step_end","title":"<code>step_end(x: float) -&gt; float</code>","text":"<p>Step function returning 1.0 if x &gt;= 1, otherwise 0.0.</p>"},{"location":"reference/sonolus.script.easing/#sonolus.script.easing.step_start","title":"<code>step_start(x: float) -&gt; float</code>","text":"<p>Step function returning 1.0 if x &gt;= 0, otherwise 0.0.</p>"},{"location":"reference/sonolus.script.effect/","title":"sonolus.script.effect","text":""},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect","title":"<code>Effect</code>","text":"<p>               Bases: <code>Record</code></p> <p>Sound effect clip.</p> Usage <pre><code>Effect(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.id","title":"<code>id: int</code>  <code>instance-attribute</code>","text":"<p>Effect ID.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.is_available","title":"<code>is_available: bool</code>  <code>property</code>","text":"<p>Return whether the effect clip is available.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.loop","title":"<code>loop() -&gt; LoopedEffectHandle</code>","text":"<p>Play the effect clip in a loop until stopped.</p> <p>Returns:</p> Type Description <code>LoopedEffectHandle</code> <p>A handle to stop the loop.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.play","title":"<code>play(distance: float = 0) -&gt; None</code>","text":"<p>Play the effect clip.</p> <p>If the clip was already played within the specified distance, it will be skipped.</p> <p>Parameters:</p> Name Type Description Default <code>distance</code> <code>float</code> <p>Minimum time in seconds since the last play for the effect to play.</p> <code>0</code>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.schedule","title":"<code>schedule(time: float, distance: float = 0) -&gt; None</code>","text":"<p>Schedule the effect clip to play at a specific time.</p> <p>This is not suitable for real-time effects such as responses to user input. Use <code>play</code> instead.</p> <p>This may be called in preprocess to schedule effects upfront.</p> <p>If the clip would play within the specified distance of another play, it will be skipped.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>Time in seconds when the effect should play.</p> required <code>distance</code> <code>float</code> <p>Minimum time in seconds after a previous play for the effect to play.</p> <code>0</code>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.Effect.schedule_loop","title":"<code>schedule_loop(start_time: float) -&gt; ScheduledLoopedEffectHandle</code>","text":"<p>Schedule the effect clip to play in a loop until stopped.</p> <p>This is not suitable for real-time effects such as responses to user input. Use <code>loop</code> instead.</p> <p>Returns:</p> Type Description <code>ScheduledLoopedEffectHandle</code> <p>A handle to stop the loop.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.EffectGroup","title":"<code>EffectGroup</code>","text":"<p>               Bases: <code>Record</code>, <code>ArrayLike[Effect]</code></p> <p>A group of effect clips.</p> Usage <pre><code>EffectGroup(start_id: int, size: int)\n</code></pre>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.LoopedEffectHandle","title":"<code>LoopedEffectHandle</code>","text":"<p>               Bases: <code>Record</code></p> <p>Handle to stop a looped effect.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.LoopedEffectHandle.stop","title":"<code>stop() -&gt; None</code>","text":"<p>Stop the looped effect.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.ScheduledLoopedEffectHandle","title":"<code>ScheduledLoopedEffectHandle</code>","text":"<p>               Bases: <code>Record</code></p> <p>Handle to stop a scheduled looped effect.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.ScheduledLoopedEffectHandle.stop","title":"<code>stop(end_time: float) -&gt; None</code>","text":"<p>Stop the scheduled looped effect.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.StandardEffect","title":"<code>StandardEffect</code>","text":"<p>Standard sound effect clips.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.effect","title":"<code>effect(name: str) -&gt; Any</code>","text":"<p>Define a sound effect clip with the given name.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.effect_group","title":"<code>effect_group(names: Iterable[str]) -&gt; Any</code>","text":"<p>Define an effect group with the given names.</p>"},{"location":"reference/sonolus.script.effect/#sonolus.script.effect.effects","title":"<code>effects(cls: type[T]) -&gt; T | Effects</code>","text":"<p>Decorator to define effect clips.</p> Usage <pre><code>@effects\nclass Effects:\n    miss: StandardEffect.MISS\n    other: Effect = effect(\"other\")\n    group_1: EffectGroup = effect_group([\"one\", \"two\", \"three\"])\n    group_2: EffectGroup = effect_group(f\"name_{i}\" for i in range(10))\n</code></pre>"},{"location":"reference/sonolus.script.engine/","title":"sonolus.script.engine","text":""},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.Engine","title":"<code>Engine</code>","text":"<p>A Sonolus.py engine.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the engine.</p> required <code>title</code> <code>AnyText | None</code> <p>The title of the engine.</p> <code>None</code> <code>subtitle</code> <code>AnyText</code> <p>The subtitle of the engine.</p> <code>'Sonolus.py Engine'</code> <code>author</code> <code>AnyText</code> <p>The author of the engine.</p> <code>'Unknown'</code> <code>skin</code> <code>str | None</code> <p>The default skin for the engine.</p> <code>None</code> <code>background</code> <code>str | None</code> <p>The default background for the engine.</p> <code>None</code> <code>effect</code> <code>str | None</code> <p>The default effect for the engine.</p> <code>None</code> <code>particle</code> <code>str | None</code> <p>The default particle for the engine.</p> <code>None</code> <code>thumbnail</code> <code>Asset | None</code> <p>The thumbnail for the engine.</p> <code>None</code> <code>data</code> <code>EngineData</code> <p>The engine's modes and configurations.</p> required <code>tags</code> <code>list[Tag] | None</code> <p>The tags of the engine.</p> <code>None</code> <code>description</code> <code>AnyText | None</code> <p>The description of the engine.</p> <code>None</code> <code>meta</code> <code>Any</code> <p>Additional metadata of the engine.</p> <code>None</code>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.Engine.export","title":"<code>export() -&gt; ExportedEngine</code>","text":"<p>Export the engine in a sonolus-pack compatible format.</p> <p>Returns:</p> Type Description <code>ExportedEngine</code> <p>An exported engine.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.EngineData","title":"<code>EngineData</code>","text":"<p>A Sonolus.py engine's modes and configurations.</p> <p>Parameters:</p> Name Type Description Default <code>ui</code> <code>UiConfig | None</code> <p>The UI configuration.</p> <code>None</code> <code>options</code> <code>Options</code> <p>The options for the engine.</p> <code>EmptyOptions</code> <code>play</code> <code>PlayMode | None</code> <p>The play mode configuration.</p> <code>None</code> <code>watch</code> <code>WatchMode | None</code> <p>The watch mode configuration.</p> <code>None</code> <code>preview</code> <code>PreviewMode | None</code> <p>The preview mode configuration.</p> <code>None</code> <code>tutorial</code> <code>TutorialMode | None</code> <p>The tutorial mode configuration.</p> <code>None</code>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.ExportedEngine","title":"<code>ExportedEngine</code>","text":"<p>An exported Sonolus.py engine.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.ExportedEngine.write_to_dir","title":"<code>write_to_dir(path: PathLike)</code>","text":"<p>Write the exported engine to a directory.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.PlayMode","title":"<code>PlayMode</code>","text":"<p>A play mode definition.</p> <p>Parameters:</p> Name Type Description Default <code>archetypes</code> <code>list[type[_BaseArchetype]] | None</code> <p>A list of play archetypes.</p> <code>None</code> <code>skin</code> <code>Skin</code> <p>The skin for the play mode.</p> <code>EmptySkin</code> <code>effects</code> <code>Effects</code> <p>The effects for the play mode.</p> <code>EmptyEffects</code> <code>particles</code> <code>Particles</code> <p>The particles for the play mode.</p> <code>EmptyParticles</code> <code>buckets</code> <code>Buckets</code> <p>The buckets for the play mode.</p> <code>EmptyBuckets</code>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.PreviewMode","title":"<code>PreviewMode</code>","text":"<p>A preview mode definition.</p> <p>Parameters:</p> Name Type Description Default <code>archetypes</code> <code>list[type[_BaseArchetype]] | None</code> <p>A list of preview archetypes.</p> <code>None</code> <code>skin</code> <code>Skin</code> <p>The skin for the preview mode.</p> <code>EmptySkin</code>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.TutorialMode","title":"<code>TutorialMode</code>","text":"<p>A tutorial mode definition.</p> <p>Parameters:</p> Name Type Description Default <code>skin</code> <code>Skin</code> <p>The skin for the tutorial mode.</p> <code>EmptySkin</code> <code>effects</code> <code>Effects</code> <p>The effects for the tutorial mode.</p> <code>EmptyEffects</code> <code>particles</code> <code>Particles</code> <p>The particles for the tutorial mode.</p> <code>EmptyParticles</code> <code>instructions</code> <code>TutorialInstructions</code> <p>The instructions for the tutorial mode.</p> <code>EmptyInstructions</code> <code>instruction_icons</code> <code>TutorialInstructionIcons</code> <p>The instruction icons for the tutorial mode.</p> <code>EmptyInstructionIcons</code> <code>preprocess</code> <code>Callable[[], None]</code> <p>A callback to be called before the tutorial starts.</p> required <code>navigate</code> <code>Callable[[], None]</code> <p>A callback to be called when the user navigates.</p> required <code>update</code> <code>Callable[[], None]</code> <p>A callback to be called each frame.</p> required"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.WatchMode","title":"<code>WatchMode</code>","text":"<p>A watch mode definition.</p> <p>Parameters:</p> Name Type Description Default <code>archetypes</code> <code>list[type[_BaseArchetype]] | None</code> <p>A list of watch archetypes.</p> <code>None</code> <code>skin</code> <code>Skin</code> <p>The skin for the watch mode.</p> <code>EmptySkin</code> <code>effects</code> <code>Effects</code> <p>The effects for the watch mode.</p> <code>EmptyEffects</code> <code>particles</code> <code>Particles</code> <p>The particles for the watch mode.</p> <code>EmptyParticles</code> <code>buckets</code> <code>Buckets</code> <p>The buckets for the watch mode.</p> <code>EmptyBuckets</code> <code>update_spawn</code> <code>Callable[[], float]</code> <p>A callback returning the spawn time used by archetypes.</p> required"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.empty_play_mode","title":"<code>empty_play_mode() -&gt; PlayMode</code>","text":"<p>Create an empty play mode.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.empty_preview_mode","title":"<code>empty_preview_mode() -&gt; PreviewMode</code>","text":"<p>Create an empty preview mode.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.empty_tutorial_mode","title":"<code>empty_tutorial_mode() -&gt; TutorialMode</code>","text":"<p>Create an empty tutorial mode.</p>"},{"location":"reference/sonolus.script.engine/#sonolus.script.engine.empty_watch_mode","title":"<code>empty_watch_mode() -&gt; WatchMode</code>","text":"<p>Create an empty watch mode.</p>"},{"location":"reference/sonolus.script.globals/","title":"sonolus.script.globals","text":""},{"location":"reference/sonolus.script.globals/#sonolus.script.globals.level_data","title":"<code>level_data(cls: type[T]) -&gt; T</code>","text":"<p>Define level data.</p> <p>Level data may only be modified during <code>preprocess</code>. Compared to level memory, it enables some optimizations during gameplay, so it's recommended to use it if mutation is only needed during preprocessing.</p> Usage <pre><code>@level_data\nclass LevelData:\n    variable: int\n\nvariable = level_data(Array[int, 10])\n\ndef f():\n    LevelData.variable = 1\n    variable[0] = 2\n</code></pre>"},{"location":"reference/sonolus.script.globals/#sonolus.script.globals.level_memory","title":"<code>level_memory(cls: type[T]) -&gt; T</code>","text":"<p>Define level memory.</p> <p>Level memory may be modified during gameplay in sequential callbacks (<code>preprocess</code>, <code>update_sequential</code>, <code>touch</code>). Compared to level data, it allows modification during gameplay, but prevents some optimizations.</p> Usage <pre><code>@level_memory\nclass LevelMemory:\n    variable: int\n\nvariable = level_memory(Array[int, 10])\n\ndef f():\n    LevelMemory.variable = 1\n    variable[0] = 2\n</code></pre>"},{"location":"reference/sonolus.script.instruction/","title":"sonolus.script.instruction","text":""},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.Instruction","title":"<code>Instruction</code>","text":"<p>               Bases: <code>Record</code></p> <p>Tutorial instruction text.</p> Usage <pre><code>Instruction(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.Instruction.show","title":"<code>show()</code>","text":"<p>Show this instruction text.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.InstructionIcon","title":"<code>InstructionIcon</code>","text":"<p>               Bases: <code>Record</code></p> <p>Tutorial instruction icon.</p> Usage <pre><code>InstructionIcon(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.InstructionIcon.paint","title":"<code>paint(position: Vec2, size: float, rotation: float, z: float, a: float)</code>","text":"<p>Paint this instruction icon.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Vec2</code> <p>The position of the icon.</p> required <code>size</code> <code>float</code> <p>The size of the icon.</p> required <code>rotation</code> <code>float</code> <p>The rotation of the icon.</p> required <code>z</code> <code>float</code> <p>The z-index of the icon.</p> required <code>a</code> <code>float</code> <p>The alpha of the icon.</p> required"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.StandardInstruction","title":"<code>StandardInstruction</code>","text":"<p>Standard instructions.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.StandardInstructionIcon","title":"<code>StandardInstructionIcon</code>","text":"<p>Standard instruction icons.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.clear_instruction","title":"<code>clear_instruction()</code>","text":"<p>Clear the current instruction text.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.instruction","title":"<code>instruction(name: str) -&gt; Any</code>","text":"<p>Define an instruction with the given name.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.instruction_icon","title":"<code>instruction_icon(name: str) -&gt; Any</code>","text":"<p>Define an instruction icon with the given name.</p>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.instruction_icons","title":"<code>instruction_icons(cls: type[T]) -&gt; T | TutorialInstructionIcons</code>","text":"<p>Decorator to define tutorial instruction icons.</p> Usage <pre><code>@instruction_icons\nclass InstructionIcons:\n    hand: StandardInstructionIcon.HAND\n    other_icon: InstructionIcon = instruction_icon(\"Other Icon\")\n</code></pre>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.instructions","title":"<code>instructions(cls: type[T]) -&gt; T | TutorialInstructions</code>","text":"<p>Decorator to define tutorial instructions.</p> Usage <pre><code>@instructions\nclass Instructions:\n    tap: StandardInstruction.TAP\n    other_instruction: InstructionText = instruction(\"Other Instruction\")\n</code></pre>"},{"location":"reference/sonolus.script.instruction/#sonolus.script.instruction.show_instruction","title":"<code>show_instruction(inst: Instruction)</code>","text":"<p>Show the given instruction text.</p>"},{"location":"reference/sonolus.script.interval/","title":"sonolus.script.interval","text":""},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval","title":"<code>Interval</code>","text":"<p>               Bases: <code>Record</code></p> <p>A closed interval.</p> Usage <pre><code>Interval(start: float, end: float)\n</code></pre>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.is_empty","title":"<code>is_empty: bool</code>  <code>property</code>","text":"<p>Whether the interval has a start greater than its end.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.length","title":"<code>length: float</code>  <code>property</code>","text":"<p>The length of the interval.</p> <p>May be negative if the end is less than the start.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.mid","title":"<code>mid: float</code>  <code>property</code>","text":"<p>The midpoint of the interval.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.tuple","title":"<code>tuple</code>  <code>property</code>","text":"<p>The interval as a tuple.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__add__","title":"<code>__add__(other: float | int) -&gt; Interval</code>","text":"<p>Add a value to both ends of the interval.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to add.</p> required <p>Returns:</p> Type Description <code>Interval</code> <p>A new interval with the value added to both ends.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__and__","title":"<code>__and__(other: Interval) -&gt; Interval</code>","text":"<p>Get the intersection of two intervals.</p> <p>The resulting interval will be empty and may have a negative length if the two intervals do not overlap.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Interval</code> <p>The other interval.</p> required <p>Returns:</p> Type Description <code>Interval</code> <p>A new interval representing the intersection of the two intervals.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__contains__","title":"<code>__contains__(item: Interval | float | int) -&gt; bool</code>","text":"<p>Check if an item is within the interval.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Interval | float | int</code> <p>The item to check. If it is an interval, it must be fully contained within this interval.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the item is within the interval, False otherwise.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__floordiv__","title":"<code>__floordiv__(other: float | int) -&gt; Interval</code>","text":"<p>Divide both ends of the interval by a value and floor the result.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to divide by.</p> required <p>Returns:</p> Type Description <code>Interval</code> <p>A new interval with both ends divided by the value and floored.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__mul__","title":"<code>__mul__(other: float | int) -&gt; Interval</code>","text":"<p>Multiply both ends of the interval by a value.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to multiply by.</p> required <p>Returns:</p> Type Description <code>Interval</code> <p>A new interval with both ends multiplied by the value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__sub__","title":"<code>__sub__(other: float | int) -&gt; Interval</code>","text":"<p>Subtract a value from both ends of the interval.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to subtract.</p> required <p>Returns:</p> Type Description <code>Interval</code> <p>A new interval with the value subtracted from both ends.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.__truediv__","title":"<code>__truediv__(other: float | int) -&gt; Interval</code>","text":"<p>Divide both ends of the interval by a value.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>float | int</code> <p>The value to divide by.</p> required <p>Returns:</p> Type Description <code>Interval</code> <p>A new interval with both ends divided by the value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.clamp","title":"<code>clamp(x: float) -&gt; float</code>","text":"<p>Clamp a value to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to clamp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The clamped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.expand","title":"<code>expand(value: float | int) -&gt; Interval</code>","text":"<p>Expand the interval by a value on both ends.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float | int</code> <p>The value to expand by.</p> required <p>Returns:</p> Type Description <code>Interval</code> <p>A new interval with the value subtracted from the start and added to the end.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.lerp","title":"<code>lerp(x: float) -&gt; float</code>","text":"<p>Linearly interpolate a value within the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The interpolation factor.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.lerp_clamped","title":"<code>lerp_clamped(x: float) -&gt; float</code>","text":"<p>Linearly interpolate a value within the interval, clamped to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The interpolation factor.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.shrink","title":"<code>shrink(value: float | int) -&gt; Interval</code>","text":"<p>Shrink the interval by a value on both ends.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float | int</code> <p>The value to shrink by.</p> required <p>Returns:</p> Type Description <code>Interval</code> <p>A new interval with the value subtracted from the start and added to the end.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.unlerp","title":"<code>unlerp(x: float) -&gt; float</code>","text":"<p>Inverse linear interpolation of a value within the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to unlerp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The unlerped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.unlerp_clamped","title":"<code>unlerp_clamped(x: float) -&gt; float</code>","text":"<p>Inverse linear interpolation of a value within the interval, clamped to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to unlerp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The unlerped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.Interval.zero","title":"<code>zero() -&gt; Interval</code>  <code>classmethod</code>","text":"<p>Get an empty interval.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.clamp","title":"<code>clamp(x: float, a: float, b: float) -&gt; float</code>","text":"<p>Clamp a value to an interval.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to clamp.</p> required <code>a</code> <code>float</code> <p>The start of the interval.</p> required <code>b</code> <code>float</code> <p>The end of the interval.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The clamped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.interp","title":"<code>interp(xp: ArrayLike[float] | tuple[float, ...], fp: ArrayLike[float] | tuple[float, ...], x: float) -&gt; float</code>","text":"<p>Linearly interpolate a value within a sequence of points.</p> <p>The sequence must have at least 2 elements and be sorted in increasing order of x-coordinates. For values of x outside the range of xp, the slope of the first or last segment is used to extrapolate.</p> <p>Parameters:</p> Name Type Description Default <code>xp</code> <code>ArrayLike[float] | tuple[float, ...]</code> <p>The x-coordinates of the points in increasing order.</p> required <code>fp</code> <code>ArrayLike[float] | tuple[float, ...]</code> <p>The y-coordinates of the points.</p> required <code>x</code> <code>float</code> <p>The x-coordinate to interpolate.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.interp_clamped","title":"<code>interp_clamped(xp: ArrayLike[float] | tuple[float, ...], fp: ArrayLike[float] | tuple[float, ...], x: float) -&gt; float</code>","text":"<p>Linearly interpolate a value within a sequence of points.</p> <p>The sequence must have at least 2 elements and be sorted in increasing order of x-coordinates. For x-coordinates outside the range of the sequence, the respective endpoint of fp is returned.</p> <p>Parameters:</p> Name Type Description Default <code>xp</code> <code>ArrayLike[float] | tuple[float, ...]</code> <p>The x-coordinates of the points in increasing order.</p> required <code>fp</code> <code>ArrayLike[float] | tuple[float, ...]</code> <p>The y-coordinates of the points.</p> required <code>x</code> <code>float</code> <p>The x-coordinate to interpolate.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.lerp","title":"<code>lerp(a: T, b: T, x: float) -&gt; T</code>","text":"<p>Linearly interpolate between two values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>T</code> <p>The start value.</p> required <code>b</code> <code>T</code> <p>The end value.</p> required <code>x</code> <code>float</code> <p>The interpolation factor.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.lerp_clamped","title":"<code>lerp_clamped(a: T, b: T, x: float) -&gt; T</code>","text":"<p>Linearly interpolate between two values, clamped to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>T</code> <p>The start value.</p> required <code>b</code> <code>T</code> <p>The end value.</p> required <code>x</code> <code>float</code> <p>The interpolation factor.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The interpolated value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.remap","title":"<code>remap(a: float, b: float, c: float, d: float, x: float) -&gt; float</code>","text":"<p>Linearly remap a value from one interval to another.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The start of the input interval.</p> required <code>b</code> <code>float</code> <p>The end of the input interval.</p> required <code>c</code> <code>float</code> <p>The start of the output interval.</p> required <code>d</code> <code>float</code> <p>The end of the output interval.</p> required <code>x</code> <code>float</code> <p>The value to remap.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The remapped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.remap_clamped","title":"<code>remap_clamped(a: float, b: float, c: float, d: float, x: float) -&gt; float</code>","text":"<p>Linearly remap a value from one interval to another, clamped to the output interval.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The start of the input interval.</p> required <code>b</code> <code>float</code> <p>The end of the input interval.</p> required <code>c</code> <code>float</code> <p>The start of the output interval.</p> required <code>d</code> <code>float</code> <p>The end of the output interval.</p> required <code>x</code> <code>float</code> <p>The value to remap.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The remapped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.unlerp","title":"<code>unlerp(a: float, b: float, x: float) -&gt; float</code>","text":"<p>Inverse linear interpolation.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The start value.</p> required <code>b</code> <code>float</code> <p>The end value.</p> required <code>x</code> <code>float</code> <p>The value to unlerp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The unlerped value.</p>"},{"location":"reference/sonolus.script.interval/#sonolus.script.interval.unlerp_clamped","title":"<code>unlerp_clamped(a: float, b: float, x: float) -&gt; float</code>","text":"<p>Inverse linear interpolation, clamped to the interval.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The start value.</p> required <code>b</code> <code>float</code> <p>The end value.</p> required <code>x</code> <code>float</code> <p>The value to unlerp.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The unlerped value.</p>"},{"location":"reference/sonolus.script.iterator/","title":"sonolus.script.iterator","text":""},{"location":"reference/sonolus.script.iterator/#sonolus.script.iterator.SonolusIterator","title":"<code>SonolusIterator</code>","text":"<p>Base class for Sonolus iterators.</p> <p>This class is used to define custom iterators that can be used in Sonolus.py.</p> <p>Inheritors must implement the <code>next</code> method, which should return a <code>Maybe[T]</code>.</p> Usage <pre><code>class MyIterator(Record, SonolusIterator):\n    def next(self) -&gt; Maybe[T]:\n        ...\n</code></pre>"},{"location":"reference/sonolus.script.iterator/#sonolus.script.iterator.SonolusIterator.next","title":"<code>next() -&gt; Maybe[T]</code>","text":"<p>Return the next item from the iterator as a <code>Maybe</code>.</p>"},{"location":"reference/sonolus.script.iterator/#sonolus.script.iterator.maybe_next","title":"<code>maybe_next(iterator: Iterator[T]) -&gt; Maybe[T]</code>","text":"<p>Get the next item from an iterator as a <code>Maybe</code>.</p>"},{"location":"reference/sonolus.script.level/","title":"sonolus.script.level","text":""},{"location":"reference/sonolus.script.level/#sonolus.script.level.BpmChange","title":"<code>BpmChange</code>","text":"<p>               Bases: <code>PlayArchetype</code></p> <p>The standard bpm change archetype.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.ExportedLevel","title":"<code>ExportedLevel</code>","text":"<p>An exported Sonolus level.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.ExportedLevel.write_to_dir","title":"<code>write_to_dir(path: PathLike)</code>","text":"<p>Write the exported level to a directory.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.ExternalEntityData","title":"<code>ExternalEntityData</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Entity data parsed from an external source.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.ExternalLevelData","title":"<code>ExternalLevelData</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Level data parsed from an external source.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.Level","title":"<code>Level</code>","text":"<p>A Sonolus level.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the level.</p> required <code>title</code> <code>AnyText | None</code> <p>The title of the level.</p> <code>None</code> <code>rating</code> <code>int</code> <p>The rating of the level.</p> <code>0</code> <code>artists</code> <code>AnyText</code> <p>The artists of the level.</p> <code>'Unknown'</code> <code>author</code> <code>AnyText</code> <p>The author of the level.</p> <code>'Unknown'</code> <code>cover</code> <code>Asset | None</code> <p>The cover of the level.</p> <code>None</code> <code>bgm</code> <code>Asset | None</code> <p>The background music of the level.</p> <code>None</code> <code>data</code> <code>LevelData</code> <p>The data of the level.</p> required <code>use_skin</code> <code>str | None</code> <p>The skin to use, overriding the engine skin.</p> <code>None</code> <code>use_background</code> <code>str | None</code> <p>The background to use, overriding the engine background.</p> <code>None</code> <code>use_effect</code> <code>str | None</code> <p>The effect to use, overriding the engine effect.</p> <code>None</code> <code>use_particle</code> <code>str | None</code> <p>The particle to use, overriding the engine particle.</p> <code>None</code> <code>tags</code> <code>list[Tag] | None</code> <p>The tags of the level.</p> <code>None</code> <code>description</code> <code>AnyText | None</code> <p>The description of the level.</p> <code>None</code> <code>meta</code> <code>Any</code> <p>Additional metadata of the level.</p> <code>None</code>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.Level.export","title":"<code>export(engine_name: str) -&gt; ExportedLevel</code>","text":"<p>Export the level in a sonolus-pack compatible format.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>The name of the engine this level is for.</p> required <p>Returns:</p> Type Description <code>ExportedLevel</code> <p>The exported level.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.LevelData","title":"<code>LevelData</code>","text":"<p>The data of a Sonolus level.</p> <p>Parameters:</p> Name Type Description Default <code>bgm_offset</code> <code>float</code> <p>The background music audio offset.</p> required <code>entities</code> <code>EntityListArg</code> <p>The entities of the level.</p> required"},{"location":"reference/sonolus.script.level/#sonolus.script.level.TimescaleChange","title":"<code>TimescaleChange</code>","text":"<p>               Bases: <code>PlayArchetype</code></p> <p>The standard timescale change archetype.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.flatten_entities","title":"<code>flatten_entities(entities: EntityListArg) -&gt; Iterator[PlayArchetype]</code>","text":"<p>Flatten a list of entities.</p> <p>Parameters:</p> Name Type Description Default <code>entities</code> <code>EntityListArg</code> <p>The list of entities.</p> required <p>Yields:</p> Type Description <code>PlayArchetype</code> <p>The flattened entities.</p>"},{"location":"reference/sonolus.script.level/#sonolus.script.level.parse_external_level_data","title":"<code>parse_external_level_data(raw_data: ExternalLevelDataDict | str | bytes) -&gt; ExternalLevelData</code>","text":"<p>Parse level data from an external source.</p> <p>If given a string, it is parsed as JSON. If given bytes, it is un-gzipped and then parsed as JSON.</p> <p>Parameters:</p> Name Type Description Default <code>raw_data</code> <code>ExternalLevelDataDict | str | bytes</code> <p>The raw level data to parse.</p> required <p>Returns:</p> Type Description <code>ExternalLevelData</code> <p>The parsed level data.</p>"},{"location":"reference/sonolus.script.maybe/","title":"sonolus.script.maybe","text":""},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Nothing","title":"<code>Nothing: Maybe[Any]</code>  <code>module-attribute</code>","text":"<p>The empty <code>Maybe</code> instance.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe","title":"<code>Maybe</code>","text":"<p>               Bases: <code>TransientValue</code></p> <p>A type that either has a value or is empty.</p> <p><code>Maybe</code> has special behavior when returned from a function: unlike records and arrays, it may be returned from multiple places in a function, provided that all but one return statement returns the literal <code>Nothing</code>.</p> <p>Storing values of this type in a Record, Array, or Archetype is not supported.</p> Usage <pre><code>def fn(a, b):\n    if a:\n        return Some(b)\n    else:\n        return Nothing\n\nresult = fn(..., ...)\nif result.is_some:\n    value = result.get()\n    ...\n</code></pre>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe.is_nothing","title":"<code>is_nothing: bool</code>  <code>property</code>","text":"<p>Check if the value is empty.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe.is_some","title":"<code>is_some: bool</code>  <code>property</code>","text":"<p>Check if the value is present.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe.tuple","title":"<code>tuple: tuple[bool, T]</code>  <code>property</code>","text":"<p>Return whether the value is present and a copy of the contained value if present as a tuple.</p> <p>If the value is not present, the tuple will contain <code>False</code> and a zero initialized value of the contained type.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe.flat_map","title":"<code>flat_map(fn: Callable[[T], Maybe[R]]) -&gt; Maybe[R]</code>","text":"<p>Flat map the contained value to a new <code>Maybe</code> using the provided function.</p> <p>If the value is not present, returns <code>Nothing</code>.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[T], Maybe[R]]</code> <p>A function that takes the contained value and returns a new <code>Maybe</code>.</p> required <p>Returns:</p> Type Description <code>Maybe[R]</code> <p>A <code>Maybe</code> instance containing the result of the function if the value</p> <code>Maybe[R]</code> <p>is present, otherwise <code>Nothing</code>.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe.get","title":"<code>get() -&gt; T</code>","text":"<p>Get the value if present, otherwise raise an error.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe.map","title":"<code>map(fn: Callable[[T], R]) -&gt; Maybe[R]</code>","text":"<p>Map the contained value to a new value using the provided function.</p> <p>If the value is not present, returns <code>Nothing</code>.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[T], R]</code> <p>A function that takes the contained value and returns a new value.</p> required <p>Returns:</p> Type Description <code>Maybe[R]</code> <p>A <code>Maybe</code> instance containing the result of the function if the value</p> <code>Maybe[R]</code> <p>is present, otherwise <code>Nothing</code>.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe.or_default","title":"<code>or_default(default: T) -&gt; T</code>","text":"<p>Return a copy of the contained value if present, otherwise return a copy of the given default value.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>T</code> <p>The default value to return if the contained value is not present.</p> required <p>Returns:</p> Type Description <code>T</code> <p>A copy of the contained value if present, otherwise a copy of the default value.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Maybe.or_else","title":"<code>or_else(fn: Callable[[], T]) -&gt; T</code>","text":"<p>Return a copy of the contained value if present, otherwise return a copy of the result of the given function.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[], T]</code> <p>A function that returns a value to use if the contained value is not present.</p> required <p>Returns:</p> Type Description <code>T</code> <p>A copy of the contained value if present, otherwise a copy of the result of calling the function.</p>"},{"location":"reference/sonolus.script.maybe/#sonolus.script.maybe.Some","title":"<code>Some(value: T) -&gt; Maybe[T]</code>","text":"<p>Create a <code>Maybe</code> instance with a value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The contained value.</p> required <p>Returns:</p> Type Description <code>Maybe[T]</code> <p>A <code>Maybe</code> instance that contains the provided value.</p>"},{"location":"reference/sonolus.script.metadata/","title":"sonolus.script.metadata","text":""},{"location":"reference/sonolus.script.metadata/#sonolus.script.metadata.Tag","title":"<code>Tag</code>","text":"<p>A tag for an engine or level.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>AnyText</code> <p>The title of the tag.</p> required <code>icon</code> <code>str | None</code> <p>The icon of the tag.</p> <code>None</code>"},{"location":"reference/sonolus.script.num/","title":"sonolus.script.num","text":""},{"location":"reference/sonolus.script.num/#doc_stubs.num.Num","title":"<code>Num</code>","text":"<p>               Bases: <code>int</code>, <code>bool</code>, <code>float</code></p> <p>Common type for numbers and booleans.</p> <p>See the relevant concepts page for more information.</p>"},{"location":"reference/sonolus.script.options/","title":"sonolus.script.options","text":""},{"location":"reference/sonolus.script.options/#sonolus.script.options.options","title":"<code>options(cls: type[T]) -&gt; T | Options</code>","text":"<p>Decorator to define options.</p> Usage <pre><code>@options\nclass Options:\n    slider_option: float = slider_option(\n        name='Slider Option',\n        standard=True,\n        advanced=False,\n        default=0.5,\n        min=0,\n        max=1,\n        step=0.1,\n        unit='unit',\n        scope='scope',\n    )\n    toggle_option: bool = toggle_option(\n        name='Toggle Option',\n        standard=True,\n        advanced=False,\n        default=True,\n        scope='scope',\n    )\n    select_option: int = select_option(\n        name='Select Option',\n        standard=True,\n        advanced=False,\n        default='value',\n        values=['value'],\n        scope='scope',\n    )\n</code></pre>"},{"location":"reference/sonolus.script.options/#sonolus.script.options.select_option","title":"<code>select_option(*, name: str | None = None, description: str | None = None, standard: bool = False, advanced: bool = False, default: str | int, values: list[str], scope: str | None = None) -&gt; Any</code>","text":"<p>Define a select option.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name of the option.</p> <code>None</code> <code>description</code> <code>str | None</code> <p>The description of the option.</p> <code>None</code> <code>standard</code> <code>bool</code> <p>Whether the option is standard.</p> <code>False</code> <code>advanced</code> <code>bool</code> <p>Whether the option is advanced.</p> <code>False</code> <code>default</code> <code>str | int</code> <p>The default value of the option.</p> required <code>values</code> <code>list[str]</code> <p>The values of the option.</p> required <code>scope</code> <code>str | None</code> <p>The scope of the option.</p> <code>None</code>"},{"location":"reference/sonolus.script.options/#sonolus.script.options.slider_option","title":"<code>slider_option(*, name: str | None = None, description: str | None = None, standard: bool = False, advanced: bool = False, default: float, min: float, max: float, step: float, unit: str | None = None, scope: str | None = None) -&gt; Any</code>","text":"<p>Define a slider option.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name of the option.</p> <code>None</code> <code>description</code> <code>str | None</code> <p>The description of the option.</p> <code>None</code> <code>standard</code> <code>bool</code> <p>Whether the option is standard.</p> <code>False</code> <code>advanced</code> <code>bool</code> <p>Whether the option is advanced.</p> <code>False</code> <code>default</code> <code>float</code> <p>The default value of the option.</p> required <code>min</code> <code>float</code> <p>The minimum value of the option.</p> required <code>max</code> <code>float</code> <p>The maximum value of the option.</p> required <code>step</code> <code>float</code> <p>The step value of the option.</p> required <code>unit</code> <code>str | None</code> <p>The unit of the option.</p> <code>None</code> <code>scope</code> <code>str | None</code> <p>The scope of the option.</p> <code>None</code>"},{"location":"reference/sonolus.script.options/#sonolus.script.options.toggle_option","title":"<code>toggle_option(*, name: str | None = None, description: str | None = None, standard: bool = False, advanced: bool = False, default: bool, scope: str | None = None) -&gt; Any</code>","text":"<p>Define a toggle option.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name of the option.</p> <code>None</code> <code>description</code> <code>str | None</code> <p>The description of the option.</p> <code>None</code> <code>standard</code> <code>bool</code> <p>Whether the option is standard.</p> <code>False</code> <code>advanced</code> <code>bool</code> <p>Whether the option is advanced.</p> <code>False</code> <code>default</code> <code>bool</code> <p>The default value of the option.</p> required <code>scope</code> <code>str | None</code> <p>The scope of the option.</p> <code>None</code>"},{"location":"reference/sonolus.script.particle/","title":"sonolus.script.particle","text":""},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.Particle","title":"<code>Particle</code>","text":"<p>               Bases: <code>Record</code></p> <p>A particle effect.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.Particle.is_available","title":"<code>is_available: bool</code>  <code>property</code>","text":"<p>Check if the particle effect is available.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.Particle.spawn","title":"<code>spawn(quad: QuadLike, duration: float, loop: bool = False) -&gt; ParticleHandle</code>","text":"<p>Spawn the particle effect.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to spawn the particle effect on.</p> required <code>duration</code> <code>float</code> <p>The duration of the particle effect.</p> required <code>loop</code> <code>bool</code> <p>Whether to loop the particle effect.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>ParticleHandle</code> <code>ParticleHandle</code> <p>A handle to the spawned particle effect.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.ParticleGroup","title":"<code>ParticleGroup</code>","text":"<p>               Bases: <code>Record</code>, <code>ArrayLike[Particle]</code></p> <p>A group of particle effects.</p> Usage <pre><code>ParticleGroup(start_id: int, size: int)\n</code></pre>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.ParticleHandle","title":"<code>ParticleHandle</code>","text":"<p>               Bases: <code>Record</code></p> <p>A handle to a looping particle effect.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.ParticleHandle.destroy","title":"<code>destroy() -&gt; None</code>","text":"<p>Destroy the particle effect.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.ParticleHandle.move","title":"<code>move(quad: QuadLike) -&gt; None</code>","text":"<p>Move the particle effect to a new location.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The new quad to move the particle effect to.</p> required"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.StandardParticle","title":"<code>StandardParticle</code>","text":"<p>Standard particles.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.particle","title":"<code>particle(name: str) -&gt; Any</code>","text":"<p>Define a particle with the given name.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.particle_group","title":"<code>particle_group(names: Iterable[str]) -&gt; Any</code>","text":"<p>Define a particle group with the given names.</p>"},{"location":"reference/sonolus.script.particle/#sonolus.script.particle.particles","title":"<code>particles(cls: type[T]) -&gt; T | Particles</code>","text":"<p>Decorator to define particles.</p> Usage <pre><code>@particles\nclass Particles:\n    tap: StandardParticle.NOTE_CIRCULAR_TAP_RED\n    other: Particle = particle(\"other\")\n    group_1: ParticleGroup = particle_group([\"one\", \"two\", \"three\"])\n    group_2: ParticleGroup = particle_group(f\"name_{i}\" for i in range(10))\n</code></pre>"},{"location":"reference/sonolus.script.printing/","title":"sonolus.script.printing","text":""},{"location":"reference/sonolus.script.printing/#sonolus.script.printing.PrintColor","title":"<code>PrintColor</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Print color.</p>"},{"location":"reference/sonolus.script.printing/#sonolus.script.printing.PrintFormat","title":"<code>PrintFormat</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Print format.</p>"},{"location":"reference/sonolus.script.printing/#sonolus.script.printing.print_number","title":"<code>print_number(value: int | float, *, fmt: PrintFormat, decimal_places: int = 0, anchor: Vec2, pivot: Vec2, dimensions: Vec2, rotation: float = 0, color: PrintColor = PrintColor.THEME, alpha: float = 1, horizontal_align: HorizontalAlign = HorizontalAlign.LEFT, background: bool = False)</code>","text":"<p>Print a number.</p> <p>Only supported in preview mode.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float</code> <p>The value to print.</p> required <code>fmt</code> <code>PrintFormat</code> <p>The print format.</p> required <code>decimal_places</code> <code>int</code> <p>The number of decimal places.</p> <code>0</code> <code>anchor</code> <code>Vec2</code> <p>The anchor.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot.</p> required <code>dimensions</code> <code>Vec2</code> <p>The dimensions.</p> required <code>rotation</code> <code>float</code> <p>The rotation.</p> <code>0</code> <code>color</code> <code>PrintColor</code> <p>The color.</p> <code>THEME</code> <code>alpha</code> <code>float</code> <p>The alpha.</p> <code>1</code> <code>horizontal_align</code> <code>HorizontalAlign</code> <p>The horizontal alignment.</p> <code>LEFT</code> <code>background</code> <code>bool</code> <p>Whether to show a background.</p> <code>False</code>"},{"location":"reference/sonolus.script.project/","title":"sonolus.script.project","text":""},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig","title":"<code>BuildConfig</code>  <code>dataclass</code>","text":"<p>A configuration for building an engine package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.FAST_PASSES","title":"<code>FAST_PASSES: Sequence[CompilerPass] = optimize.FAST_PASSES</code>  <code>class-attribute</code>","text":"<p>The list of compiler passes for faster builds.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.MINIMAL_PASSES","title":"<code>MINIMAL_PASSES: Sequence[CompilerPass] = optimize.MINIMAL_PASSES</code>  <code>class-attribute</code>","text":"<p>The minimal list of compiler passes.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.STANDARD_PASSES","title":"<code>STANDARD_PASSES: Sequence[CompilerPass] = optimize.STANDARD_PASSES</code>  <code>class-attribute</code>","text":"<p>The standard list of compiler passes.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.build_play","title":"<code>build_play: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to build the play package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.build_preview","title":"<code>build_preview: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to build the preview package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.build_tutorial","title":"<code>build_tutorial: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to build the tutorial package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.build_watch","title":"<code>build_watch: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to build the watch package.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.override_resource_level_engines","title":"<code>override_resource_level_engines: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to override any levels included in resources to use the engine of this project.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.BuildConfig.passes","title":"<code>passes: Sequence[CompilerPass] = optimize.STANDARD_PASSES</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The list of compiler passes to use.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project","title":"<code>Project</code>","text":"<p>A Sonolus.py project.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>The engine of the project.</p> required <code>levels</code> <code>Iterable[Level] | Callable[[], Iterable[Level]] | None</code> <p>The levels of the project.</p> <code>None</code> <code>resources</code> <code>PathLike | None</code> <p>The path to the resources of the project.</p> <code>None</code> <code>converters</code> <code>dict[str | None, Callable[[ExternalLevelData], LevelData | None]] | None</code> <p>A dictionary mapping engine names to converter functions, for converting loaded levels.</p> <code>None</code>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project.build","title":"<code>build(build_dir: PathLike, config: BuildConfig | None = None)</code>","text":"<p>Build the project.</p> <p>Parameters:</p> Name Type Description Default <code>build_dir</code> <code>PathLike</code> <p>The path to the build directory.</p> required <code>config</code> <code>BuildConfig | None</code> <p>The build configuration.</p> <code>None</code>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project.dev","title":"<code>dev(build_dir: PathLike, port: int = 8080, config: BuildConfig | None = None)</code>","text":"<p>Start a development server for the project.</p> <p>Parameters:</p> Name Type Description Default <code>build_dir</code> <code>PathLike</code> <p>The path to the build directory.</p> required <code>port</code> <code>int</code> <p>The port of the development server.</p> <code>8080</code> <code>config</code> <code>BuildConfig | None</code> <p>The build configuration.</p> <code>None</code>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project.schema","title":"<code>schema() -&gt; ProjectSchema</code>","text":"<p>Generate the schema of the project.</p> <p>Returns:</p> Type Description <code>ProjectSchema</code> <p>The schema of the project.</p>"},{"location":"reference/sonolus.script.project/#sonolus.script.project.Project.with_levels","title":"<code>with_levels(levels: Iterable[Level] | Callable[[], Iterable[Level]] | None) -&gt; Project</code>","text":"<p>Create a new project with the specified levels.</p> <p>Parameters:</p> Name Type Description Default <code>levels</code> <code>Iterable[Level] | Callable[[], Iterable[Level]] | None</code> <p>The levels of the project.</p> required <p>Returns:</p> Type Description <code>Project</code> <p>The new project.</p>"},{"location":"reference/sonolus.script.quad/","title":"sonolus.script.quad","text":""},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad","title":"<code>Quad</code>","text":"<p>               Bases: <code>Record</code></p> <p>A quad defined by its four corners.</p> Usage <pre><code>Quad(bl: Vec2, tl: Vec2, tr: Vec2, br: Vec2)\n</code></pre>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.bl","title":"<code>bl: Vec2</code>  <code>instance-attribute</code>","text":"<p>The bottom-left corner of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.br","title":"<code>br: Vec2</code>  <code>instance-attribute</code>","text":"<p>The bottom-right corner of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.center","title":"<code>center: Vec2</code>  <code>property</code>","text":"<p>The center of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.mb","title":"<code>mb: Vec2</code>  <code>property</code>","text":"<p>The midpoint of the bottom edge of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.ml","title":"<code>ml: Vec2</code>  <code>property</code>","text":"<p>The midpoint of the left edge of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.mr","title":"<code>mr: Vec2</code>  <code>property</code>","text":"<p>The midpoint of the right edge of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.mt","title":"<code>mt: Vec2</code>  <code>property</code>","text":"<p>The midpoint of the top edge of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.tl","title":"<code>tl: Vec2</code>  <code>instance-attribute</code>","text":"<p>The top-left corner of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.tr","title":"<code>tr: Vec2</code>  <code>instance-attribute</code>","text":"<p>The top-right corner of the quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.contains_point","title":"<code>contains_point(point: Vec2) -&gt; bool</code>","text":"<p>Check if the quad contains the given point.</p> <p>It is not guaranteed whether points on the edges of the quad are considered inside or outside.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Vec2</code> <p>The point to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the point is inside the quad, False otherwise.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.from_quad","title":"<code>from_quad(value: QuadLike) -&gt; Quad</code>  <code>classmethod</code>","text":"<p>Create a quad from a quad-like value.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.permute","title":"<code>permute(count: int = 1) -&gt; Quad</code>","text":"<p>Perform a cyclic permutation of the quad's vertices and return a new quad.</p> <p>On a square, this operation is equivalent to rotating the square counterclockwise 90 degrees <code>count</code> times.</p> <p>Negative values of <code>count</code> are allowed and will rotate the quad clockwise.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of vertices to shift. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>Quad</code> <p>The permuted quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.rotate","title":"<code>rotate(angle: float) -&gt; Quad</code>","text":"<p>Rotate the quad by the given angle about the origin and return a new quad.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians. Positive angles rotate counterclockwise.</p> required <p>Returns:</p> Type Description <code>Quad</code> <p>A new quad rotated by the given angle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.rotate_about","title":"<code>rotate_about(angle: float, /, pivot: Vec2) -&gt; Quad</code>","text":"<p>Rotate the quad by the given angle about the given pivot and return a new quad.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians. Positive angles rotate counterclockwise.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot point for rotation.</p> required <p>Returns:</p> Type Description <code>Quad</code> <p>A new quad rotated about the pivot by the given angle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.rotate_centered","title":"<code>rotate_centered(angle: float) -&gt; Quad</code>","text":"<p>Rotate the quad by the given angle about its center and return a new quad.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians. Positive angles rotate counterclockwise.</p> required <p>Returns:</p> Type Description <code>Quad</code> <p>A new quad rotated about its center by the given angle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.scale","title":"<code>scale(factor: Vec2) -&gt; Quad</code>","text":"<p>Scale the quad by the given factor about the origin and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.scale_about","title":"<code>scale_about(factor: Vec2, /, pivot: Vec2) -&gt; Quad</code>","text":"<p>Scale the quad by the given factor about the given pivot and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.scale_centered","title":"<code>scale_centered(factor: Vec2) -&gt; Quad</code>","text":"<p>Scale the quad by the given factor about its center and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.translate","title":"<code>translate(translation: Vec2) -&gt; Quad</code>","text":"<p>Translate the quad by the given translation and return a new quad.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Quad.zero","title":"<code>zero() -&gt; Quad</code>  <code>classmethod</code>","text":"<p>Return a quad with all corners set to (0, 0).</p> <p>Returns:</p> Type Description <code>Quad</code> <p>A new quad with all corners at the origin.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect","title":"<code>Rect</code>","text":"<p>               Bases: <code>Record</code></p> <p>A rectangle defined by its top, right, bottom, and left edges.</p> Usage <pre><code>Rect(t: float, r: float, b: float, l: float)\n</code></pre>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.b","title":"<code>b: float</code>  <code>instance-attribute</code>","text":"<p>The bottom edge of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.bl","title":"<code>bl: Vec2</code>  <code>property</code>","text":"<p>The bottom-left corner of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.br","title":"<code>br: Vec2</code>  <code>property</code>","text":"<p>The bottom-right corner of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.center","title":"<code>center: Vec2</code>  <code>property</code>","text":"<p>The center of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.h","title":"<code>h: float</code>  <code>property</code>","text":"<p>The height of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.l","title":"<code>l: float</code>  <code>instance-attribute</code>","text":"<p>The left edge of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.mb","title":"<code>mb: Vec2</code>  <code>property</code>","text":"<p>The middle-bottom point of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.ml","title":"<code>ml: Vec2</code>  <code>property</code>","text":"<p>The middle-left point of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.mr","title":"<code>mr: Vec2</code>  <code>property</code>","text":"<p>The middle-right point of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.mt","title":"<code>mt: Vec2</code>  <code>property</code>","text":"<p>The middle-top point of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.r","title":"<code>r: float</code>  <code>instance-attribute</code>","text":"<p>The right edge of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.t","title":"<code>t: float</code>  <code>instance-attribute</code>","text":"<p>The top edge of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.tl","title":"<code>tl: Vec2</code>  <code>property</code>","text":"<p>The top-left corner of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.tr","title":"<code>tr: Vec2</code>  <code>property</code>","text":"<p>The top-right corner of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.w","title":"<code>w: float</code>  <code>property</code>","text":"<p>The width of the rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.as_quad","title":"<code>as_quad() -&gt; Quad</code>","text":"<p>Convert the rectangle to a <code>Quad</code>.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.contains_point","title":"<code>contains_point(point: Vec2) -&gt; bool</code>","text":"<p>Check if the rectangle contains the given point.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Vec2</code> <p>The point to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the point is inside the rectangle, False otherwise.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.expand","title":"<code>expand(expansion: Vec2) -&gt; Rect</code>","text":"<p>Expand the rectangle by the given amount and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.from_center","title":"<code>from_center(center: Vec2, dimensions: Vec2) -&gt; Rect</code>  <code>classmethod</code>","text":"<p>Create a rectangle from its center and dimensions.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.from_margin","title":"<code>from_margin(a: float, b: float | None = None, c: float | None = None, d: float | None = None) -&gt; Self</code>  <code>classmethod</code>","text":"<pre><code>from_margin(trbl: float) -&gt; Rect\n</code></pre><pre><code>from_margin(tb: float, lr: float) -&gt; Rect\n</code></pre><pre><code>from_margin(t: float, lr: float, b: float) -&gt; Rect\n</code></pre><pre><code>from_margin(t: float, r: float, b: float, l: float) -&gt; Rect\n</code></pre> <p>Create a rectangle based on margins (edge distances) from the origin.</p> <p>Compared to the regular <code>Rect</code> constructor, this method negates the bottom and left values, and supports shorthands when fewer than four arguments are provided.</p> <p>The following signatures are supported:</p> <ul> <li><code>from_margin(trbl)</code>: All margins set to <code>trbl</code>.</li> <li><code>from_margin(tb, lr)</code>: Top and bottom margins set to <code>tb</code>, left and right margins set to <code>lr</code>.</li> <li><code>from_margin(t, lr, b)</code>: Top margin set to <code>t</code>, left and right margins set to <code>lr</code>, bottom margin set to <code>b</code>.</li> <li><code>from_margin(t, r, b, l)</code>: Top, right, bottom, and left margins set to <code>t</code>, <code>r</code>, <code>b</code>, and <code>l</code> respectively.</li> </ul> Usage <pre><code>Rect.from_margin(1)  # Rect(t=1, r=1, b=-1, l=-1)\nRect.from_margin(1, 2)  # Rect(t=1, r=2, b=-1, l=-2)\nRect.from_margin(1, 2, 3)  # Rect(t=1, r=2, b=-3, l=-2)\nRect.from_margin(1, 2, 3, 4)  # Rect(t=1, r=2, b=-3, l=-4)\n</code></pre>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.scale","title":"<code>scale(factor: Vec2) -&gt; Rect</code>","text":"<p>Scale the rectangle by the given factor about the origin and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.scale_about","title":"<code>scale_about(factor: Vec2, /, pivot: Vec2) -&gt; Rect</code>","text":"<p>Scale the rectangle by the given factor about the given pivot and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.scale_centered","title":"<code>scale_centered(factor: Vec2) -&gt; Rect</code>","text":"<p>Scale the rectangle by the given factor about its center and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.shrink","title":"<code>shrink(shrinkage: Vec2) -&gt; Rect</code>","text":"<p>Shrink the rectangle by the given amount and return a new rectangle.</p>"},{"location":"reference/sonolus.script.quad/#sonolus.script.quad.Rect.translate","title":"<code>translate(translation: Vec2) -&gt; Rect</code>","text":"<p>Translate the rectangle by the given translation and return a new rectangle.</p>"},{"location":"reference/sonolus.script.record/","title":"sonolus.script.record","text":"<p>For usage details, see the corresponding concepts page.</p>"},{"location":"reference/sonolus.script.record/#sonolus.script.record.Record","title":"<code>Record</code>","text":"<p>               Bases: <code>GenericValue</code></p> <p>Base class for user-defined data structures.</p> Usage <p>A regular record: <pre><code>class MyRecord(Record):\n    field1: int\n    field2: bool\n</code></pre></p> <p>A generic record: <pre><code>class MyGenericRecord[T, U](Record):\n    field1: T\n    field2: U\n</code></pre></p> <p>Creating an instance: <pre><code>record = MyRecord(field1=42, field2=True)\nrecord_2 = MyGenericRecord[int, int](field1=42, field2=100)\nrecord_3 = MyGenericRecord(field1=42, field2=100)  # Type arguments can be inferred\nrecord_4 = +MyRecord  # Create a zero-initialized record\nrecord_5 = +MyGenericRecord[int, int]\n</code></pre></p> <p>Copying a record: <pre><code>record_copy = +record\n</code></pre></p>"},{"location":"reference/sonolus.script.record/#sonolus.script.record.Record.type_var_value","title":"<code>type_var_value(var: TypeVar) -&gt; Any</code>  <code>classmethod</code>","text":"<p>Return the value of a type variable.</p> <p>Parameters:</p> Name Type Description Default <code>var</code> <code>TypeVar</code> <p>The type variable to get the value of.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value of the type variable.</p>"},{"location":"reference/sonolus.script.runtime/","title":"sonolus.script.runtime","text":""},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi","title":"<code>RuntimeUi</code>","text":"<p>               Bases: <code>Record</code></p> <p>Holds the layouts for different UI elements across all modes.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.combo_config","title":"<code>combo_config: UiConfig</code>  <code>property</code>","text":"<p>The configuration for the combo UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.combo_text","title":"<code>combo_text: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the combo text UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.combo_value","title":"<code>combo_value: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the combo value UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.instruction","title":"<code>instruction: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the instruction UI element.</p> <p>Available in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.instruction_config","title":"<code>instruction_config: UiConfig</code>  <code>property</code>","text":"<p>The configuration for the instruction UI element.</p> <p>Available in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.judgment","title":"<code>judgment: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the judgment UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.judgment_config","title":"<code>judgment_config: UiConfig</code>  <code>property</code>","text":"<p>The configuration for the judgment UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.menu","title":"<code>menu: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the menu UI element.</p> <p>Available in play, watch, preview, and tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.menu_config","title":"<code>menu_config: UiConfig</code>  <code>property</code>","text":"<p>The configuration for the menu UI element.</p> <p>Available in play, watch, preview, and tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.navigation_config","title":"<code>navigation_config: UiConfig</code>  <code>property</code>","text":"<p>The configuration for the navigation UI element.</p> <p>Available in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.next","title":"<code>next: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the next navigation UI element.</p> <p>Available in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.previous","title":"<code>previous: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the previous navigation UI element.</p> <p>Available in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.primary_metric_bar","title":"<code>primary_metric_bar: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the primary metric bar UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.primary_metric_config","title":"<code>primary_metric_config: UiConfig</code>  <code>property</code>","text":"<p>The configuration for the primary metric UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.primary_metric_value","title":"<code>primary_metric_value: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the primary metric value UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.progress","title":"<code>progress: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the progress UI element.</p> <p>Available in watch and preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.progress_config","title":"<code>progress_config: UiConfig</code>  <code>property</code>","text":"<p>The configuration for the progress UI element.</p> <p>Available in watch and preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.secondary_metric_bar","title":"<code>secondary_metric_bar: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the secondary metric bar UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.secondary_metric_config","title":"<code>secondary_metric_config: UiConfig</code>  <code>property</code>","text":"<p>The configuration for the secondary metric UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.RuntimeUi.secondary_metric_value","title":"<code>secondary_metric_value: UiLayout</code>  <code>property</code>","text":"<p>The configuration for the secondary metric value UI element.</p> <p>Available in play and watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch","title":"<code>Touch</code>","text":"<p>               Bases: <code>Record</code></p> <p>Data of a touch event.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.angle","title":"<code>angle: float</code>  <code>instance-attribute</code>","text":"<p>The angle of the touch's movement.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.delta","title":"<code>delta: Vec2</code>  <code>instance-attribute</code>","text":"<p>The change in position of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.ended","title":"<code>ended: bool</code>  <code>instance-attribute</code>","text":"<p>Whether the touch has ended this frame.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.id","title":"<code>id: int</code>  <code>instance-attribute</code>","text":"<p>The unique identifier of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.position","title":"<code>position: Vec2</code>  <code>instance-attribute</code>","text":"<p>The current position of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.prev_position","title":"<code>prev_position: Vec2</code>  <code>property</code>","text":"<p>The previous position of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.speed","title":"<code>speed: float</code>  <code>instance-attribute</code>","text":"<p>The speed of the touch's movement.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.start_position","title":"<code>start_position: Vec2</code>  <code>instance-attribute</code>","text":"<p>The position the touch started.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.start_time","title":"<code>start_time: float</code>  <code>instance-attribute</code>","text":"<p>The time the touch started.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.started","title":"<code>started: bool</code>  <code>instance-attribute</code>","text":"<p>Whether the touch has started this frame.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.time","title":"<code>time: float</code>  <code>instance-attribute</code>","text":"<p>The time of the touch event.</p> <p>May remain constant while there is no movement.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.total_angle","title":"<code>total_angle: float</code>  <code>property</code>","text":"<p>The total angle of the touch's movement.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.total_delta","title":"<code>total_delta: Vec2</code>  <code>property</code>","text":"<p>The total change in position of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.Touch.velocity","title":"<code>velocity: Vec2</code>  <code>instance-attribute</code>","text":"<p>The velocity of the touch.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.UiConfig","title":"<code>UiConfig</code>","text":"<p>               Bases: <code>Record</code></p> <p>The user configuration for a UI element.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.UiConfig.alpha","title":"<code>alpha: float</code>  <code>property</code>","text":"<p>The alpha (opacity) of the UI element.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.UiConfig.is_available","title":"<code>is_available: bool</code>  <code>property</code>","text":"<p>Check if the config is available in the current mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.UiConfig.scale","title":"<code>scale: float</code>  <code>property</code>","text":"<p>The scale of the UI element.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.UiLayout","title":"<code>UiLayout</code>","text":"<p>               Bases: <code>Record</code></p> <p>The layout of a UI element.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.UiLayout.is_available","title":"<code>is_available: bool</code>  <code>property</code>","text":"<p>Check if the layout is available in the current mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.UiLayout.update","title":"<code>update(anchor: Vec2 | None = None, pivot: Vec2 | None = None, dimensions: Vec2 | None = None, rotation: float | None = None, alpha: float | None = None, horizontal_align: HorizontalAlign | None = None, background: bool | None = None)</code>","text":"<p>Update the layout properties if it's available in the current mode and do nothing otherwise.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.aspect_ratio","title":"<code>aspect_ratio() -&gt; float</code>","text":"<p>Get the aspect ratio of the game.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.audio_offset","title":"<code>audio_offset() -&gt; float</code>","text":"<p>Get the audio offset of the game.</p> <p>Returns 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.background","title":"<code>background() -&gt; Quad</code>","text":"<p>Get the background quad.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.canvas","title":"<code>canvas() -&gt; _PreviewRuntimeCanvas</code>","text":"<p>Get the preview canvas.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.delta_time","title":"<code>delta_time() -&gt; float</code>","text":"<p>Get the time elapsed since the last frame.</p> <p>Returns 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.input_offset","title":"<code>input_offset() -&gt; float</code>","text":"<p>Get the input offset of the game.</p> <p>Returns 0 in preview mode and tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_debug","title":"<code>is_debug() -&gt; bool</code>","text":"<p>Check if the game is running in debug mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_multiplayer","title":"<code>is_multiplayer() -&gt; bool</code>","text":"<p>Check if the game is running in multiplayer mode.</p> <p>Returns False if not in play mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_play","title":"<code>is_play() -&gt; bool</code>","text":"<p>Check if the game is running in play mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_preprocessing","title":"<code>is_preprocessing() -&gt; bool</code>","text":"<p>Check if the game is in the preprocessing stage.</p> <p>Returns True if the current callback is one of preprocess, spawn_order, spawn_time, or despawn_time.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_preview","title":"<code>is_preview() -&gt; bool</code>","text":"<p>Check if the game is running in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_replay","title":"<code>is_replay() -&gt; bool</code>","text":"<p>Check if the game is running in replay mode.</p> <p>Returns False if not in watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_skip","title":"<code>is_skip() -&gt; bool</code>","text":"<p>Check if there was a time skip this frame.</p> <p>Returns False if not in watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_tutorial","title":"<code>is_tutorial() -&gt; bool</code>","text":"<p>Check if the game is running in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.is_watch","title":"<code>is_watch() -&gt; bool</code>","text":"<p>Check if the game is running in watch mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.level_life","title":"<code>level_life() -&gt; _LevelLife</code>","text":"<p>Get the level life configuration.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.level_score","title":"<code>level_score() -&gt; _LevelScore</code>","text":"<p>Get the level score configuration.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.navigation_direction","title":"<code>navigation_direction() -&gt; int</code>","text":"<p>Get the navigation direction of the tutorial.</p> <p>Returns 0 if not in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.offset_adjusted_time","title":"<code>offset_adjusted_time() -&gt; float</code>","text":"<p>Get the current time of the game adjusted by the input offset.</p> <p>Returns 0 in preview mode and the current time without adjustment in tutorial mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.particle_transform","title":"<code>particle_transform() -&gt; Transform2d</code>","text":"<p>Get the global particle transform.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.prev_time","title":"<code>prev_time() -&gt; float</code>","text":"<p>Get the time of the previous frame.</p> <p>Returns 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.runtime_ui","title":"<code>runtime_ui() -&gt; RuntimeUi</code>","text":"<p>Get the runtime UI configuration.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.scaled_time","title":"<code>scaled_time() -&gt; float</code>","text":"<p>Get the current time of the game affected by the time scale.</p> <p>Returns the unscaled time in tutorial mode and 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.screen","title":"<code>screen() -&gt; Rect</code>","text":"<p>Get the screen boundaries as a rectangle.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.set_background","title":"<code>set_background(value: Quad)</code>","text":"<p>Set the background quad.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.set_particle_transform","title":"<code>set_particle_transform(value: Transform2d)</code>","text":"<p>Set the global particle transform.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.set_skin_transform","title":"<code>set_skin_transform(value: Transform2d)</code>","text":"<p>Set the global skin transform.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.skin_transform","title":"<code>skin_transform() -&gt; Transform2d</code>","text":"<p>Get the global skin transform.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.time","title":"<code>time() -&gt; float</code>","text":"<p>Get the current time of the game.</p> <p>Returns 0 in preview mode.</p>"},{"location":"reference/sonolus.script.runtime/#sonolus.script.runtime.touches","title":"<code>touches() -&gt; ArrayLike[Touch]</code>","text":"<p>Get the current touches of the game.</p>"},{"location":"reference/sonolus.script.sprite/","title":"sonolus.script.sprite","text":""},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.RenderMode","title":"<code>RenderMode</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Render mode for sprites.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.RenderMode.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the user's preferred render mode.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.RenderMode.LIGHTWEIGHT","title":"<code>LIGHTWEIGHT = 'lightweight'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the lightweight render mode with projective interpolation of textures.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.RenderMode.STANDARD","title":"<code>STANDARD = 'standard'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the standard render mode with bilinear interpolation of textures.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite","title":"<code>Sprite</code>","text":"<p>               Bases: <code>Record</code></p> <p>Skin sprite.</p> Usage <pre><code>Sprite(id: int)\n</code></pre>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.is_available","title":"<code>is_available: bool</code>  <code>property</code>","text":"<p>Check if the sprite is available.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw","title":"<code>draw(quad: QuadLike, z: float = 0.0, a: float = 1.0)</code>","text":"<p>Draw the sprite.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_b","title":"<code>draw_curved_b(quad: QuadLike, cp: Vec2, n: float, z: float = 0.0, a: float = 1.0)</code>","text":"<p>Draw the sprite with a curved bottom with a quadratic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp</code> <code>Vec2</code> <p>The control point of the curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_bt","title":"<code>draw_curved_bt(quad: QuadLike, cp1: Vec2, cp2: Vec2, n: float, z: float = 0.0, a: float = 1.0)</code>","text":"<p>Draw the sprite with a curved bottom and top with a cubic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp1</code> <code>Vec2</code> <p>The control point of the bottom curve.</p> required <code>cp2</code> <code>Vec2</code> <p>The control point of the top curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_l","title":"<code>draw_curved_l(quad: QuadLike, cp: Vec2, n: float, z: float = 0.0, a: float = 1.0)</code>","text":"<p>Draw the sprite with a curved left side with a quadratic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp</code> <code>Vec2</code> <p>The control point of the curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_lr","title":"<code>draw_curved_lr(quad: QuadLike, cp1: Vec2, cp2: Vec2, n: float, z: float = 0.0, a: float = 1.0)</code>","text":"<p>Draw the sprite with a curved left and right side with a cubic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp1</code> <code>Vec2</code> <p>The control point of the left curve.</p> required <code>cp2</code> <code>Vec2</code> <p>The control point of the right curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_r","title":"<code>draw_curved_r(quad: QuadLike, cp: Vec2, n: float, z: float = 0.0, a: float = 1.0)</code>","text":"<p>Draw the sprite with a curved right side with a quadratic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp</code> <code>Vec2</code> <p>The control point of the curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.Sprite.draw_curved_t","title":"<code>draw_curved_t(quad: QuadLike, cp: Vec2, n: float, z: float = 0.0, a: float = 1.0)</code>","text":"<p>Draw the sprite with a curved top with a quadratic B\u00e9zier curve.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to draw the sprite on.</p> required <code>cp</code> <code>Vec2</code> <p>The control point of the curve.</p> required <code>n</code> <code>float</code> <p>The number of segments to approximate the curve (higher is smoother but more expensive).</p> required <code>z</code> <code>float</code> <p>The z-index of the sprite.</p> <code>0.0</code> <code>a</code> <code>float</code> <p>The alpha of the sprite.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.SpriteGroup","title":"<code>SpriteGroup</code>","text":"<p>               Bases: <code>Record</code>, <code>ArrayLike[Sprite]</code></p> <p>A group of sprites.</p> Usage <pre><code>SpriteGroup(start_id: int, size: int)\n</code></pre>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.StandardSprite","title":"<code>StandardSprite</code>","text":"<p>Standard skin sprites.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.skin","title":"<code>skin(cls: type[T]) -&gt; T | Skin</code>","text":"<p>Decorator to define a skin.</p> Usage <pre><code>@skin\nclass Skin:\n    render_mode: RenderMode = RenderMode.LIGHTWEIGHT\n\n    note: StandardSprite.NOTE_HEAD_RED\n    other: Sprite = sprite(\"other\")\n    group_1: SpriteGroup = sprite_group([\"one\", \"two\", \"three\"])\n    group_2: SpriteGroup = sprite_group(f\"name_{i}\" for i in range(10))\n</code></pre>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.sprite","title":"<code>sprite(name: str) -&gt; Any</code>","text":"<p>Define a sprite with the given name.</p>"},{"location":"reference/sonolus.script.sprite/#sonolus.script.sprite.sprite_group","title":"<code>sprite_group(names: Iterable[str]) -&gt; Any</code>","text":"<p>Define a sprite group with the given names.</p>"},{"location":"reference/sonolus.script.stream/","title":"sonolus.script.stream","text":""},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream","title":"<code>Stream</code>","text":"<p>               Bases: <code>Record</code></p> <p>Represents a stream.</p> <p>Most users should use <code>@streams</code> to declare streams and stream groups, rather than creating instances of this class directly.</p> <p>If used directly, it is important that streams do not overlap. No other streams should have an offset in <code>range(self.offset, self.offset + max(1, sizeof(self.element_type())))</code>, or they will overlap and interfere with each other.</p> Usage <p>Declaring a stream: <pre><code>@streams\nclass Streams:\n    my_stream_1: Stream[Num]  # A stream of Num values\n    my_stream_2: Stream[Vec2]  # A stream of Vec2 values\n</code></pre></p> <p>Directly creating a stream (advanced usage): <pre><code>stream = Stream[Num](offset=0)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.__contains__","title":"<code>__contains__(item: int | float) -&gt; bool</code>","text":"<p>Check if the stream contains the key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.__getitem__","title":"<code>__getitem__(key: int | float) -&gt; T</code>","text":"<p>Get the value corresponding to the key.</p> <p>If the key is not in the stream, interpolates linearly between surrounding values. If the stream is empty, returns the zero value of the element type.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.__setitem__","title":"<code>__setitem__(key: int | float, value: T) -&gt; None</code>","text":"<p>Set the value corresponding to the key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.backing_size","title":"<code>backing_size() -&gt; int</code>  <code>classmethod</code>","text":"<p>Return the number of underlying single-value streams backing this stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.element_type","title":"<code>element_type() -&gt; type[T] | type[Value]</code>  <code>classmethod</code>","text":"<p>Return the type of elements in this array type.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.get_next","title":"<code>get_next(key: int | float) -&gt; T</code>","text":"<p>Get the value corresponding to the next key.</p> <p>If there is no next key, returns the value at the given key. Equivalent to <code>self[self.next_key(key)]</code>.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.get_next_inclusive","title":"<code>get_next_inclusive(key: int | float) -&gt; T</code>","text":"<p>Get the value corresponding to the next key, or the value at the given key if it is in the stream.</p> <p>Equivalent to <code>self[self.next_key_inclusive(key)]</code>.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.get_previous","title":"<code>get_previous(key: int | float) -&gt; T</code>","text":"<p>Get the value corresponding to the previous key.</p> <p>If there is no previous key, returns the value at the given key. Equivalent to <code>self[self.previous_key(key)]</code>.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.get_previous_inclusive","title":"<code>get_previous_inclusive(key: int | float) -&gt; T</code>","text":"<p>Get the value corresponding to the previous key, or the value at the given key if it is in the stream.</p> <p>Equivalent to <code>self[self.previous_key_inclusive(key)]</code>.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.has_next_key","title":"<code>has_next_key(key: int | float) -&gt; bool</code>","text":"<p>Check if there is a next key after the given key in the stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.has_previous_key","title":"<code>has_previous_key(key: int | float) -&gt; bool</code>","text":"<p>Check if there is a previous key before the given key in the stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_items_from","title":"<code>iter_items_from(start: int | float) -&gt; SonolusIterator[tuple[int | float, T]]</code>","text":"<p>Iterate over the items in the stream in ascending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor key, value in stream.iter_items_from(0):\n    do_something(key, value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_items_from_desc","title":"<code>iter_items_from_desc(start: int | float) -&gt; SonolusIterator[tuple[int | float, T]]</code>","text":"<p>Iterate over the items in the stream in descending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor key, value in stream.iter_items_from_desc(0):\n    do_something(key, value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_items_since_previous_frame","title":"<code>iter_items_since_previous_frame() -&gt; SonolusIterator[tuple[int | float, T]]</code>","text":"<p>Iterate over the items in the stream since the last frame.</p> <p>This is a convenience method that iterates over the items in the stream occurring after the time of the previous frame and up to and including the current time.</p> <p>Usage: <pre><code>stream = ...\nfor key, value in stream.iter_items_since_previous_frame():\n    do_something(key, value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_keys_from","title":"<code>iter_keys_from(start: int | float) -&gt; SonolusIterator[int | float]</code>","text":"<p>Iterate over the keys in the stream in ascending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor key in stream.iter_keys_from(0):\n    do_something(key)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_keys_from_desc","title":"<code>iter_keys_from_desc(start: int | float) -&gt; SonolusIterator[int | float]</code>","text":"<p>Iterate over the keys in the stream in descending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor key in stream.iter_keys_from_desc(0):\n    do_something(key)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_keys_since_previous_frame","title":"<code>iter_keys_since_previous_frame() -&gt; SonolusIterator[int | float]</code>","text":"<p>Iterate over the keys in the stream since the last frame.</p> <p>This is a convenience method that iterates over the keys in the stream occurring after the time of the previous frame and up to and including the current time.</p> <p>Usage: <pre><code>stream = ...\nfor key in stream.iter_keys_since_previous_frame():\n    do_something(key)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_values_from","title":"<code>iter_values_from(start: int | float) -&gt; SonolusIterator[T]</code>","text":"<p>Iterate over the values in the stream in ascending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor value in stream.iter_values_from(0):\n    do_something(value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_values_from_desc","title":"<code>iter_values_from_desc(start: int | float) -&gt; SonolusIterator[T]</code>","text":"<p>Iterate over the values in the stream in descending order starting from the given key.</p> <p>If the key is in the stream, it will be included in the iteration.</p> <p>Usage: <pre><code>stream = ...\nfor value in stream.iter_values_from_desc(0):\n    do_something(value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.iter_values_since_previous_frame","title":"<code>iter_values_since_previous_frame() -&gt; SonolusIterator[T]</code>","text":"<p>Iterate over the values in the stream since the last frame.</p> <p>This is a convenience method that iterates over the values in the stream occurring after the time of the previous frame and up to and including the current time.</p> <p>Usage: <pre><code>stream = ...\nfor value in stream.iter_values_since_previous_frame():\n    do_something(value)\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.next_key","title":"<code>next_key(key: int | float) -&gt; int | float</code>","text":"<p>Get the next key, or the key unchanged if it is the last key or the stream is empty.</p> <p>If the key is in the stream and there is a next key, returns the next key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.next_key_inclusive","title":"<code>next_key_inclusive(key: int | float) -&gt; int | float</code>","text":"<p>Like <code>next_key</code>, but returns the key itself if it is in the stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.next_key_or_default","title":"<code>next_key_or_default(key: int | float, default: int | float) -&gt; int | float</code>","text":"<p>Get the next key, or the default value if there is no next key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.previous_key","title":"<code>previous_key(key: int | float) -&gt; int | float</code>","text":"<p>Get the previous key, or the key unchanged if it is the first key or the stream is empty.</p> <p>If the key is in the stream and there is a previous key, returns the previous key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.previous_key_inclusive","title":"<code>previous_key_inclusive(key: int | float) -&gt; int | float</code>","text":"<p>Like <code>previous_key</code>, but returns the key itself if it is in the stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.Stream.previous_key_or_default","title":"<code>previous_key_or_default(key: int | float, default: int | float) -&gt; int | float</code>","text":"<p>Get the previous key, or the default value if there is no previous key.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup","title":"<code>StreamGroup</code>","text":"<p>               Bases: <code>Record</code></p> <p>Represents a group of streams.</p> <p>Most users should use <code>@streams</code> to declare stream groups rather than using this class directly.</p> Usage <p>Declaring a stream group: <pre><code>@streams\nclass Streams:\n    my_group_1: StreamGroup[Num, 10]  # A group of 10 Num streams\n    my_group_2: StreamGroup[Vec2, 5]  # A group of 5 Vec2 streams\n</code></pre></p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.__contains__","title":"<code>__contains__(item: int) -&gt; bool</code>","text":"<p>Check if the group contains the stream with the given index.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.__getitem__","title":"<code>__getitem__(index: int) -&gt; Stream[T]</code>","text":"<p>Get the stream at the given index.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.backing_size","title":"<code>backing_size() -&gt; int</code>  <code>classmethod</code>","text":"<p>Return the number of underlying single-value streams backing this stream.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.element_type","title":"<code>element_type() -&gt; type[T] | type[Value]</code>  <code>classmethod</code>","text":"<p>Return the type of elements in this group.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.StreamGroup.size","title":"<code>size() -&gt; Size</code>  <code>classmethod</code>","text":"<p>Return the size of the group.</p>"},{"location":"reference/sonolus.script.stream/#sonolus.script.stream.streams","title":"<code>streams(cls: type[T]) -&gt; T</code>","text":"<p>Decorator to define streams and stream groups.</p> <p>Streams and stream groups are declared by annotating class attributes with <code>Stream</code> or <code>StreamGroup</code>.</p> <p>Other types are also supported in the form of data fields. They may be used to store additional data to export from Play to Watch mode.</p> <p>In either case, data is write-only in Play mode and read-only in Watch mode.</p> <p>This should only be used once in most projects, as multiple decorated classes will overlap with each other and interfere when both are used at the same time.</p> <p>For backwards compatibility, new streams and stream groups should be added to the end of existing ones, and lengths and element types of existing streams and stream groups should not be changed. Otherwise, old replays may not work on new versions of the engine.</p> Usage <pre><code>@streams\nclass Streams:\n    stream_1: Stream[int]  # A stream of int values\n    stream_2: Stream[Vec2]  # A stream of Vec2 values\n    group_1: StreamGroup[int, 10]  # A group of 10 int streams\n    group_2: StreamGroup[Vec2, 5]  # A group of 5 Vec2 streams\n\n    data_field_1: int  # A data field of type int\n    data_field_2: Vec2  # A data field of type Vec2\n</code></pre>"},{"location":"reference/sonolus.script.text/","title":"sonolus.script.text","text":""},{"location":"reference/sonolus.script.text/#sonolus.script.text.StandardText","title":"<code>StandardText</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Standard text constants.</p>"},{"location":"reference/sonolus.script.timing/","title":"sonolus.script.timing","text":""},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.beat_to_bpm","title":"<code>beat_to_bpm(beat: float) -&gt; float</code>","text":"<p>Get the bpm at the given beat.</p> <p>Parameters:</p> Name Type Description Default <code>beat</code> <code>float</code> <p>The beat to get the bpm at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The bpm at the given beat.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.beat_to_starting_beat","title":"<code>beat_to_starting_beat(beat: float) -&gt; float</code>","text":"<p>Get the starting beat of the bpm section at the given beat.</p> <p>I.e. the beat of the bpm change at or immediately before the given beat.</p> <p>Parameters:</p> Name Type Description Default <code>beat</code> <code>float</code> <p>The beat to get the starting beat of the bpm section at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The starting beat of the bpm section at the given beat.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.beat_to_starting_time","title":"<code>beat_to_starting_time(beat: float) -&gt; float</code>","text":"<p>Get the starting time of the bpm section at the given beat.</p> <p>I.e. the time of the bpm change at or immediately before the given beat.</p> <p>Parameters:</p> Name Type Description Default <code>beat</code> <code>float</code> <p>The beat to get the starting time of the bpm section at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The starting time of the bpm section at the given beat.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.beat_to_time","title":"<code>beat_to_time(beat: float) -&gt; float</code>","text":"<p>Get the time at the given beat.</p> <p>Parameters:</p> Name Type Description Default <code>beat</code> <code>float</code> <p>The beat to get the time at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The time at the given beat.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.time_to_scaled_time","title":"<code>time_to_scaled_time(time: float) -&gt; float</code>","text":"<p>Get the scaled (timescale adjusted) time at the given time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time to get the scaled time at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The scaled (timescale adjusted) time at the given time.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.time_to_starting_scaled_time","title":"<code>time_to_starting_scaled_time(time: float) -&gt; float</code>","text":"<p>Get the starting scaled (timescale adjusted) time at the given time.</p> <p>I.e. the scaled time of the timescale change at or immediately before the given time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time to get the starting scaled time at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The starting scaled time at the given time.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.time_to_starting_time","title":"<code>time_to_starting_time(time: float) -&gt; float</code>","text":"<p>Get the starting time of the timescale section at the given time.</p> <p>I.e. the time of the timescale change at or immediately before the given time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time to get the starting time of the timescale section at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The starting time of the timescale section at the given time.</p>"},{"location":"reference/sonolus.script.timing/#sonolus.script.timing.time_to_timescale","title":"<code>time_to_timescale(time: float) -&gt; float</code>","text":"<p>Get the timescale at the given time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time to get the timescale at.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The timescale at the given time.</p>"},{"location":"reference/sonolus.script.transform/","title":"sonolus.script.transform","text":""},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d","title":"<code>InvertibleTransform2d</code>","text":"<p>               Bases: <code>Record</code></p> <p>A transformation matrix for 2D points that can be inverted.</p> Usage <pre><code>InvertibleTransform2d.new()\n</code></pre>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.compose","title":"<code>compose(other: InvertibleTransform2d) -&gt; InvertibleTransform2d</code>","text":"<p>Compose with another invertible transform which is applied after this transform and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>InvertibleTransform2d</code> <p>The other invertible transform to compose with.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform resulting from the composition.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.compose_before","title":"<code>compose_before(other: InvertibleTransform2d) -&gt; InvertibleTransform2d</code>","text":"<p>Compose with another invertible transform which is applied before this transform and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>InvertibleTransform2d</code> <p>The other invertible transform to compose with.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform resulting from the composition.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.inverse_transform_quad","title":"<code>inverse_transform_quad(quad: QuadLike) -&gt; Quad</code>","text":"<p>Inverse transform a <code>Quad</code> and return a new <code>Quad</code>.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to inverse transform.</p> required <p>Returns:</p> Type Description <code>Quad</code> <p>A new inverse transformed quad.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.inverse_transform_vec","title":"<code>inverse_transform_vec(v: Vec2) -&gt; Vec2</code>","text":"<p>Inverse transform a <code>Vec2</code> and return a new <code>Vec2</code>.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>Vec2</code> <p>The vector to inverse transform.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new inverse transformed vector.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.new","title":"<code>new() -&gt; InvertibleTransform2d</code>  <code>classmethod</code>","text":"<p>Create a new identity transform.</p> <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new identity transform.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.normalize","title":"<code>normalize() -&gt; InvertibleTransform2d</code>","text":"<p>Normalize the transform to have a 1 in the bottom right corner and return a new transform.</p> <p>This may fail in some special cases involving perspective transformations where the bottom right corner is 0.</p> <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new normalized invertible transform.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.perspective_x","title":"<code>perspective_x(foreground_x: float, vanishing_point: Vec2) -&gt; InvertibleTransform2d</code>","text":"<p>Apply a perspective transformation along the x-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_x</code> <code>float</code> <p>The foreground x-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.perspective_y","title":"<code>perspective_y(foreground_y: float, vanishing_point: Vec2) -&gt; InvertibleTransform2d</code>","text":"<p>Apply a perspective transformation along the y-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_y</code> <code>float</code> <p>The foreground y-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.rotate","title":"<code>rotate(angle: float) -&gt; InvertibleTransform2d</code>","text":"<p>Rotate about the origin and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians. Positive angles rotate counterclockwise.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after rotation.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.rotate_about","title":"<code>rotate_about(angle: float, /, pivot: Vec2) -&gt; InvertibleTransform2d</code>","text":"<p>Rotate about the pivot and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians. Positive angles rotate counterclockwise.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot point for rotation.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after rotation.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.scale","title":"<code>scale(factor: Vec2) -&gt; InvertibleTransform2d</code>","text":"<p>Scale about the origin and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>Vec2</code> <p>The scale factor vector.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after scaling.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.scale_about","title":"<code>scale_about(factor: Vec2, /, pivot: Vec2) -&gt; InvertibleTransform2d</code>","text":"<p>Scale about the pivot and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>Vec2</code> <p>The scale factor vector.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot point for scaling.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after scaling.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.shear_x","title":"<code>shear_x(m: float) -&gt; InvertibleTransform2d</code>","text":"<p>Shear along the x-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>float</code> <p>The shear factor along the x-axis.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after shearing.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.shear_y","title":"<code>shear_y(m: float) -&gt; InvertibleTransform2d</code>","text":"<p>Shear along the y-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>float</code> <p>The shear factor along the y-axis.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after shearing.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.simple_perspective_x","title":"<code>simple_perspective_x(x: float) -&gt; InvertibleTransform2d</code>","text":"<p>Apply perspective along the x-axis with vanishing point at the given x coordinate and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The x coordinate of the vanishing point.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.simple_perspective_y","title":"<code>simple_perspective_y(y: float) -&gt; InvertibleTransform2d</code>","text":"<p>Apply perspective along the y-axis with vanishing point at the given y coordinate and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>float</code> <p>The y coordinate of the vanishing point.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.transform_quad","title":"<code>transform_quad(quad: QuadLike) -&gt; Quad</code>","text":"<p>Transform a <code>Quad</code> and return a new <code>Quad</code>.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to transform.</p> required <p>Returns:</p> Type Description <code>Quad</code> <p>A new transformed quad.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.transform_vec","title":"<code>transform_vec(v: Vec2) -&gt; Vec2</code>","text":"<p>Transform a <code>Vec2</code> and return a new <code>Vec2</code>.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>Vec2</code> <p>The vector to transform.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new transformed vector.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.InvertibleTransform2d.translate","title":"<code>translate(translation: Vec2) -&gt; InvertibleTransform2d</code>","text":"<p>Translate along the x and y axes and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Vec2</code> <p>The translation vector.</p> required <p>Returns:</p> Type Description <code>InvertibleTransform2d</code> <p>A new invertible transform after translation.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d","title":"<code>Transform2d</code>","text":"<p>               Bases: <code>Record</code></p> <p>A transformation matrix for 2D points.</p> Usage <pre><code>Transform2d.new()\n</code></pre>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.compose","title":"<code>compose(other: Transform2d) -&gt; Transform2d</code>","text":"<p>Compose with another transform which is applied after this transform and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Transform2d</code> <p>The other transform to compose with.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform resulting from the composition.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.compose_before","title":"<code>compose_before(other: Transform2d) -&gt; Transform2d</code>","text":"<p>Compose with another transform which is applied before this transform and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Transform2d</code> <p>The other transform to compose with.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform resulting from the composition.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.inverse_perspective_x","title":"<code>inverse_perspective_x(foreground_x: float, vanishing_point: Vec2) -&gt; Transform2d</code>","text":"<p>Apply the inverse of a perspective transformation along the x-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_x</code> <code>float</code> <p>The foreground x-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after applying the inverse perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.inverse_perspective_y","title":"<code>inverse_perspective_y(foreground_y: float, vanishing_point: Vec2) -&gt; Transform2d</code>","text":"<p>Apply the inverse of a perspective transformation along the y-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_y</code> <code>float</code> <p>The foreground y-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after applying the inverse perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.new","title":"<code>new() -&gt; Transform2d</code>  <code>classmethod</code>","text":"<p>Create a new identity transform.</p> <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new identity transform.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.normalize","title":"<code>normalize() -&gt; Transform2d</code>","text":"<p>Normalize the transform to have a 1 in the bottom right corner and return a new transform.</p> <p>This may fail in some special cases involving perspective transformations where the bottom right corner is 0.</p> <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new normalized transform.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.perspective_x","title":"<code>perspective_x(foreground_x: float, vanishing_point: Vec2) -&gt; Transform2d</code>","text":"<p>Apply a perspective transformation along the x-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_x</code> <code>float</code> <p>The foreground x-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.perspective_y","title":"<code>perspective_y(foreground_y: float, vanishing_point: Vec2) -&gt; Transform2d</code>","text":"<p>Apply a perspective transformation along the y-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>foreground_y</code> <code>float</code> <p>The foreground y-coordinate.</p> required <code>vanishing_point</code> <code>Vec2</code> <p>The vanishing point vector.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.rotate","title":"<code>rotate(angle: float) -&gt; Transform2d</code>","text":"<p>Rotate about the origin and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians. Positive angles rotate counterclockwise.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after rotation.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.rotate_about","title":"<code>rotate_about(angle: float, /, pivot: Vec2) -&gt; Transform2d</code>","text":"<p>Rotate about the pivot and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle of rotation in radians. Positive angles rotate counterclockwise.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot point for rotation.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after rotation.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.scale","title":"<code>scale(factor: Vec2) -&gt; Transform2d</code>","text":"<p>Scale about the origin and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>Vec2</code> <p>The scale factor vector.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after scaling.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.scale_about","title":"<code>scale_about(factor: Vec2, /, pivot: Vec2) -&gt; Transform2d</code>","text":"<p>Scale about the pivot and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>Vec2</code> <p>The scale factor vector.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot point for scaling.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after scaling.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.shear_x","title":"<code>shear_x(m: float) -&gt; Transform2d</code>","text":"<p>Shear along the x-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>float</code> <p>The shear factor along the x-axis.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after shearing.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.shear_y","title":"<code>shear_y(m: float) -&gt; Transform2d</code>","text":"<p>Shear along the y-axis and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>float</code> <p>The shear factor along the y-axis.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after shearing.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.simple_perspective_x","title":"<code>simple_perspective_x(x: float) -&gt; Transform2d</code>","text":"<p>Apply perspective along the x-axis with vanishing point at the given x coordinate and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The x coordinate of the vanishing point.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.simple_perspective_y","title":"<code>simple_perspective_y(y: float) -&gt; Transform2d</code>","text":"<p>Apply perspective along the y-axis with vanishing point at the given y coordinate and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>float</code> <p>The y coordinate of the vanishing point.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after applying perspective.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.transform_quad","title":"<code>transform_quad(quad: QuadLike) -&gt; Quad</code>","text":"<p>Transform a <code>Quad</code> and return a new <code>Quad</code>.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>QuadLike</code> <p>The quad to transform.</p> required <p>Returns:</p> Type Description <code>Quad</code> <p>A new transformed quad.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.transform_vec","title":"<code>transform_vec(v: Vec2) -&gt; Vec2</code>","text":"<p>Transform a <code>Vec2</code> and return a new <code>Vec2</code>.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>Vec2</code> <p>The vector to transform.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new transformed vector.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.Transform2d.translate","title":"<code>translate(translation: Vec2) -&gt; Transform2d</code>","text":"<p>Translate along the x and y axes and return a new transform.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Vec2</code> <p>The translation vector.</p> required <p>Returns:</p> Type Description <code>Transform2d</code> <p>A new transform after translation.</p>"},{"location":"reference/sonolus.script.transform/#sonolus.script.transform.perspective_approach","title":"<code>perspective_approach(distance_ratio: float, progress: float) -&gt; float</code>","text":"<p>Calculate the perspective correct approach curve given the initial distance, target distance, and progress.</p> <p>For typical engines with stage tilt, distance_ratio is the displayed width of a lane at the judge line divided by the displayed width of a lane at note spawn. For flat stages, this will be 1.0, and this function would simply return progress unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>distance_ratio</code> <code>float</code> <p>The ratio of the distance at note spawn to the distance at the judge line.</p> required <code>progress</code> <code>float</code> <p>The progress value, where 0 corresponds to note spawn and 1 corresponds to the judge line.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The perspective-corrected progress value.</p>"},{"location":"reference/sonolus.script.ui/","title":"sonolus.script.ui","text":""},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.EaseType","title":"<code>EaseType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>The easing function to use.</p>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiAnimation","title":"<code>UiAnimation</code>  <code>dataclass</code>","text":"<p>Animation configuration for UI elements.</p> <p>Parameters:</p> Name Type Description Default <code>scale</code> <code>UiAnimationTween</code> <p>The animation applied to scale.</p> required <code>alpha</code> <code>UiAnimationTween</code> <p>The animation applied to alpha.</p> required"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiAnimationTween","title":"<code>UiAnimationTween</code>  <code>dataclass</code>","text":"<p>Tween animation configuration for UI elements.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The initial value.</p> required <code>end</code> <code>float</code> <p>The final value.</p> required <code>duration</code> <code>float</code> <p>The duration of the animation.</p> required <code>ease</code> <code>EaseType</code> <p>The easing function to use.</p> required"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiConfig","title":"<code>UiConfig</code>  <code>dataclass</code>","text":"<p>Configuration for UI elements.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str | None</code> <p>The scope of the configuration.</p> <code>None</code> <code>primary_metric</code> <code>UiMetric</code> <p>The primary metric to display.</p> <code>ARCADE</code> <code>secondary_metric</code> <code>UiMetric</code> <p>The secondary metric to display.</p> <code>LIFE</code> <code>menu_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for the menu.</p> <code>UiVisibility()</code> <code>judgment_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for judgments.</p> <code>UiVisibility()</code> <code>combo_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for the combo.</p> <code>UiVisibility()</code> <code>primary_metric_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for the primary metric.</p> <code>UiVisibility()</code> <code>secondary_metric_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for the secondary metric.</p> <code>UiVisibility()</code> <code>progress_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for progress.</p> <code>UiVisibility()</code> <code>tutorial_navigation_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for tutorial navigation.</p> <code>UiVisibility()</code> <code>tutorial_instruction_visibility</code> <code>UiVisibility</code> <p>The visibility configuration for tutorial instructions.</p> <code>UiVisibility()</code> <code>judgment_animation</code> <code>UiAnimation</code> <p>The animation configuration for judgments.</p> <code>lambda: UiAnimation(scale=UiAnimationTween(0, 1, 0.1, OUT_CUBIC), alpha=UiAnimationTween(1, 0, 0.3, NONE))()</code> <code>combo_animation</code> <code>UiAnimation</code> <p>The animation configuration for the combo.</p> <code>lambda: UiAnimation(scale=UiAnimationTween(1.2, 1, 0.2, IN_CUBIC), alpha=UiAnimationTween(1, 1, 0, NONE))()</code> <code>judgment_error_style</code> <code>UiJudgmentErrorStyle</code> <p>The style of the judgment error.</p> <code>LATE</code> <code>judgment_error_placement</code> <code>UiJudgmentErrorPlacement</code> <p>The placement of the judgment error.</p> <code>TOP</code> <code>judgment_error_min</code> <code>float</code> <p>The minimum judgment error.</p> <code>0.0</code>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiJudgmentErrorPlacement","title":"<code>UiJudgmentErrorPlacement</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>The placement of the judgment error.</p>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiJudgmentErrorStyle","title":"<code>UiJudgmentErrorStyle</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>The style of the judgment error.</p> <p>The name of each member refers to what's used for positive (late) judgment errors.</p>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiMetric","title":"<code>UiMetric</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>A metric to display on the UI.</p>"},{"location":"reference/sonolus.script.ui/#sonolus.script.ui.UiVisibility","title":"<code>UiVisibility</code>  <code>dataclass</code>","text":"<p>Visibility configuration for UI elements.</p> <p>Parameters:</p> Name Type Description Default <code>scale</code> <code>float</code> <p>The scale of the element.</p> <code>1.0</code> <code>alpha</code> <code>float</code> <p>The alpha of the element.</p> <code>1.0</code>"},{"location":"reference/sonolus.script.values/","title":"sonolus.script.values","text":""},{"location":"reference/sonolus.script.values/#sonolus.script.values.alloc","title":"<code>alloc(type_: type[T]) -&gt; T</code>","text":"<p>Return an uninitialized instance of the given type.</p> <p>Use this carefully as reading from uninitialized memory can lead to unexpected behavior.</p>"},{"location":"reference/sonolus.script.values/#sonolus.script.values.copy","title":"<code>copy(value: T) -&gt; T</code>","text":"<p>Make a deep copy of the given value.</p> <p>Generally works the same as the unary <code>+</code> operator on records and arrays.</p>"},{"location":"reference/sonolus.script.values/#sonolus.script.values.sizeof","title":"<code>sizeof(type_: type) -&gt; int</code>","text":"<p>Return the size of the given type.</p>"},{"location":"reference/sonolus.script.values/#sonolus.script.values.swap","title":"<code>swap(a: T, b: T)</code>","text":"<p>Swap the values of the two provided mutable values.</p>"},{"location":"reference/sonolus.script.values/#sonolus.script.values.zeros","title":"<code>zeros(type_: type[T]) -&gt; T</code>","text":"<p>Make a new instance of the given type initialized with zeros.</p> <p>Generally works the same as the unary <code>+</code> operator on record and array types.</p>"},{"location":"reference/sonolus.script.vec/","title":"sonolus.script.vec","text":""},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2","title":"<code>Vec2</code>","text":"<p>               Bases: <code>Record</code></p> <p>A 2D vector.</p> Usage <pre><code>Vec2(x: float, y: float)\n</code></pre>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.angle","title":"<code>angle: float</code>  <code>property</code>","text":"<p>Calculate the angle of the vector in radians from the positive x-axis.</p> <p>Returns:</p> Type Description <code>float</code> <p>The angle of the vector in radians.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.magnitude","title":"<code>magnitude: float</code>  <code>property</code>","text":"<p>Calculate the magnitude (length) of the vector.</p> <p>Returns:</p> Type Description <code>float</code> <p>The magnitude of the vector.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.tuple","title":"<code>tuple: tuple[float, float]</code>  <code>property</code>","text":"<p>Return the vector as a tuple (x, y).</p> <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>A tuple representation of the vector.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__add__","title":"<code>__add__(other: Vec2) -&gt; Vec2</code>","text":"<p>Add this vector to another vector and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Vec2</code> <p>The vector to add.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector resulting from the addition.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__mul__","title":"<code>__mul__(other: Vec2 | float) -&gt; Vec2</code>","text":"<p>Multiply this vector by another vector or a scalar and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Vec2 | float</code> <p>The vector or scalar to multiply by.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector resulting from the multiplication.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__neg__","title":"<code>__neg__() -&gt; Vec2</code>","text":"<p>Negate the vector (invert the direction) and return a new vector.</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector with inverted direction.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__sub__","title":"<code>__sub__(other: Vec2) -&gt; Vec2</code>","text":"<p>Subtract another vector from this vector and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Vec2</code> <p>The vector to subtract.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector resulting from the subtraction.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.__truediv__","title":"<code>__truediv__(other: Vec2 | float) -&gt; Vec2</code>","text":"<p>Divide this vector by another vector or a scalar and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Vec2 | float</code> <p>The vector or scalar to divide by.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector resulting from the division.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.dot","title":"<code>dot(other: Vec2) -&gt; float</code>","text":"<p>Calculate the dot product of this vector with another vector.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Vec2</code> <p>The other vector to calculate the dot product with.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The dot product of the two vectors.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.down","title":"<code>down() -&gt; Vec2</code>  <code>classmethod</code>","text":"<p>Return a vector pointing downwards (x=0, y=-1).</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector pointing downwards.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.left","title":"<code>left() -&gt; Vec2</code>  <code>classmethod</code>","text":"<p>Return a vector pointing to the left (x=-1, y=0).</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector pointing to the left.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.normalize","title":"<code>normalize() -&gt; Vec2</code>","text":"<p>Normalize the vector (set the magnitude to 1) and return a new vector.</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector with magnitude 1.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.one","title":"<code>one() -&gt; Vec2</code>  <code>classmethod</code>","text":"<p>Return a vector with x and y set to 1.</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector with x=1 and y=1.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.orthogonal","title":"<code>orthogonal() -&gt; Vec2</code>","text":"<p>Return a vector orthogonal to this vector.</p> <p>The orthogonal vector is rotated 90 degrees counter-clockwise from this vector.</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector orthogonal to this vector.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.right","title":"<code>right() -&gt; Vec2</code>  <code>classmethod</code>","text":"<p>Return a vector pointing to the right (x=1, y=0).</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector pointing to the right.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.rotate","title":"<code>rotate(angle: float) -&gt; Vec2</code>","text":"<p>Rotate the vector by a given angle in radians and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle to rotate the vector by, in radians. Positive angles rotate counterclockwise.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector rotated by the given angle.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.rotate_about","title":"<code>rotate_about(angle: float, pivot: Vec2) -&gt; Vec2</code>","text":"<p>Rotate the vector about a pivot by a given angle in radians and return a new vector.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle to rotate the vector by, in radians. Positive angles rotate counterclockwise.</p> required <code>pivot</code> <code>Vec2</code> <p>The pivot point to rotate about.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector rotated about the pivot by the given angle.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.unit","title":"<code>unit(angle: float) -&gt; Vec2</code>  <code>classmethod</code>","text":"<p>Return a unit vector (magnitude 1) at a given angle in radians.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle in radians.</p> required <p>Returns:</p> Type Description <code>Vec2</code> <p>A new unit vector at the specified angle.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.up","title":"<code>up() -&gt; Vec2</code>  <code>classmethod</code>","text":"<p>Return a vector pointing upwards (x=0, y=1).</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector pointing upwards.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.Vec2.zero","title":"<code>zero() -&gt; Vec2</code>  <code>classmethod</code>","text":"<p>Return a vector with x and y set to 0.</p> <p>Returns:</p> Type Description <code>Vec2</code> <p>A new vector with x=0 and y=0.</p>"},{"location":"reference/sonolus.script.vec/#sonolus.script.vec.pnpoly","title":"<code>pnpoly(vertices: ArrayLike[Vec2] | tuple[Vec2, ...], test: Vec2) -&gt; bool</code>","text":"<p>Check if a point is inside a polygon.</p> <p>No guaranteed behavior for points on the edges or very close to the edges.</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>ArrayLike[Vec2] | tuple[Vec2, ...]</code> <p>The vertices of the polygon.</p> required <code>test</code> <code>Vec2</code> <p>The point to test.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether the point is inside the polygon.</p>"},{"location":"reference/typing/","title":"typing","text":"<p>Supported functions in the Python standard library <code>typing</code> module.</p> <p>Apart from the listed functions, arbitrary type hints are supported as function parameter and return type hints.</p>"},{"location":"reference/typing/#doc_stubs.typing.assert_never","title":"<code>assert_never(arg: Never) -&gt; Never</code>","text":"<p>Ask a static type checker to confirm that a line of code is unreachable.</p>"}]}