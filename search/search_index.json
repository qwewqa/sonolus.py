{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sonolus.py","text":""},{"location":"reference/types/","title":"Types","text":"<p>Sonolus.py compes with support for a number of Python built-in types and some custom types.</p>"},{"location":"reference/types/#num","title":"Num","text":"<p><code>Num</code> is the numeric and boolean type in Sonolus.py. It is interchangeable with <code>int</code>, <code>float</code>, and <code>bool</code>. Sonolus.py will treat any of these types as <code>Num</code>, but it's recommended to use what's appropriate for clarity.</p> <p>Sonolus uses 32-bit floating-point numbers for all numeric values, so precision may be lower compared to Python when running on Sonolus.</p> <p>Infinity, NaN, and values outside the range of 32-bit floating-point numbers are not supported.</p> <p>You can import <code>Num</code> from <code>sonolus.script.num</code>:</p> <pre><code>from sonolus.script.num import Num\n</code></pre>"},{"location":"reference/types/#declaration","title":"Declaration","text":"<p>Instances of <code>Num</code> can be declared using standard Python syntax.</p> <pre><code>a = 1\nb = 2.5\nc = True\n</code></pre>"},{"location":"reference/types/#operations","title":"Operations","text":"<p><code>Num</code> supports most of the standard Python operations:</p> <ul> <li>Comparison operators: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>Arithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code></li> <li>Unary operators: <code>+</code>, <code>-</code></li> </ul> <p><code>Num</code> is also the only supported type for boolean operations and control flow conditions. Any nonzero value is considered <code>True</code>, and <code>0</code> is considered <code>False</code>.</p> <ul> <li>Logical operators: <code>and</code>, <code>or</code>, <code>not</code></li> <li>Ternary expressions: <code>... if &lt;condition&gt; else ...</code></li> <li>If statements: <code>if &lt;condition&gt;:</code>, <code>elif &lt;condition&gt;:</code></li> <li>While loops: <code>while &lt;condition&gt;:</code></li> <li>Case guards: <code>case ... if &lt;condition&gt;:</code></li> </ul>"},{"location":"reference/types/#instance-checks","title":"Instance Checks","text":"<p>Since <code>Num</code> is interchangeable with <code>int</code>, <code>float</code>, and <code>bool</code>, only <code>Num</code> is supported for type checks.</p> <pre><code>x = ...\n\n# Ok:\nisinstance(x, Num)\n\nmatch x:\n    case Num(value):\n        ...\n\n# Not ok:\nisinstance(x, int)\nisinstance(x, float)\nisinstance(x, bool)\n\nmatch x:\n    case int(value):\n        ...\n    case float(value):\n        ...\n    case bool(value):\n        ...\n</code></pre>"},{"location":"reference/types/#conversion","title":"Conversion","text":"<p>Calling <code>int</code>, <code>float</code>, or <code>bool</code> is only supported for an argument of type <code>Num</code>.</p> <p>Details:</p> <ul> <li><code>int</code>: Equivalent to <code>math.trunc</code>.</li> <li><code>float</code>: Validates that the value is a <code>Num</code> and returns it as is.</li> <li><code>bool</code>: Validates that the value is a <code>Num</code> and returns <code>1</code> for <code>True</code> and <code>0</code> for <code>False</code>.</li> </ul>"},{"location":"reference/types/#array","title":"Array","text":"<p><code>Array[T, Size]</code> stores a fixed number of elements of the same type.</p> <p>It has two type parameters: - <code>T</code>: The type of the elements. - <code>Size</code>: The number of elements.</p> <p>You can import <code>Array</code> from <code>sonolus.script.array</code>:</p> <pre><code>from sonolus.script.array import Array\n</code></pre>"},{"location":"reference/types/#declaration_1","title":"Declaration","text":"<p>Arrays can be created using its constructor:</p> <pre><code>a1 = Array[int, 3](1, 2, 3)\na2 = Array[int, 0]()\n</code></pre> <p>If at least one element is provided, the element type and size can be inferred:</p> <pre><code>a3 = Array(1, 2, 3)\n</code></pre> <p>The element type must be concrete (not generic) and the size must be a non-negative integer:</p> <pre><code># Ok\na4 = Array[Array[int, 3], 2](Array(1, 2, 3), Array(4, 5, 6))\n\n# Not ok:\na5 = Array[int, 0.5]()  # The size must be a non-negative integer\na6 = Array[Array, 2](Array(1, 2, 3), Array(4, 5, 6))  # The element type must be concrete (not generic)\n</code></pre> <p>Copies are made of any values provided to the constructor:</p> <pre><code>pair = Pair(1, 2)\na = Array[Pair, 1](pair)\nassert a[0] == Pair(1, 2)\n\npair.x = 3\nassert a[0] == Pair(1, 2)  # The value in the array is independent of the original value\n</code></pre>"},{"location":"reference/types/#operations_1","title":"Operations","text":"<p>Copying the value from one array to another using the copy from operator (<code>@=</code>)<sup>1</sup>:</p> <pre><code>source_array = Array(1, 2, 3)\ndestination_array = Array(0, 0, 0)\n\ndestination_array @= source_array\nassert destination_array == Array(1, 2, 3)\n</code></pre> <p>Comparing arrays for equality:</p> <pre><code>assert Array(1, 2, 3) == Array(1, 2, 3)\nassert Array(1, 2, 3) != Array(4, 5, 6)\n</code></pre> <p>Accessing elements:</p> <pre><code>a = Array(1, 2, 3)\nassert a[0] == 1\nassert a[1] == 2\nassert a[2] == 3\n</code></pre> <p>Updating elements:</p> <pre><code>a = Array(1, 2, 3)\na[0] = 4\nassert a == Array(4, 2, 3)\n</code></pre> <p>Warning</p> <p>If a value in an array is not a <code>Num</code>, updating it will copy the given value into the corresponding element of the array. However, that element remains independent of the original value.</p> <pre><code>pair = Pair(1, 2)\na = Array(Pair(0, 0))\n\na[0] = pair  # or equivalently: a[0] @= pair\nassert a[0] == Pair(1, 2)\n\npair.x = 3\nassert a[0] == Pair(1, 2)  # The value in the array is independent of the original value\n</code></pre> <p>For clarity, it's recommended to use the copy from operator (<code>@=</code>) when updating elements that are known to be of some type other than <code>Num</code>.</p> <pre><code>a[0] @= pair\n</code></pre> <p>Getting the length of an array:</p> <pre><code>assert len(Array(1, 2, 3)) == 3\n</code></pre> <p>Iterating over elements:</p> <pre><code>a = Array(1, 2, 3)\n\nfor element in a:\n    debug_log(element)\n</code></pre> <p>Other functionality:</p> <p>Array inherits from ArrayLike and supports all of its methods.</p>"},{"location":"reference/types/#instance-checks_1","title":"Instance Checks","text":"<p>Any array is considered an instance of the generic <code>Array</code> type.</p> <pre><code>a = Array(1, 2, 3)\nassert isinstance(a, Array)\n</code></pre> <p>Only an array with the exact element type and size is considered an instance of a concrete <code>Array[T, Size]</code> type.</p> <pre><code>a = Array(1, 2, 3)\nassert isinstance(a, Array[int, 3])\nassert not isinstance(a, Array[int, 2])\nassert not isinstance(a, Array[Pair, 3])\n</code></pre>"},{"location":"reference/types/#record","title":"Record","text":""},{"location":"reference/types/#transient-types","title":"Transient Types","text":"<p>In addition to the standard types, the following transient types are available. Compared to the standard types, these types come with the restriction that they cannot be used as type parameters or as a Record field's type.</p> <ol> <li> <p>The copy from operator (<code>@=</code>) is officially the in-place matrix multiplication operator in Python, but it has been repurposed in Sonolus.py for copying Arrays and Records.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/standard_library/array_like/","title":"ArrayLike[T]","text":"<p>               Bases: <code>Sequence</code>, <code>ABC</code></p> <p>Mixin for array-like objects.</p> <p>Inheritor must implement <code>__len__</code>, <code>__getitem__</code>, and <code>__setitem__</code>.</p> Usage <pre><code>class MyArrayLike(Record, ArrayLike[T]):\n    def __len__(self) -&gt; int:\n        ...\n\n    def __getitem__(self, index: Num) -&gt; T:\n        ...\n\n    def __setitem__(self, index: Num, value: T):\n        ...\n</code></pre>"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.__contains__","title":"<code>__contains__(value)</code>","text":"<p>Returns whether any element in the array is equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check for.</p> required"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.__getitem__","title":"<code>__getitem__(index)</code>  <code>abstractmethod</code>","text":"<p>Returns the item at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>Num</code> <p>The index of the item. Must be an integer between 0 and <code>len(self) - 1</code>.</p> required"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.__iter__","title":"<code>__iter__()</code>","text":"<p>Returns an iterator over the array.</p>"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.__len__","title":"<code>__len__()</code>  <code>abstractmethod</code>","text":"<p>Returns the length of the array.</p>"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.__reversed__","title":"<code>__reversed__()</code>","text":"<p>Returns a reversed view of the array.</p>"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.__setitem__","title":"<code>__setitem__(index, value)</code>  <code>abstractmethod</code>","text":"<p>Sets the value of the item at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>Num</code> <p>The index of the item. Must be an integer between 0 and <code>len(self) - 1</code>.</p> required <code>value</code> <code>T</code> <p>The value to set.</p> required"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.count","title":"<code>count(value)</code>","text":"<p>Returns the number of elements in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to count.</p> required"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.index","title":"<code>index(value, start=0, stop=None)</code>","text":"<p>Returns the index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required <code>start</code> <code>Num</code> <p>The index to start searching from.</p> <code>0</code> <code>stop</code> <code>Num | None</code> <p>The index to stop searching at. If <code>None</code>, search to the end of the array.</p> <code>None</code>"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.last_index","title":"<code>last_index(value)</code>","text":"<p>Returns the last index of the value in the array equal to the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to search for.</p> required"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.reverse","title":"<code>reverse()</code>","text":"<p>Reverses the values in the array in place.</p>"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.sort","title":"<code>sort(*, key=None, reverse=False)</code>","text":"<p>Sorts the values in the array in place.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Callable[T, Any] | None</code> <p>A one-argument ordering function to use for comparison.</p> <code>None</code> <code>reverse</code> <code>bool</code> <p>If <code>True</code>, sort in descending order, otherwise sort in ascending order.</p> <code>False</code>"},{"location":"reference/standard_library/array_like/#sonolus.script.array_like.ArrayLike.swap","title":"<code>swap(i, j)</code>","text":"<p>Swaps the values at the given indices.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>Num</code> <p>The first index.</p> required <code>j</code> <code>Num</code> <p>The second index.</p> required"}]}